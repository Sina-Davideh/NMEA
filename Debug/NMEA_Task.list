
NMEA_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800a368  0800a368  0000b368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa0c  0800aa0c  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa0c  0800aa0c  0000ba0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa14  0800aa14  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa14  0800aa14  0000ba14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa18  0800aa18  0000ba18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800aa1c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          00000734  200001d8  200001d8  0000c1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000090c  2000090c  0000c1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c367  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e08  00000000  00000000  0001856b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0001a378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072c  00000000  00000000  0001ace8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021869  00000000  00000000  0001b414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b91f  00000000  00000000  0003cc7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7ade  00000000  00000000  0004859c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011007a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a7c  00000000  00000000  001100c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00113b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a34c 	.word	0x0800a34c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a34c 	.word	0x0800a34c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2){
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10d      	bne.n	8001036 <HAL_UARTEx_RxEventCallback+0x32>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, NMEA_RX_Buffer, 512);
 800101a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800101e:	4909      	ldr	r1, [pc, #36]	@ (8001044 <HAL_UARTEx_RxEventCallback+0x40>)
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <HAL_UARTEx_RxEventCallback+0x44>)
 8001022:	f004 f839 	bl	8005098 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <HAL_UARTEx_RxEventCallback+0x48>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b07      	ldr	r3, [pc, #28]	@ (800104c <HAL_UARTEx_RxEventCallback+0x48>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0208 	bic.w	r2, r2, #8
 8001034:	601a      	str	r2, [r3, #0]
	}
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40004400 	.word	0x40004400
 8001044:	20000578 	.word	0x20000578
 8001048:	2000021c 	.word	0x2000021c
 800104c:	20000264 	.word	0x20000264

08001050 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN_RX_Header, &CAN_RX_Buffer);
 8001058:	4b08      	ldr	r3, [pc, #32]	@ (800107c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800105a:	4a09      	ldr	r2, [pc, #36]	@ (8001080 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800105c:	2100      	movs	r1, #0
 800105e:	4809      	ldr	r0, [pc, #36]	@ (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001060:	f002 f94b 	bl	80032fa <HAL_CAN_GetRxMessage>

	if(CAN_RX_Header.DLC == 2){
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d102      	bne.n	8001072 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		DataFlag = True;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
	}
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200007ad 	.word	0x200007ad
 8001080:	20000790 	.word	0x20000790
 8001084:	200001f4 	.word	0x200001f4
 8001088:	200007b4 	.word	0x200007b4

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001090:	f001 fe8e 	bl	8002db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001094:	f000 f858 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001098:	f000 f946 	bl	8001328 <MX_GPIO_Init>
  MX_DMA_Init();
 800109c:	f000 f91c 	bl	80012d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010a0:	f000 f8f0 	bl	8001284 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80010a4:	f000 f8ba 	bl	800121c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* Enable UART communication as idle DMA */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, NMEA_RX_Buffer, 512);
 80010a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ac:	491d      	ldr	r1, [pc, #116]	@ (8001124 <main+0x98>)
 80010ae:	481e      	ldr	r0, [pc, #120]	@ (8001128 <main+0x9c>)
 80010b0:	f003 fff2 	bl	8005098 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <main+0xa0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <main+0xa0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0208 	bic.w	r2, r2, #8
 80010c2:	601a      	str	r2, [r3, #0]

  /* Enable CAN communication */
  HAL_CAN_Start(&hcan1);
 80010c4:	481a      	ldr	r0, [pc, #104]	@ (8001130 <main+0xa4>)
 80010c6:	f002 f804 	bl	80030d2 <HAL_CAN_Start>

  /* Active CAN notification */
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80010ca:	2102      	movs	r1, #2
 80010cc:	4818      	ldr	r0, [pc, #96]	@ (8001130 <main+0xa4>)
 80010ce:	f002 fa36 	bl	800353e <HAL_CAN_ActivateNotification>

  /* Config CAN */
  CAN_TX_Header.DLC = 2;
 80010d2:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <main+0xa8>)
 80010d4:	2202      	movs	r2, #2
 80010d6:	611a      	str	r2, [r3, #16]
  CAN_TX_Header.IDE = CAN_ID_STD;
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <main+0xa8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  CAN_TX_Header.RTR = CAN_RTR_DATA;
 80010de:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <main+0xa8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  CAN_TX_Header.StdId = 0x161;
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <main+0xa8>)
 80010e6:	f240 1261 	movw	r2, #353	@ 0x161
 80010ea:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  NMEA_Structure_Update(&GPS_NMEA_DataPackage, NMEA_RX_Buffer);
 80010ec:	490d      	ldr	r1, [pc, #52]	@ (8001124 <main+0x98>)
 80010ee:	4812      	ldr	r0, [pc, #72]	@ (8001138 <main+0xac>)
 80010f0:	f000 f956 	bl	80013a0 <NMEA_Structure_Update>
	  HAL_CAN_AddTxMessage(&hcan1, &CAN_TX_Header, &CAN_TX_Buffer, &CAN_TX_MailBox);
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <main+0xb0>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <main+0xb4>)
 80010f8:	490e      	ldr	r1, [pc, #56]	@ (8001134 <main+0xa8>)
 80010fa:	480d      	ldr	r0, [pc, #52]	@ (8001130 <main+0xa4>)
 80010fc:	f002 f82d 	bl	800315a <HAL_CAN_AddTxMessage>
	  HAL_Delay(100);
 8001100:	2064      	movs	r0, #100	@ 0x64
 8001102:	f001 fec7 	bl	8002e94 <HAL_Delay>

	  if(DataFlag == True){
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <main+0xb8>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d1ee      	bne.n	80010ec <main+0x60>
		  /* in this state you can send specific data needed by another member */
		  HAL_CAN_AddTxMessage(&hcan1, &CAN_TX_Header, &CAN_TX_Buffer, &CAN_TX_MailBox);
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <main+0xb0>)
 8001110:	4a0b      	ldr	r2, [pc, #44]	@ (8001140 <main+0xb4>)
 8001112:	4908      	ldr	r1, [pc, #32]	@ (8001134 <main+0xa8>)
 8001114:	4806      	ldr	r0, [pc, #24]	@ (8001130 <main+0xa4>)
 8001116:	f002 f820 	bl	800315a <HAL_CAN_AddTxMessage>

		  /* After send the data reset the flag */
		  DataFlag = False;
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <main+0xb8>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
	  NMEA_Structure_Update(&GPS_NMEA_DataPackage, NMEA_RX_Buffer);
 8001120:	e7e4      	b.n	80010ec <main+0x60>
 8001122:	bf00      	nop
 8001124:	20000578 	.word	0x20000578
 8001128:	2000021c 	.word	0x2000021c
 800112c:	20000264 	.word	0x20000264
 8001130:	200001f4 	.word	0x200001f4
 8001134:	20000778 	.word	0x20000778
 8001138:	20000328 	.word	0x20000328
 800113c:	200007b0 	.word	0x200007b0
 8001140:	200007ac 	.word	0x200007ac
 8001144:	200007b4 	.word	0x200007b4

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	@ 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0320 	add.w	r3, r7, #32
 8001152:	2230      	movs	r2, #48	@ 0x30
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f006 fd72 	bl	8007c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	4b28      	ldr	r3, [pc, #160]	@ (8001214 <SystemClock_Config+0xcc>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001174:	4a27      	ldr	r2, [pc, #156]	@ (8001214 <SystemClock_Config+0xcc>)
 8001176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800117a:	6413      	str	r3, [r2, #64]	@ 0x40
 800117c:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <SystemClock_Config+0xcc>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <SystemClock_Config+0xd0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <SystemClock_Config+0xd0>)
 8001192:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <SystemClock_Config+0xd0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a4:	2302      	movs	r3, #2
 80011a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a8:	2301      	movs	r3, #1
 80011aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ac:	2310      	movs	r3, #16
 80011ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b0:	2302      	movs	r3, #2
 80011b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011b8:	2308      	movs	r3, #8
 80011ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011bc:	23a8      	movs	r3, #168	@ 0xa8
 80011be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011c4:	2304      	movs	r3, #4
 80011c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	f107 0320 	add.w	r3, r7, #32
 80011cc:	4618      	mov	r0, r3
 80011ce:	f003 fabb 	bl	8004748 <HAL_RCC_OscConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011d8:	f000 f8dc 	bl	8001394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011dc:	230f      	movs	r3, #15
 80011de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e0:	2302      	movs	r3, #2
 80011e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 fd1c 	bl	8004c38 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001206:	f000 f8c5 	bl	8001394 <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3750      	adds	r7, #80	@ 0x50
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40007000 	.word	0x40007000

0800121c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001220:	4b16      	ldr	r3, [pc, #88]	@ (800127c <MX_CAN1_Init+0x60>)
 8001222:	4a17      	ldr	r2, [pc, #92]	@ (8001280 <MX_CAN1_Init+0x64>)
 8001224:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <MX_CAN1_Init+0x60>)
 8001228:	2210      	movs	r2, #16
 800122a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800122c:	4b13      	ldr	r3, [pc, #76]	@ (800127c <MX_CAN1_Init+0x60>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_CAN1_Init+0x60>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001238:	4b10      	ldr	r3, [pc, #64]	@ (800127c <MX_CAN1_Init+0x60>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_CAN1_Init+0x60>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001244:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <MX_CAN1_Init+0x60>)
 8001246:	2200      	movs	r2, #0
 8001248:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800124a:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_CAN1_Init+0x60>)
 800124c:	2200      	movs	r2, #0
 800124e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <MX_CAN1_Init+0x60>)
 8001252:	2200      	movs	r2, #0
 8001254:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_CAN1_Init+0x60>)
 8001258:	2200      	movs	r2, #0
 800125a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	@ (800127c <MX_CAN1_Init+0x60>)
 800125e:	2200      	movs	r2, #0
 8001260:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_CAN1_Init+0x60>)
 8001264:	2200      	movs	r2, #0
 8001266:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <MX_CAN1_Init+0x60>)
 800126a:	f001 fe37 	bl	8002edc <HAL_CAN_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001274:	f000 f88e 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200001f4 	.word	0x200001f4
 8001280:	40006400 	.word	0x40006400

08001284 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_USART2_UART_Init+0x4c>)
 800128a:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <MX_USART2_UART_Init+0x50>)
 800128c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <MX_USART2_UART_Init+0x4c>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <MX_USART2_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_USART2_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012bc:	f003 fe9c 	bl	8004ff8 <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012c6:	f000 f865 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000021c 	.word	0x2000021c
 80012d4:	40004400 	.word	0x40004400

080012d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <MX_DMA_Init+0x4c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001324 <MX_DMA_Init+0x4c>)
 80012e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <MX_DMA_Init+0x4c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2010      	movs	r0, #16
 8001300:	f002 fc4d 	bl	8003b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001304:	2010      	movs	r0, #16
 8001306:	f002 fc66 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2011      	movs	r0, #17
 8001310:	f002 fc45 	bl	8003b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001314:	2011      	movs	r0, #17
 8001316:	f002 fc5e 	bl	8003bd6 <HAL_NVIC_EnableIRQ>

}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <MX_GPIO_Init+0x68>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a16      	ldr	r2, [pc, #88]	@ (8001390 <MX_GPIO_Init+0x68>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <MX_GPIO_Init+0x68>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <MX_GPIO_Init+0x68>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a0f      	ldr	r2, [pc, #60]	@ (8001390 <MX_GPIO_Init+0x68>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <MX_GPIO_Init+0x68>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <MX_GPIO_Init+0x68>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <MX_GPIO_Init+0x68>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <MX_GPIO_Init+0x68>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <Error_Handler+0x8>

080013a0 <NMEA_Structure_Update>:
#include "nmea.h"

void NMEA_Structure_Update(NMEA_Data_Struct_t *nmea, char *buffer){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b09e      	sub	sp, #120	@ 0x78
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]

    char *res;
    char *tok;
    char data[100];
    char *pNMEA_Message_ID;
    strcpy(data, buffer);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f006 fd40 	bl	8007e36 <strcpy>

    /* Remove enytihings before message ID */
    res = strchr(data, '$');
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	2124      	movs	r1, #36	@ 0x24
 80013bc:	4618      	mov	r0, r3
 80013be:	f006 fc47 	bl	8007c50 <strchr>
 80013c2:	6778      	str	r0, [r7, #116]	@ 0x74
    // printf("%s\n", res);

    /* Extract Message_ID */
    tok = strtok(res, ",");
 80013c4:	4938      	ldr	r1, [pc, #224]	@ (80014a8 <NMEA_Structure_Update+0x108>)
 80013c6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80013c8:	f006 fc62 	bl	8007c90 <strtok>
 80013cc:	6738      	str	r0, [r7, #112]	@ 0x70
    // printf("%s\n", tok);

    pNMEA_Message_ID = &GGA_Message_ID[0];
 80013ce:	4b37      	ldr	r3, [pc, #220]	@ (80014ac <NMEA_Structure_Update+0x10c>)
 80013d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (strcmp(tok, pNMEA_Message_ID) == 0)
 80013d2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80013d4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80013d6:	f7fe fefb 	bl	80001d0 <strcmp>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d103      	bne.n	80013e8 <NMEA_Structure_Update+0x48>
    {
        GGA_Structure_Update(nmea, buffer);
 80013e0:	6839      	ldr	r1, [r7, #0]
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f874 	bl	80014d0 <GGA_Structure_Update>
    }

    pNMEA_Message_ID = &GLL_Message_ID[0];
 80013e8:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <NMEA_Structure_Update+0x110>)
 80013ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (strcmp(tok, pNMEA_Message_ID) == 0)
 80013ec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80013ee:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80013f0:	f7fe feee 	bl	80001d0 <strcmp>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d103      	bne.n	8001402 <NMEA_Structure_Update+0x62>
    {
        GLL_Structure_Update(nmea, buffer);
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 fa1f 	bl	8001840 <GLL_Structure_Update>
    }

    pNMEA_Message_ID = &GSA_Message_ID[0];
 8001402:	4b2c      	ldr	r3, [pc, #176]	@ (80014b4 <NMEA_Structure_Update+0x114>)
 8001404:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (strcmp(tok, pNMEA_Message_ID) == 0)
 8001406:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001408:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800140a:	f7fe fee1 	bl	80001d0 <strcmp>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d103      	bne.n	800141c <NMEA_Structure_Update+0x7c>
    {
        GSA_Structure_Update(nmea, buffer);
 8001414:	6839      	ldr	r1, [r7, #0]
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 fb6c 	bl	8001af4 <GSA_Structure_Update>
    }

    pNMEA_Message_ID = &GSV_Message_ID[0];
 800141c:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <NMEA_Structure_Update+0x118>)
 800141e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (strcmp(tok, pNMEA_Message_ID) == 0)
 8001420:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001422:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001424:	f7fe fed4 	bl	80001d0 <strcmp>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d103      	bne.n	8001436 <NMEA_Structure_Update+0x96>
    {
        GSV_Structure_Update(nmea, buffer);
 800142e:	6839      	ldr	r1, [r7, #0]
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fc87 	bl	8001d44 <GSV_Structure_Update>
    }

    pNMEA_Message_ID = &MSS_Message_ID[0];
 8001436:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <NMEA_Structure_Update+0x11c>)
 8001438:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (strcmp(tok, pNMEA_Message_ID) == 0)
 800143a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800143c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800143e:	f7fe fec7 	bl	80001d0 <strcmp>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d103      	bne.n	8001450 <NMEA_Structure_Update+0xb0>
    {
        MSS_Structure_Update(nmea, buffer);
 8001448:	6839      	ldr	r1, [r7, #0]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fdac 	bl	8001fa8 <MSS_Structure_Update>
    }

    pNMEA_Message_ID = &RMC_Message_ID[0];
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <NMEA_Structure_Update+0x120>)
 8001452:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (strcmp(tok, pNMEA_Message_ID) == 0)
 8001454:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001456:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001458:	f7fe feba 	bl	80001d0 <strcmp>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d103      	bne.n	800146a <NMEA_Structure_Update+0xca>
    {
        RMC_Structure_Update(nmea, buffer);
 8001462:	6839      	ldr	r1, [r7, #0]
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 fe33 	bl	80020d0 <RMC_Structure_Update>
    }

    pNMEA_Message_ID = &VTG_Message_ID[0];
 800146a:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <NMEA_Structure_Update+0x124>)
 800146c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (strcmp(tok, pNMEA_Message_ID) == 0)
 800146e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001470:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001472:	f7fe fead 	bl	80001d0 <strcmp>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d103      	bne.n	8001484 <NMEA_Structure_Update+0xe4>
    {
        VTG_Structure_Update(nmea, buffer);
 800147c:	6839      	ldr	r1, [r7, #0]
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f001 f804 	bl	800248c <VTG_Structure_Update>
    }

    pNMEA_Message_ID = &ZDA_Message_ID[0];
 8001484:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <NMEA_Structure_Update+0x128>)
 8001486:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (strcmp(tok, pNMEA_Message_ID) == 0)
 8001488:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800148a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800148c:	f7fe fea0 	bl	80001d0 <strcmp>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d103      	bne.n	800149e <NMEA_Structure_Update+0xfe>
    {
        ZDA_Structure_Update(nmea, buffer);
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f001 f8c1 	bl	8002620 <ZDA_Structure_Update>
    }

}
 800149e:	bf00      	nop
 80014a0:	3778      	adds	r7, #120	@ 0x78
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	0800a368 	.word	0x0800a368
 80014ac:	0800a50c 	.word	0x0800a50c
 80014b0:	0800a518 	.word	0x0800a518
 80014b4:	0800a524 	.word	0x0800a524
 80014b8:	0800a530 	.word	0x0800a530
 80014bc:	0800a53c 	.word	0x0800a53c
 80014c0:	0800a548 	.word	0x0800a548
 80014c4:	0800a554 	.word	0x0800a554
 80014c8:	0800a560 	.word	0x0800a560
 80014cc:	00000000 	.word	0x00000000

080014d0 <GGA_Structure_Update>:


void GGA_Structure_Update(NMEA_Data_Struct_t *nmea, char *buffer){
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]

    char *ret;
    char *token;

    /* Remove anythings before message ID */
    ret = strchr(buffer, '$');
 80014da:	2124      	movs	r1, #36	@ 0x24
 80014dc:	6838      	ldr	r0, [r7, #0]
 80014de:	f006 fbb7 	bl	8007c50 <strchr>
 80014e2:	61f8      	str	r0, [r7, #28]
    // printf("%s\n", ret);

    /* Extract Message_ID */
    token = strtok(ret, ",");
 80014e4:	49be      	ldr	r1, [pc, #760]	@ (80017e0 <GGA_Structure_Update+0x310>)
 80014e6:	69f8      	ldr	r0, [r7, #28]
 80014e8:	f006 fbd2 	bl	8007c90 <strtok>
 80014ec:	61b8      	str	r0, [r7, #24]
    strcpy(nmea->GGA.Message_ID, token);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69b9      	ldr	r1, [r7, #24]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f006 fc9f 	bl	8007e36 <strcpy>

    /* Extract UTC Time */
    token = strtok(0, ",");
 80014f8:	49b9      	ldr	r1, [pc, #740]	@ (80017e0 <GGA_Structure_Update+0x310>)
 80014fa:	2000      	movs	r0, #0
 80014fc:	f006 fbc8 	bl	8007c90 <strtok>
 8001500:	61b8      	str	r0, [r7, #24]
    nmea->GGA.UTC_Time.Time = atof(token);
 8001502:	69b8      	ldr	r0, [r7, #24]
 8001504:	f004 feb2 	bl	800626c <atof>
 8001508:	eeb0 7a40 	vmov.f32	s14, s0
 800150c:	eef0 7a60 	vmov.f32	s15, s1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	ed83 7b02 	vstr	d7, [r3, #8]
    nmea->GGA.UTC_Time.hour = nmea->GGA.UTC_Time.Time / 10000;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800151c:	a3ae      	add	r3, pc, #696	@ (adr r3, 80017d8 <GGA_Structure_Update+0x308>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f9a3 	bl	800086c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb23 	bl	8000b78 <__aeabi_d2iz>
 8001532:	4602      	mov	r2, r0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	611a      	str	r2, [r3, #16]
    nmea->GGA.UTC_Time.min = (nmea->GGA.UTC_Time.Time/100) - (((int)(nmea->GGA.UTC_Time.Time/10000))*100);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	4ba8      	ldr	r3, [pc, #672]	@ (80017e4 <GGA_Structure_Update+0x314>)
 8001544:	f7ff f992 	bl	800086c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4614      	mov	r4, r2
 800154e:	461d      	mov	r5, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001556:	a3a0      	add	r3, pc, #640	@ (adr r3, 80017d8 <GGA_Structure_Update+0x308>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7ff f986 	bl	800086c <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fb06 	bl	8000b78 <__aeabi_d2iz>
 800156c:	4603      	mov	r3, r0
 800156e:	2264      	movs	r2, #100	@ 0x64
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ffe5 	bl	8000544 <__aeabi_i2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4620      	mov	r0, r4
 8001580:	4629      	mov	r1, r5
 8001582:	f7fe fe91 	bl	80002a8 <__aeabi_dsub>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff faf3 	bl	8000b78 <__aeabi_d2iz>
 8001592:	4602      	mov	r2, r0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	615a      	str	r2, [r3, #20]
    nmea->GGA.UTC_Time.sec = nmea->GGA.UTC_Time.Time - (((int)(nmea->GGA.UTC_Time.Time/100))*100);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b8e      	ldr	r3, [pc, #568]	@ (80017e4 <GGA_Structure_Update+0x314>)
 80015aa:	f7ff f95f 	bl	800086c <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fadf 	bl	8000b78 <__aeabi_d2iz>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2264      	movs	r2, #100	@ 0x64
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffbe 	bl	8000544 <__aeabi_i2d>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7fe fe6a 	bl	80002a8 <__aeabi_dsub>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff fb14 	bl	8000c08 <__aeabi_d2f>
 80015e0:	4602      	mov	r2, r0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	619a      	str	r2, [r3, #24]

    /* Extract Latitude */
    token = strtok(0, ",");
 80015e6:	497e      	ldr	r1, [pc, #504]	@ (80017e0 <GGA_Structure_Update+0x310>)
 80015e8:	2000      	movs	r0, #0
 80015ea:	f006 fb51 	bl	8007c90 <strtok>
 80015ee:	61b8      	str	r0, [r7, #24]
    nmea->GGA.Location.latitude.Position = atof(token);
 80015f0:	69b8      	ldr	r0, [r7, #24]
 80015f2:	f004 fe3b 	bl	800626c <atof>
 80015f6:	ec53 2b10 	vmov	r2, r3, d0
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	f7ff fb03 	bl	8000c08 <__aeabi_d2f>
 8001602:	4602      	mov	r2, r0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	621a      	str	r2, [r3, #32]
    nmea->GGA.Location.latitude.Degree = nmea->GGA.Location.latitude.Position / 100;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	ed93 7a08 	vldr	s14, [r3, #32]
 800160e:	eddf 6a76 	vldr	s13, [pc, #472]	@ 80017e8 <GGA_Structure_Update+0x318>
 8001612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800161a:	ee17 2a90 	vmov	r2, s15
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24
    nmea->GGA.Location.latitude.Minutes = nmea->GGA.Location.latitude.Position - (nmea->GGA.Location.latitude.Degree * 100);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	ed93 7a08 	vldr	s14, [r3, #32]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162c:	2264      	movs	r2, #100	@ 0x64
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    /* Extract N/S Indicator */
    token = strtok(0, ",");
 8001644:	4966      	ldr	r1, [pc, #408]	@ (80017e0 <GGA_Structure_Update+0x310>)
 8001646:	2000      	movs	r0, #0
 8001648:	f006 fb22 	bl	8007c90 <strtok>
 800164c:	61b8      	str	r0, [r7, #24]
    nmea->GGA.Location.NS = *token;
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	781a      	ldrb	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Extract Longitude */
    token = strtok(0, ",");
 8001658:	4961      	ldr	r1, [pc, #388]	@ (80017e0 <GGA_Structure_Update+0x310>)
 800165a:	2000      	movs	r0, #0
 800165c:	f006 fb18 	bl	8007c90 <strtok>
 8001660:	61b8      	str	r0, [r7, #24]
    nmea->GGA.Location.longitude.Position = atof(token);
 8001662:	69b8      	ldr	r0, [r7, #24]
 8001664:	f004 fe02 	bl	800626c <atof>
 8001668:	ec53 2b10 	vmov	r2, r3, d0
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff faca 	bl	8000c08 <__aeabi_d2f>
 8001674:	4602      	mov	r2, r0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	631a      	str	r2, [r3, #48]	@ 0x30
    nmea->GGA.Location.longitude.Degree = nmea->GGA.Location.longitude.Position / 100;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001680:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80017e8 <GGA_Structure_Update+0x318>
 8001684:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800168c:	ee17 2a90 	vmov	r2, s15
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	635a      	str	r2, [r3, #52]	@ 0x34
    nmea->GGA.Location.longitude.Minutes = nmea->GGA.Location.longitude.Position - (nmea->GGA.Location.longitude.Degree * 100);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800169e:	2264      	movs	r2, #100	@ 0x64
 80016a0:	fb02 f303 	mul.w	r3, r2, r3
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    /* Extract E/W Indicator */
    token = strtok(0, ",");
 80016b6:	494a      	ldr	r1, [pc, #296]	@ (80017e0 <GGA_Structure_Update+0x310>)
 80016b8:	2000      	movs	r0, #0
 80016ba:	f006 fae9 	bl	8007c90 <strtok>
 80016be:	61b8      	str	r0, [r7, #24]
    nmea->GGA.Location.EW = *token;
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Extract Position_Fix_Indicator */
    token = strtok(0, ",");
 80016ca:	4945      	ldr	r1, [pc, #276]	@ (80017e0 <GGA_Structure_Update+0x310>)
 80016cc:	2000      	movs	r0, #0
 80016ce:	f006 fadf 	bl	8007c90 <strtok>
 80016d2:	61b8      	str	r0, [r7, #24]
    nmea->GGA.Position_Fix = atoi(token);
 80016d4:	69b8      	ldr	r0, [r7, #24]
 80016d6:	f004 fdcc 	bl	8006272 <atoi>
 80016da:	4602      	mov	r2, r0
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Extract Satellites_Used */
    token = strtok(0, ",");
 80016e0:	493f      	ldr	r1, [pc, #252]	@ (80017e0 <GGA_Structure_Update+0x310>)
 80016e2:	2000      	movs	r0, #0
 80016e4:	f006 fad4 	bl	8007c90 <strtok>
 80016e8:	61b8      	str	r0, [r7, #24]
    nmea->GGA.Satellites_Used = atoi(token);
 80016ea:	69b8      	ldr	r0, [r7, #24]
 80016ec:	f004 fdc1 	bl	8006272 <atoi>
 80016f0:	4602      	mov	r2, r0
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Extract HDOP */
    token = strtok(0, ",");
 80016f6:	493a      	ldr	r1, [pc, #232]	@ (80017e0 <GGA_Structure_Update+0x310>)
 80016f8:	2000      	movs	r0, #0
 80016fa:	f006 fac9 	bl	8007c90 <strtok>
 80016fe:	61b8      	str	r0, [r7, #24]
    nmea->GGA.HDOP = atof(token);
 8001700:	69b8      	ldr	r0, [r7, #24]
 8001702:	f004 fdb3 	bl	800626c <atof>
 8001706:	ec53 2b10 	vmov	r2, r3, d0
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff fa7b 	bl	8000c08 <__aeabi_d2f>
 8001712:	4602      	mov	r2, r0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Extract MSL_Altitude */
    token = strtok(0, ",");
 8001718:	4931      	ldr	r1, [pc, #196]	@ (80017e0 <GGA_Structure_Update+0x310>)
 800171a:	2000      	movs	r0, #0
 800171c:	f006 fab8 	bl	8007c90 <strtok>
 8001720:	61b8      	str	r0, [r7, #24]
    nmea->GGA.MSL_Altitude = atof(token);
 8001722:	69b8      	ldr	r0, [r7, #24]
 8001724:	f004 fda2 	bl	800626c <atof>
 8001728:	ec53 2b10 	vmov	r2, r3, d0
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff fa6a 	bl	8000c08 <__aeabi_d2f>
 8001734:	4602      	mov	r2, r0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Extract MSL_Altitude_Units */
    token = strtok(0, ",");
 800173a:	4929      	ldr	r1, [pc, #164]	@ (80017e0 <GGA_Structure_Update+0x310>)
 800173c:	2000      	movs	r0, #0
 800173e:	f006 faa7 	bl	8007c90 <strtok>
 8001742:	61b8      	str	r0, [r7, #24]
    nmea->GGA.MSL_Altitude_Units = *token;
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Extract Geoid_Separation */
    token = strtok(0, ",");
 800174e:	4924      	ldr	r1, [pc, #144]	@ (80017e0 <GGA_Structure_Update+0x310>)
 8001750:	2000      	movs	r0, #0
 8001752:	f006 fa9d 	bl	8007c90 <strtok>
 8001756:	61b8      	str	r0, [r7, #24]
    nmea->GGA.Geoid_Separation = atof(token);
 8001758:	69b8      	ldr	r0, [r7, #24]
 800175a:	f004 fd87 	bl	800626c <atof>
 800175e:	ec53 2b10 	vmov	r2, r3, d0
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff fa4f 	bl	8000c08 <__aeabi_d2f>
 800176a:	4602      	mov	r2, r0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Extract Geoid_Separation_Units */
    token = strtok(0, ",");
 8001770:	491b      	ldr	r1, [pc, #108]	@ (80017e0 <GGA_Structure_Update+0x310>)
 8001772:	2000      	movs	r0, #0
 8001774:	f006 fa8c 	bl	8007c90 <strtok>
 8001778:	61b8      	str	r0, [r7, #24]
    nmea->GGA.Geoid_Separation_Units = *token;
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	781a      	ldrb	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Extract Age_of_Diff_Corr */
    token = strtok(0, ",");
 8001784:	4916      	ldr	r1, [pc, #88]	@ (80017e0 <GGA_Structure_Update+0x310>)
 8001786:	2000      	movs	r0, #0
 8001788:	f006 fa82 	bl	8007c90 <strtok>
 800178c:	61b8      	str	r0, [r7, #24]
    nmea->GGA.Age_of_Diff_Corr = atof(token);
 800178e:	69b8      	ldr	r0, [r7, #24]
 8001790:	f004 fd6c 	bl	800626c <atof>
 8001794:	ec53 2b10 	vmov	r2, r3, d0
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff fa34 	bl	8000c08 <__aeabi_d2f>
 80017a0:	4602      	mov	r2, r0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Extract Diff_Ref_Station_ID*/
    token = strtok(0, ",");
 80017a6:	490e      	ldr	r1, [pc, #56]	@ (80017e0 <GGA_Structure_Update+0x310>)
 80017a8:	2000      	movs	r0, #0
 80017aa:	f006 fa71 	bl	8007c90 <strtok>
 80017ae:	61b8      	str	r0, [r7, #24]
    nmea->GGA.Diff_Ref_Station_ID = atoi(token);
 80017b0:	69b8      	ldr	r0, [r7, #24]
 80017b2:	f004 fd5e 	bl	8006272 <atoi>
 80017b6:	4602      	mov	r2, r0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Extract Checksum */
    ret = strchr(token, '*');
 80017bc:	212a      	movs	r1, #42	@ 0x2a
 80017be:	69b8      	ldr	r0, [r7, #24]
 80017c0:	f006 fa46 	bl	8007c50 <strchr>
 80017c4:	61f8      	str	r0, [r7, #28]
    strcpy(nmea->GGA.Str_Checksum, ret);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3364      	adds	r3, #100	@ 0x64
 80017ca:	69f9      	ldr	r1, [r7, #28]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f006 fb32 	bl	8007e36 <strcpy>
 80017d2:	e00b      	b.n	80017ec <GGA_Structure_Update+0x31c>
 80017d4:	f3af 8000 	nop.w
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40c38800 	.word	0x40c38800
 80017e0:	0800a368 	.word	0x0800a368
 80017e4:	40590000 	.word	0x40590000
 80017e8:	42c80000 	.word	0x42c80000
    // printf("%c\n", nmea->GGA.Geoid_Separation_Units);
    // printf("%f\n", nmea->GGA.Age_of_Diff_Corr);
    // printf("%d\n", nmea->GGA.Diff_Ref_Station_ID);
    // printf("%s\n", nmea->GGA.Str_Checksum);

    char *pGGA_Message_ID = &GGA_Message_ID[0];
 80017ec:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <GGA_Structure_Update+0x360>)
 80017ee:	617b      	str	r3, [r7, #20]
    char *pGGA_Checksum = &GGA_Checksum[0];
 80017f0:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <GGA_Structure_Update+0x364>)
 80017f2:	613b      	str	r3, [r7, #16]

    char *pGGA_Struct_Message_ID = &nmea->GGA.Message_ID[0];
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	60fb      	str	r3, [r7, #12]
    char *pGGA_Struct_Checksum = &nmea->GGA.Str_Checksum[0];
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3364      	adds	r3, #100	@ 0x64
 80017fc:	60bb      	str	r3, [r7, #8]

    if(strcmp(pGGA_Message_ID, pGGA_Struct_Message_ID) == 0){
 80017fe:	68f9      	ldr	r1, [r7, #12]
 8001800:	6978      	ldr	r0, [r7, #20]
 8001802:	f7fe fce5 	bl	80001d0 <strcmp>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <GGA_Structure_Update+0x342>
        printf("GGA Message ID validated\n");
 800180c:	480a      	ldr	r0, [pc, #40]	@ (8001838 <GGA_Structure_Update+0x368>)
 800180e:	f006 f937 	bl	8007a80 <puts>
    }

    if(strcmp(pGGA_Checksum, pGGA_Struct_Checksum) == 0){
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	6938      	ldr	r0, [r7, #16]
 8001816:	f7fe fcdb 	bl	80001d0 <strcmp>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <GGA_Structure_Update+0x356>
        printf("GGA Checksum validated\n");
 8001820:	4806      	ldr	r0, [pc, #24]	@ (800183c <GGA_Structure_Update+0x36c>)
 8001822:	f006 f92d 	bl	8007a80 <puts>
    }
}
 8001826:	bf00      	nop
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bdb0      	pop	{r4, r5, r7, pc}
 800182e:	bf00      	nop
 8001830:	0800a50c 	.word	0x0800a50c
 8001834:	0800a514 	.word	0x0800a514
 8001838:	0800a36c 	.word	0x0800a36c
 800183c:	0800a388 	.word	0x0800a388

08001840 <GLL_Structure_Update>:


void GLL_Structure_Update(NMEA_Data_Struct_t *nmea, char *buffer){
 8001840:	b5b0      	push	{r4, r5, r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]

    char *ret;
    char *token;

    /* Remove enytihings before message ID */
    ret = strchr(buffer, '$');
 800184a:	2124      	movs	r1, #36	@ 0x24
 800184c:	6838      	ldr	r0, [r7, #0]
 800184e:	f006 f9ff 	bl	8007c50 <strchr>
 8001852:	61f8      	str	r0, [r7, #28]
    // printf("%s\n", ret);

    /* Extract Message_ID */
    token = strtok(ret, ",");
 8001854:	49a0      	ldr	r1, [pc, #640]	@ (8001ad8 <GLL_Structure_Update+0x298>)
 8001856:	69f8      	ldr	r0, [r7, #28]
 8001858:	f006 fa1a 	bl	8007c90 <strtok>
 800185c:	61b8      	str	r0, [r7, #24]
    strcpy(nmea->GLL.Message_ID, token);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3368      	adds	r3, #104	@ 0x68
 8001862:	69b9      	ldr	r1, [r7, #24]
 8001864:	4618      	mov	r0, r3
 8001866:	f006 fae6 	bl	8007e36 <strcpy>

    /* Extract Latitude */
    token = strtok(0, ",");
 800186a:	499b      	ldr	r1, [pc, #620]	@ (8001ad8 <GLL_Structure_Update+0x298>)
 800186c:	2000      	movs	r0, #0
 800186e:	f006 fa0f 	bl	8007c90 <strtok>
 8001872:	61b8      	str	r0, [r7, #24]
    nmea->GLL.Location.latitude.Position = atof(token);
 8001874:	69b8      	ldr	r0, [r7, #24]
 8001876:	f004 fcf9 	bl	800626c <atof>
 800187a:	ec53 2b10 	vmov	r2, r3, d0
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff f9c1 	bl	8000c08 <__aeabi_d2f>
 8001886:	4602      	mov	r2, r0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    nmea->GLL.Location.latitude.Degree = nmea->GLL.Location.latitude.Position / 100;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	ed93 7a22 	vldr	s14, [r3, #136]	@ 0x88
 8001894:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8001adc <GLL_Structure_Update+0x29c>
 8001898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a0:	ee17 2a90 	vmov	r2, s15
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    nmea->GLL.Location.latitude.Minutes = nmea->GLL.Location.latitude.Position - (nmea->GLL.Location.latitude.Degree * 100);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	ed93 7a22 	vldr	s14, [r3, #136]	@ 0x88
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018b6:	2264      	movs	r2, #100	@ 0x64
 80018b8:	fb02 f303 	mul.w	r3, r2, r3
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90

    /* Extract N/S Indicator */
    token = strtok(0, ",");
 80018ce:	4982      	ldr	r1, [pc, #520]	@ (8001ad8 <GLL_Structure_Update+0x298>)
 80018d0:	2000      	movs	r0, #0
 80018d2:	f006 f9dd 	bl	8007c90 <strtok>
 80018d6:	61b8      	str	r0, [r7, #24]
    nmea->GLL.Location.NS = *token;
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94

    /* Extract Longitude */
    token = strtok(0, ",");
 80018e2:	497d      	ldr	r1, [pc, #500]	@ (8001ad8 <GLL_Structure_Update+0x298>)
 80018e4:	2000      	movs	r0, #0
 80018e6:	f006 f9d3 	bl	8007c90 <strtok>
 80018ea:	61b8      	str	r0, [r7, #24]
    nmea->GLL.Location.longitude.Position = atof(token);
 80018ec:	69b8      	ldr	r0, [r7, #24]
 80018ee:	f004 fcbd 	bl	800626c <atof>
 80018f2:	ec53 2b10 	vmov	r2, r3, d0
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f985 	bl	8000c08 <__aeabi_d2f>
 80018fe:	4602      	mov	r2, r0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    nmea->GLL.Location.longitude.Degree = nmea->GLL.Location.longitude.Position / 100;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	ed93 7a26 	vldr	s14, [r3, #152]	@ 0x98
 800190c:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8001adc <GLL_Structure_Update+0x29c>
 8001910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001918:	ee17 2a90 	vmov	r2, s15
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    nmea->GLL.Location.longitude.Minutes = nmea->GLL.Location.longitude.Position - (nmea->GLL.Location.longitude.Degree * 100);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	ed93 7a26 	vldr	s14, [r3, #152]	@ 0x98
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800192e:	2264      	movs	r2, #100	@ 0x64
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0

    /* Extract E/W Indicator */
    token = strtok(0, ",");
 8001946:	4964      	ldr	r1, [pc, #400]	@ (8001ad8 <GLL_Structure_Update+0x298>)
 8001948:	2000      	movs	r0, #0
 800194a:	f006 f9a1 	bl	8007c90 <strtok>
 800194e:	61b8      	str	r0, [r7, #24]
    nmea->GLL.Location.EW = *token;
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

    /* Extract UTC Time */
    token = strtok(0, ",");
 800195a:	495f      	ldr	r1, [pc, #380]	@ (8001ad8 <GLL_Structure_Update+0x298>)
 800195c:	2000      	movs	r0, #0
 800195e:	f006 f997 	bl	8007c90 <strtok>
 8001962:	61b8      	str	r0, [r7, #24]
    nmea->GLL.UTC_Time.Time = atof(token);
 8001964:	69b8      	ldr	r0, [r7, #24]
 8001966:	f004 fc81 	bl	800626c <atof>
 800196a:	eeb0 7a40 	vmov.f32	s14, s0
 800196e:	eef0 7a60 	vmov.f32	s15, s1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
    nmea->GLL.UTC_Time.hour = nmea->GLL.UTC_Time.Time / 10000;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800197e:	a354      	add	r3, pc, #336	@ (adr r3, 8001ad0 <GLL_Structure_Update+0x290>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe ff72 	bl	800086c <__aeabi_ddiv>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f7ff f8f2 	bl	8000b78 <__aeabi_d2iz>
 8001994:	4602      	mov	r2, r0
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	679a      	str	r2, [r3, #120]	@ 0x78
    nmea->GLL.UTC_Time.min = (nmea->GLL.UTC_Time.Time/100) - (((int)(nmea->GLL.UTC_Time.Time/10000))*100);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae0 <GLL_Structure_Update+0x2a0>)
 80019a6:	f7fe ff61 	bl	800086c <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4614      	mov	r4, r2
 80019b0:	461d      	mov	r5, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 80019b8:	a345      	add	r3, pc, #276	@ (adr r3, 8001ad0 <GLL_Structure_Update+0x290>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe ff55 	bl	800086c <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f7ff f8d5 	bl	8000b78 <__aeabi_d2iz>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2264      	movs	r2, #100	@ 0x64
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fdb4 	bl	8000544 <__aeabi_i2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fc60 	bl	80002a8 <__aeabi_dsub>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f7ff f8c2 	bl	8000b78 <__aeabi_d2iz>
 80019f4:	4602      	mov	r2, r0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	67da      	str	r2, [r3, #124]	@ 0x7c
    nmea->GLL.UTC_Time.sec = nmea->GLL.UTC_Time.Time - (((int)(nmea->GLL.UTC_Time.Time/100))*100);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	@ 0x70
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b35      	ldr	r3, [pc, #212]	@ (8001ae0 <GLL_Structure_Update+0x2a0>)
 8001a0c:	f7fe ff2e 	bl	800086c <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f8ae 	bl	8000b78 <__aeabi_d2iz>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2264      	movs	r2, #100	@ 0x64
 8001a20:	fb02 f303 	mul.w	r3, r2, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fd8d 	bl	8000544 <__aeabi_i2d>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4620      	mov	r0, r4
 8001a30:	4629      	mov	r1, r5
 8001a32:	f7fe fc39 	bl	80002a8 <__aeabi_dsub>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff f8e3 	bl	8000c08 <__aeabi_d2f>
 8001a42:	4602      	mov	r2, r0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* Extract Status */
    token = strtok(0, ",");
 8001a4a:	4923      	ldr	r1, [pc, #140]	@ (8001ad8 <GLL_Structure_Update+0x298>)
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f006 f91f 	bl	8007c90 <strtok>
 8001a52:	61b8      	str	r0, [r7, #24]
    nmea->GLL.Status = *token;
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

    /* Extract Mode */
    token = strtok(0, ",");
 8001a5e:	491e      	ldr	r1, [pc, #120]	@ (8001ad8 <GLL_Structure_Update+0x298>)
 8001a60:	2000      	movs	r0, #0
 8001a62:	f006 f915 	bl	8007c90 <strtok>
 8001a66:	61b8      	str	r0, [r7, #24]
    nmea->GLL.Mode = *token;
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9

    /* Extract Checksum */
    ret = strchr(token, '*');
 8001a72:	212a      	movs	r1, #42	@ 0x2a
 8001a74:	69b8      	ldr	r0, [r7, #24]
 8001a76:	f006 f8eb 	bl	8007c50 <strchr>
 8001a7a:	61f8      	str	r0, [r7, #28]
    strcpy(nmea->GLL.Str_Checksum, ret);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	33aa      	adds	r3, #170	@ 0xaa
 8001a80:	69f9      	ldr	r1, [r7, #28]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f006 f9d7 	bl	8007e36 <strcpy>
    // printf("%f\n", nmea->GLL.UTC_Time.sec);
    // printf("%c\n", nmea->GLL.Status);
    // printf("%c\n", nmea->GLL.Mode);
    // printf("%s\n", nmea->GLL.Str_Checksum);

    char *pGLL_Message_ID = &GLL_Message_ID[0];
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <GLL_Structure_Update+0x2a4>)
 8001a8a:	617b      	str	r3, [r7, #20]
    char *pGLL_Checksum = &GLL_Checksum[0];
 8001a8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <GLL_Structure_Update+0x2a8>)
 8001a8e:	613b      	str	r3, [r7, #16]

    char *pGLL_Struct_Message_ID = &nmea->GLL.Message_ID[0];
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3368      	adds	r3, #104	@ 0x68
 8001a94:	60fb      	str	r3, [r7, #12]
    char *pGLL_Struct_Checksum = &nmea->GLL.Str_Checksum[0];
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	33aa      	adds	r3, #170	@ 0xaa
 8001a9a:	60bb      	str	r3, [r7, #8]

    if(strcmp(pGLL_Message_ID, pGLL_Struct_Message_ID) == 0){
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7fe fb96 	bl	80001d0 <strcmp>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <GLL_Structure_Update+0x270>
        printf("GLL Message ID validated\n");
 8001aaa:	4810      	ldr	r0, [pc, #64]	@ (8001aec <GLL_Structure_Update+0x2ac>)
 8001aac:	f005 ffe8 	bl	8007a80 <puts>
    }

    if(strcmp(pGLL_Checksum, pGLL_Struct_Checksum) == 0){
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6938      	ldr	r0, [r7, #16]
 8001ab4:	f7fe fb8c 	bl	80001d0 <strcmp>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <GLL_Structure_Update+0x284>
        printf("GLL Checksum validated\n");
 8001abe:	480c      	ldr	r0, [pc, #48]	@ (8001af0 <GLL_Structure_Update+0x2b0>)
 8001ac0:	f005 ffde 	bl	8007a80 <puts>
    }
}
 8001ac4:	bf00      	nop
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bdb0      	pop	{r4, r5, r7, pc}
 8001acc:	f3af 8000 	nop.w
 8001ad0:	00000000 	.word	0x00000000
 8001ad4:	40c38800 	.word	0x40c38800
 8001ad8:	0800a368 	.word	0x0800a368
 8001adc:	42c80000 	.word	0x42c80000
 8001ae0:	40590000 	.word	0x40590000
 8001ae4:	0800a518 	.word	0x0800a518
 8001ae8:	0800a520 	.word	0x0800a520
 8001aec:	0800a3a0 	.word	0x0800a3a0
 8001af0:	0800a3bc 	.word	0x0800a3bc

08001af4 <GSA_Structure_Update>:


void GSA_Structure_Update(NMEA_Data_Struct_t *nmea, char *buffer){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]

    char *ret;
    char *token;

    /* Remove enytihings before message ID */
    ret = strchr(buffer, '$');
 8001afe:	2124      	movs	r1, #36	@ 0x24
 8001b00:	6838      	ldr	r0, [r7, #0]
 8001b02:	f006 f8a5 	bl	8007c50 <strchr>
 8001b06:	61f8      	str	r0, [r7, #28]
    // printf("%s\n", ret);

    /* Extract Message_ID */
    token = strtok(ret, ",");
 8001b08:	4989      	ldr	r1, [pc, #548]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001b0a:	69f8      	ldr	r0, [r7, #28]
 8001b0c:	f006 f8c0 	bl	8007c90 <strtok>
 8001b10:	61b8      	str	r0, [r7, #24]
    strcpy(nmea->GSA.Message_ID, token);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	33b0      	adds	r3, #176	@ 0xb0
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f006 f98c 	bl	8007e36 <strcpy>

    /* Extract Mode 1 */
    token = strtok(0, ",");
 8001b1e:	4984      	ldr	r1, [pc, #528]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001b20:	2000      	movs	r0, #0
 8001b22:	f006 f8b5 	bl	8007c90 <strtok>
 8001b26:	61b8      	str	r0, [r7, #24]
    nmea->GSA.Mode1 = *token;
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	781a      	ldrb	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6

    /* Extract Mode 2 */
    token = strtok(0, ",");
 8001b32:	497f      	ldr	r1, [pc, #508]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001b34:	2000      	movs	r0, #0
 8001b36:	f006 f8ab 	bl	8007c90 <strtok>
 8001b3a:	61b8      	str	r0, [r7, #24]
    nmea->GSA.Mode2 = atoi(token);
 8001b3c:	69b8      	ldr	r0, [r7, #24]
 8001b3e:	f004 fb98 	bl	8006272 <atoi>
 8001b42:	4602      	mov	r2, r0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

    /* Extract Satellite Used 01 | SV on Channel 1 */
    token = strtok(0, ",");
 8001b4a:	4979      	ldr	r1, [pc, #484]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f006 f89f 	bl	8007c90 <strtok>
 8001b52:	61b8      	str	r0, [r7, #24]
    nmea->GSA.Satellite_Used_01 = atoi(token);
 8001b54:	69b8      	ldr	r0, [r7, #24]
 8001b56:	f004 fb8c 	bl	8006272 <atoi>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

    /* Extract Satellite Used 02 | SV on Channel 2 */
    token = strtok(0, ",");
 8001b62:	4973      	ldr	r1, [pc, #460]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001b64:	2000      	movs	r0, #0
 8001b66:	f006 f893 	bl	8007c90 <strtok>
 8001b6a:	61b8      	str	r0, [r7, #24]
    nmea->GSA.Satellite_Used_02 = atoi(token);
 8001b6c:	69b8      	ldr	r0, [r7, #24]
 8001b6e:	f004 fb80 	bl	8006272 <atoi>
 8001b72:	4602      	mov	r2, r0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

    /* Extract Satellite Used 03 | SV on Channel 3 */
    token = strtok(0, ",");
 8001b7a:	496d      	ldr	r1, [pc, #436]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f006 f887 	bl	8007c90 <strtok>
 8001b82:	61b8      	str	r0, [r7, #24]
    nmea->GSA.Satellite_Used_03 = atoi(token);
 8001b84:	69b8      	ldr	r0, [r7, #24]
 8001b86:	f004 fb74 	bl	8006272 <atoi>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    /* Extract Satellite Used 04 | SV on Channel 4 */
    token = strtok(0, ",");
 8001b92:	4967      	ldr	r1, [pc, #412]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001b94:	2000      	movs	r0, #0
 8001b96:	f006 f87b 	bl	8007c90 <strtok>
 8001b9a:	61b8      	str	r0, [r7, #24]
    nmea->GSA.Satellite_Used_04 = atoi(token);
 8001b9c:	69b8      	ldr	r0, [r7, #24]
 8001b9e:	f004 fb68 	bl	8006272 <atoi>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    /* Extract Satellite Used 05 | SV on Channel 5 */
    token = strtok(0, ",");
 8001baa:	4961      	ldr	r1, [pc, #388]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001bac:	2000      	movs	r0, #0
 8001bae:	f006 f86f 	bl	8007c90 <strtok>
 8001bb2:	61b8      	str	r0, [r7, #24]
    nmea->GSA.Satellite_Used_05 = atoi(token);
 8001bb4:	69b8      	ldr	r0, [r7, #24]
 8001bb6:	f004 fb5c 	bl	8006272 <atoi>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

    /* Extract Satellite Used 06 | SV on Channel 6 */
    token = strtok(0, ",");
 8001bc2:	495b      	ldr	r1, [pc, #364]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f006 f863 	bl	8007c90 <strtok>
 8001bca:	61b8      	str	r0, [r7, #24]
    nmea->GSA.Satellite_Used_06 = atoi(token);
 8001bcc:	69b8      	ldr	r0, [r7, #24]
 8001bce:	f004 fb50 	bl	8006272 <atoi>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

    /* Extract Satellite Used 07 | SV on Channel 7 */
    token = strtok(0, ",");
 8001bda:	4955      	ldr	r1, [pc, #340]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f006 f857 	bl	8007c90 <strtok>
 8001be2:	61b8      	str	r0, [r7, #24]
    nmea->GSA.Satellite_Used_07 = atoi(token);
 8001be4:	69b8      	ldr	r0, [r7, #24]
 8001be6:	f004 fb44 	bl	8006272 <atoi>
 8001bea:	4602      	mov	r2, r0
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

    /* Extract Satellite Used 08 | SV on Channel 8 */
    token = strtok(0, ",");
 8001bf2:	494f      	ldr	r1, [pc, #316]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f006 f84b 	bl	8007c90 <strtok>
 8001bfa:	61b8      	str	r0, [r7, #24]
    nmea->GSA.Satellite_Used_08 = atoi(token);
 8001bfc:	69b8      	ldr	r0, [r7, #24]
 8001bfe:	f004 fb38 	bl	8006272 <atoi>
 8001c02:	4602      	mov	r2, r0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

    /* Extract Satellite Used 09 | SV on Channel 9 */
    token = strtok(0, ",");
 8001c0a:	4949      	ldr	r1, [pc, #292]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f006 f83f 	bl	8007c90 <strtok>
 8001c12:	61b8      	str	r0, [r7, #24]
    nmea->GSA.Satellite_Used_09 = atoi(token);
 8001c14:	69b8      	ldr	r0, [r7, #24]
 8001c16:	f004 fb2c 	bl	8006272 <atoi>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

    /* Extract Satellite Used 10 | SV on Channel 10 */
    token = strtok(0, ",");
 8001c22:	4943      	ldr	r1, [pc, #268]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001c24:	2000      	movs	r0, #0
 8001c26:	f006 f833 	bl	8007c90 <strtok>
 8001c2a:	61b8      	str	r0, [r7, #24]
    nmea->GSA.Satellite_Used_10 = atoi(token);
 8001c2c:	69b8      	ldr	r0, [r7, #24]
 8001c2e:	f004 fb20 	bl	8006272 <atoi>
 8001c32:	4602      	mov	r2, r0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

    /* Extract Satellite Used 11 | SV on Channel 11 */
    token = strtok(0, ",");
 8001c3a:	493d      	ldr	r1, [pc, #244]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f006 f827 	bl	8007c90 <strtok>
 8001c42:	61b8      	str	r0, [r7, #24]
    nmea->GSA.Satellite_Used_11 = atoi(token);
 8001c44:	69b8      	ldr	r0, [r7, #24]
 8001c46:	f004 fb14 	bl	8006272 <atoi>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    /* Extract Satellite Used 12 | SV on Channel 12*/
    token = strtok(0, ",");
 8001c52:	4937      	ldr	r1, [pc, #220]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001c54:	2000      	movs	r0, #0
 8001c56:	f006 f81b 	bl	8007c90 <strtok>
 8001c5a:	61b8      	str	r0, [r7, #24]
    nmea->GSA.Satellite_Used_12 = atoi(token);
 8001c5c:	69b8      	ldr	r0, [r7, #24]
 8001c5e:	f004 fb08 	bl	8006272 <atoi>
 8001c62:	4602      	mov	r2, r0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    /* Extract PDOP (Position Dilution of Precision) */
    token = strtok(0, ",");
 8001c6a:	4931      	ldr	r1, [pc, #196]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f006 f80f 	bl	8007c90 <strtok>
 8001c72:	61b8      	str	r0, [r7, #24]
    nmea->GSA.PDOP = atof(token);
 8001c74:	69b8      	ldr	r0, [r7, #24]
 8001c76:	f004 faf9 	bl	800626c <atof>
 8001c7a:	ec53 2b10 	vmov	r2, r3, d0
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f7fe ffc1 	bl	8000c08 <__aeabi_d2f>
 8001c86:	4602      	mov	r2, r0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec

    /* Extract HDOP (Horizontal Dilution of Precision) */
    token = strtok(0, ",");
 8001c8e:	4928      	ldr	r1, [pc, #160]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001c90:	2000      	movs	r0, #0
 8001c92:	f005 fffd 	bl	8007c90 <strtok>
 8001c96:	61b8      	str	r0, [r7, #24]
    nmea->GSA.HDOP = atof(token);
 8001c98:	69b8      	ldr	r0, [r7, #24]
 8001c9a:	f004 fae7 	bl	800626c <atof>
 8001c9e:	ec53 2b10 	vmov	r2, r3, d0
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f7fe ffaf 	bl	8000c08 <__aeabi_d2f>
 8001caa:	4602      	mov	r2, r0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    
    /* Extract VDOP (Vertical Dilution of Precision) */
    token = strtok(0, ",");
 8001cb2:	491f      	ldr	r1, [pc, #124]	@ (8001d30 <GSA_Structure_Update+0x23c>)
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f005 ffeb 	bl	8007c90 <strtok>
 8001cba:	61b8      	str	r0, [r7, #24]
    nmea->GSA.VDOP = atof(token);
 8001cbc:	69b8      	ldr	r0, [r7, #24]
 8001cbe:	f004 fad5 	bl	800626c <atof>
 8001cc2:	ec53 2b10 	vmov	r2, r3, d0
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe ff9d 	bl	8000c08 <__aeabi_d2f>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    // token = strtok(0, ",");
    // strcpy(temp, token);
    // nmea->GLL.Mode = *token;

    /* Extract Checksum */
    ret = strchr(token, '*');
 8001cd6:	212a      	movs	r1, #42	@ 0x2a
 8001cd8:	69b8      	ldr	r0, [r7, #24]
 8001cda:	f005 ffb9 	bl	8007c50 <strchr>
 8001cde:	61f8      	str	r0, [r7, #28]
    strcpy(nmea->GSA.Str_Checksum, ret);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	33f8      	adds	r3, #248	@ 0xf8
 8001ce4:	69f9      	ldr	r1, [r7, #28]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f006 f8a5 	bl	8007e36 <strcpy>
    // printf("%.1f\n", nmea->GSA.PDOP);
    // printf("%.1f\n", nmea->GSA.HDOP);
    // printf("%.1f\n", nmea->GSA.VDOP);
    // printf("%s\n", nmea->GSA.Str_Checksum);

    char *pGSA_Message_ID = &GSA_Message_ID[0];
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <GSA_Structure_Update+0x240>)
 8001cee:	617b      	str	r3, [r7, #20]
    char *pGSA_Checksum = &GSA_Checksum[0];
 8001cf0:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <GSA_Structure_Update+0x244>)
 8001cf2:	613b      	str	r3, [r7, #16]

    char *pGSA_Struct_Message_ID = &nmea->GSA.Message_ID[0];
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	33b0      	adds	r3, #176	@ 0xb0
 8001cf8:	60fb      	str	r3, [r7, #12]
    char *pGSA_Struct_Checksum = &nmea->GSA.Str_Checksum[0];
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	33f8      	adds	r3, #248	@ 0xf8
 8001cfe:	60bb      	str	r3, [r7, #8]

    if(strcmp(pGSA_Message_ID, pGSA_Struct_Message_ID) == 0){
 8001d00:	68f9      	ldr	r1, [r7, #12]
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7fe fa64 	bl	80001d0 <strcmp>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <GSA_Structure_Update+0x220>
        printf("GSA Message ID validated\n");
 8001d0e:	480b      	ldr	r0, [pc, #44]	@ (8001d3c <GSA_Structure_Update+0x248>)
 8001d10:	f005 feb6 	bl	8007a80 <puts>
    }

    if(strcmp(pGSA_Checksum, pGSA_Struct_Checksum) == 0){
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	6938      	ldr	r0, [r7, #16]
 8001d18:	f7fe fa5a 	bl	80001d0 <strcmp>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d102      	bne.n	8001d28 <GSA_Structure_Update+0x234>
        printf("GSA Checksum validated\n");
 8001d22:	4807      	ldr	r0, [pc, #28]	@ (8001d40 <GSA_Structure_Update+0x24c>)
 8001d24:	f005 feac 	bl	8007a80 <puts>
    }
}
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	0800a368 	.word	0x0800a368
 8001d34:	0800a524 	.word	0x0800a524
 8001d38:	0800a52c 	.word	0x0800a52c
 8001d3c:	0800a3d4 	.word	0x0800a3d4
 8001d40:	0800a3f0 	.word	0x0800a3f0

08001d44 <GSV_Structure_Update>:


void GSV_Structure_Update(NMEA_Data_Struct_t *nmea, char *buffer){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]

    char *ret;
    char *token;

    /* Remove enytihings before message ID */
    ret = strchr(buffer, '$');
 8001d4e:	2124      	movs	r1, #36	@ 0x24
 8001d50:	6838      	ldr	r0, [r7, #0]
 8001d52:	f005 ff7d 	bl	8007c50 <strchr>
 8001d56:	61f8      	str	r0, [r7, #28]
    // printf("%s\n", ret);

    /* Extract Message_ID */
    token = strtok(ret, ",");
 8001d58:	498e      	ldr	r1, [pc, #568]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001d5a:	69f8      	ldr	r0, [r7, #28]
 8001d5c:	f005 ff98 	bl	8007c90 <strtok>
 8001d60:	61b8      	str	r0, [r7, #24]
    strcpy(nmea->GSV.Message_ID, token);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	33fc      	adds	r3, #252	@ 0xfc
 8001d66:	69b9      	ldr	r1, [r7, #24]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f006 f864 	bl	8007e36 <strcpy>

    /* Extract Number of Message */
    token = strtok(0, ",");
 8001d6e:	4989      	ldr	r1, [pc, #548]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001d70:	2000      	movs	r0, #0
 8001d72:	f005 ff8d 	bl	8007c90 <strtok>
 8001d76:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Number_of_Message = atoi(token);
 8001d78:	69b8      	ldr	r0, [r7, #24]
 8001d7a:	f004 fa7a 	bl	8006272 <atoi>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Extract Message Number */
    token = strtok(0, ",");
 8001d86:	4983      	ldr	r1, [pc, #524]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f005 ff81 	bl	8007c90 <strtok>
 8001d8e:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Message_Number = atoi(token);
 8001d90:	69b8      	ldr	r0, [r7, #24]
 8001d92:	f004 fa6e 	bl	8006272 <atoi>
 8001d96:	4602      	mov	r2, r0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    /* Extract Satellites in View */
    token = strtok(0, ",");
 8001d9e:	497d      	ldr	r1, [pc, #500]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001da0:	2000      	movs	r0, #0
 8001da2:	f005 ff75 	bl	8007c90 <strtok>
 8001da6:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellites_in_View = atoi(token);
 8001da8:	69b8      	ldr	r0, [r7, #24]
 8001daa:	f004 fa62 	bl	8006272 <atoi>
 8001dae:	4602      	mov	r2, r0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

    /* Extract Satellite-1 ID | Channel 1 (Range 1 to 32) */
    token = strtok(0, ",");
 8001db6:	4977      	ldr	r1, [pc, #476]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001db8:	2000      	movs	r0, #0
 8001dba:	f005 ff69 	bl	8007c90 <strtok>
 8001dbe:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_1_ID = atoi(token);
 8001dc0:	69b8      	ldr	r0, [r7, #24]
 8001dc2:	f004 fa56 	bl	8006272 <atoi>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

    /* Extract Satellite-1 Elevation | Channel 1 (Maximum 90) degrees */
    token = strtok(0, ",");
 8001dce:	4971      	ldr	r1, [pc, #452]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f005 ff5d 	bl	8007c90 <strtok>
 8001dd6:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_1_Elevation = atoi(token);
 8001dd8:	69b8      	ldr	r0, [r7, #24]
 8001dda:	f004 fa4a 	bl	8006272 <atoi>
 8001dde:	4602      	mov	r2, r0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

    /* Extract Satellite-1 Azimuth | Channel 1 (True, Range 0 to 359) degrees */
    token = strtok(0, ",");
 8001de6:	496b      	ldr	r1, [pc, #428]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001de8:	2000      	movs	r0, #0
 8001dea:	f005 ff51 	bl	8007c90 <strtok>
 8001dee:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_1_Azimuth = atoi(token);
 8001df0:	69b8      	ldr	r0, [r7, #24]
 8001df2:	f004 fa3e 	bl	8006272 <atoi>
 8001df6:	4602      	mov	r2, r0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

    /* Extract Satellite-1 SNR | Range 0 to 99, null when not tracking dBHZ*/
    token = strtok(0, ",");
 8001dfe:	4965      	ldr	r1, [pc, #404]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001e00:	2000      	movs	r0, #0
 8001e02:	f005 ff45 	bl	8007c90 <strtok>
 8001e06:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_1_SNR = atoi(token);
 8001e08:	69b8      	ldr	r0, [r7, #24]
 8001e0a:	f004 fa32 	bl	8006272 <atoi>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

    /* Extract Satellite-2 ID | Channel 2 (Range 1 to 32) */
    token = strtok(0, ",");
 8001e16:	495f      	ldr	r1, [pc, #380]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f005 ff39 	bl	8007c90 <strtok>
 8001e1e:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_2_ID = atoi(token);
 8001e20:	69b8      	ldr	r0, [r7, #24]
 8001e22:	f004 fa26 	bl	8006272 <atoi>
 8001e26:	4602      	mov	r2, r0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

    /* Extract Satellite-2 Elevation | Channel 2 (Maximum 90) degrees */
    token = strtok(0, ",");
 8001e2e:	4959      	ldr	r1, [pc, #356]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001e30:	2000      	movs	r0, #0
 8001e32:	f005 ff2d 	bl	8007c90 <strtok>
 8001e36:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_2_Elevation = atoi(token);
 8001e38:	69b8      	ldr	r0, [r7, #24]
 8001e3a:	f004 fa1a 	bl	8006272 <atoi>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    /* Extract Satellite-2 Azimuth | Channel 2 (True, Range 0 to 359) degrees */
    token = strtok(0, ",");
 8001e46:	4953      	ldr	r1, [pc, #332]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f005 ff21 	bl	8007c90 <strtok>
 8001e4e:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_2_Azimuth = atoi(token);
 8001e50:	69b8      	ldr	r0, [r7, #24]
 8001e52:	f004 fa0e 	bl	8006272 <atoi>
 8001e56:	4602      	mov	r2, r0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    /* Extract Satellite-2 SNR | Range 0 to 99, null when not tracking dBHZ*/
    token = strtok(0, ",");
 8001e5e:	494d      	ldr	r1, [pc, #308]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001e60:	2000      	movs	r0, #0
 8001e62:	f005 ff15 	bl	8007c90 <strtok>
 8001e66:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_2_SNR = atoi(token);
 8001e68:	69b8      	ldr	r0, [r7, #24]
 8001e6a:	f004 fa02 	bl	8006272 <atoi>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

    /* Extract Satellite-3 ID | Channel 3 (Range 1 to 32) */
    token = strtok(0, ",");
 8001e76:	4947      	ldr	r1, [pc, #284]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f005 ff09 	bl	8007c90 <strtok>
 8001e7e:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_3_ID = atoi(token);
 8001e80:	69b8      	ldr	r0, [r7, #24]
 8001e82:	f004 f9f6 	bl	8006272 <atoi>
 8001e86:	4602      	mov	r2, r0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

    /* Extract Satellite-3 Elevation | Channel 3 (Maximum 90) degrees */
    token = strtok(0, ",");
 8001e8e:	4941      	ldr	r1, [pc, #260]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001e90:	2000      	movs	r0, #0
 8001e92:	f005 fefd 	bl	8007c90 <strtok>
 8001e96:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_3_Elevation = atoi(token);
 8001e98:	69b8      	ldr	r0, [r7, #24]
 8001e9a:	f004 f9ea 	bl	8006272 <atoi>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

    /* Extract Satellite-3 Azimuth | Channel 3 (True, Range 0 to 359) degrees */
    token = strtok(0, ",");
 8001ea6:	493b      	ldr	r1, [pc, #236]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f005 fef1 	bl	8007c90 <strtok>
 8001eae:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_3_Azimuth = atoi(token);
 8001eb0:	69b8      	ldr	r0, [r7, #24]
 8001eb2:	f004 f9de 	bl	8006272 <atoi>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138

    /* Extract Satellite-3 SNR | Range 0 to 99, null when not tracking dBHZ*/
    token = strtok(0, ",");
 8001ebe:	4935      	ldr	r1, [pc, #212]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f005 fee5 	bl	8007c90 <strtok>
 8001ec6:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_3_SNR = atoi(token);
 8001ec8:	69b8      	ldr	r0, [r7, #24]
 8001eca:	f004 f9d2 	bl	8006272 <atoi>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c

    /* Extract Satellite-4 ID | Channel 4 (Range 1 to 32) */
    token = strtok(0, ",");
 8001ed6:	492f      	ldr	r1, [pc, #188]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f005 fed9 	bl	8007c90 <strtok>
 8001ede:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_4_ID = atoi(token);
 8001ee0:	69b8      	ldr	r0, [r7, #24]
 8001ee2:	f004 f9c6 	bl	8006272 <atoi>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140

    /* Extract Satellite-4 Elevation | Channel 4 (Maximum 90) degrees */
    token = strtok(0, ",");
 8001eee:	4929      	ldr	r1, [pc, #164]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f005 fecd 	bl	8007c90 <strtok>
 8001ef6:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_4_Elevation = atoi(token);
 8001ef8:	69b8      	ldr	r0, [r7, #24]
 8001efa:	f004 f9ba 	bl	8006272 <atoi>
 8001efe:	4602      	mov	r2, r0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144

    /* Extract Satellite-4 Azimuth | Channel 4 (True, Range 0 to 359) degrees */
    token = strtok(0, ",");
 8001f06:	4923      	ldr	r1, [pc, #140]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f005 fec1 	bl	8007c90 <strtok>
 8001f0e:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_4_Azimuth = atoi(token);
 8001f10:	69b8      	ldr	r0, [r7, #24]
 8001f12:	f004 f9ae 	bl	8006272 <atoi>
 8001f16:	4602      	mov	r2, r0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

    /* Extract Satellite-4 SNR | Range 0 to 99, null when not tracking dBHZ*/
    token = strtok(0, ",");
 8001f1e:	491d      	ldr	r1, [pc, #116]	@ (8001f94 <GSV_Structure_Update+0x250>)
 8001f20:	2000      	movs	r0, #0
 8001f22:	f005 feb5 	bl	8007c90 <strtok>
 8001f26:	61b8      	str	r0, [r7, #24]
    nmea->GSV.Satellite_4_SNR = atoi(token);
 8001f28:	69b8      	ldr	r0, [r7, #24]
 8001f2a:	f004 f9a2 	bl	8006272 <atoi>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

    /* Extract Checksum */
    ret = strchr(token, '*');
 8001f36:	212a      	movs	r1, #42	@ 0x2a
 8001f38:	69b8      	ldr	r0, [r7, #24]
 8001f3a:	f005 fe89 	bl	8007c50 <strchr>
 8001f3e:	61f8      	str	r0, [r7, #28]
    strcpy(nmea->GSV.Str_Checksum, ret);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f46:	69f9      	ldr	r1, [r7, #28]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f005 ff74 	bl	8007e36 <strcpy>
    // printf("%d\n", nmea->GSV.Satellite_4_Elevation);
    // printf("%d\n", nmea->GSV.Satellite_4_Azimuth);
    // printf("%d\n", nmea->GSV.Satellite_4_SNR);
    // printf("%s\n", nmea->GSV.Str_Checksum);

    char *pGSV_Message_ID = &GSV_Message_ID[0];
 8001f4e:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <GSV_Structure_Update+0x254>)
 8001f50:	617b      	str	r3, [r7, #20]
    char *pGSV_Checksum = &GSV_Checksum[0];
 8001f52:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <GSV_Structure_Update+0x258>)
 8001f54:	613b      	str	r3, [r7, #16]

    char *pGSV_Struct_Message_ID = &nmea->GSV.Message_ID[0];
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	33fc      	adds	r3, #252	@ 0xfc
 8001f5a:	60fb      	str	r3, [r7, #12]
    char *pGSV_Struct_Checksum = &nmea->GSV.Str_Checksum[0];
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f62:	60bb      	str	r3, [r7, #8]

    if(strcmp(pGSV_Message_ID, pGSV_Struct_Message_ID) == 0){
 8001f64:	68f9      	ldr	r1, [r7, #12]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7fe f932 	bl	80001d0 <strcmp>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <GSV_Structure_Update+0x234>
        printf("GSV Message ID validated\n");
 8001f72:	480b      	ldr	r0, [pc, #44]	@ (8001fa0 <GSV_Structure_Update+0x25c>)
 8001f74:	f005 fd84 	bl	8007a80 <puts>
    }

    if(strcmp(pGSV_Checksum, pGSV_Struct_Checksum) == 0){
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6938      	ldr	r0, [r7, #16]
 8001f7c:	f7fe f928 	bl	80001d0 <strcmp>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d102      	bne.n	8001f8c <GSV_Structure_Update+0x248>
        printf("GSV Checksum validated\n");
 8001f86:	4807      	ldr	r0, [pc, #28]	@ (8001fa4 <GSV_Structure_Update+0x260>)
 8001f88:	f005 fd7a 	bl	8007a80 <puts>
    }
}
 8001f8c:	bf00      	nop
 8001f8e:	3720      	adds	r7, #32
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	0800a368 	.word	0x0800a368
 8001f98:	0800a530 	.word	0x0800a530
 8001f9c:	0800a538 	.word	0x0800a538
 8001fa0:	0800a408 	.word	0x0800a408
 8001fa4:	0800a424 	.word	0x0800a424

08001fa8 <MSS_Structure_Update>:


void MSS_Structure_Update(NMEA_Data_Struct_t *nmea, char *buffer){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]

    char *ret;
    char *token;

    /* Remove enytihings before message ID */
    ret = strchr(buffer, '$');
 8001fb2:	2124      	movs	r1, #36	@ 0x24
 8001fb4:	6838      	ldr	r0, [r7, #0]
 8001fb6:	f005 fe4b 	bl	8007c50 <strchr>
 8001fba:	61f8      	str	r0, [r7, #28]
    // printf("%s\n", ret);

    /* Extract Message_ID */
    token = strtok(ret, ",");
 8001fbc:	493e      	ldr	r1, [pc, #248]	@ (80020b8 <MSS_Structure_Update+0x110>)
 8001fbe:	69f8      	ldr	r0, [r7, #28]
 8001fc0:	f005 fe66 	bl	8007c90 <strtok>
 8001fc4:	61b8      	str	r0, [r7, #24]
    strcpy(nmea->MSS.Message_ID, token);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001fcc:	69b9      	ldr	r1, [r7, #24]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f005 ff31 	bl	8007e36 <strcpy>

    /* Extract SS of tracked frequency | dB */
    token = strtok(0, ",");
 8001fd4:	4938      	ldr	r1, [pc, #224]	@ (80020b8 <MSS_Structure_Update+0x110>)
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f005 fe5a 	bl	8007c90 <strtok>
 8001fdc:	61b8      	str	r0, [r7, #24]
    nmea->MSS.Signal_Strength = atoi(token);
 8001fde:	69b8      	ldr	r0, [r7, #24]
 8001fe0:	f004 f947 	bl	8006272 <atoi>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

    /* Extract SNR of tracked frequency | dB */
    token = strtok(0, ",");
 8001fec:	4932      	ldr	r1, [pc, #200]	@ (80020b8 <MSS_Structure_Update+0x110>)
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f005 fe4e 	bl	8007c90 <strtok>
 8001ff4:	61b8      	str	r0, [r7, #24]
    nmea->MSS.Signal_to_Noise_Ratio = atoi(token);
 8001ff6:	69b8      	ldr	r0, [r7, #24]
 8001ff8:	f004 f93b 	bl	8006272 <atoi>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

    /* Extract Satellites in View */
    token = strtok(0, ",");
 8002004:	492c      	ldr	r1, [pc, #176]	@ (80020b8 <MSS_Structure_Update+0x110>)
 8002006:	2000      	movs	r0, #0
 8002008:	f005 fe42 	bl	8007c90 <strtok>
 800200c:	61b8      	str	r0, [r7, #24]
    nmea->MSS.Beacon_Frequency = atof(token);
 800200e:	69b8      	ldr	r0, [r7, #24]
 8002010:	f004 f92c 	bl	800626c <atof>
 8002014:	ec53 2b10 	vmov	r2, r3, d0
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fdf4 	bl	8000c08 <__aeabi_d2f>
 8002020:	4602      	mov	r2, r0
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

    /* Extract bits per second */
    token = strtok(0, ",");
 8002028:	4923      	ldr	r1, [pc, #140]	@ (80020b8 <MSS_Structure_Update+0x110>)
 800202a:	2000      	movs	r0, #0
 800202c:	f005 fe30 	bl	8007c90 <strtok>
 8002030:	61b8      	str	r0, [r7, #24]
    nmea->MSS.Beacon_Bit_Rate = atoi(token);
 8002032:	69b8      	ldr	r0, [r7, #24]
 8002034:	f004 f91d 	bl	8006272 <atoi>
 8002038:	4602      	mov	r2, r0
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

    /* Extract The channel of the beacon being used if a multi-channel beacon receiver is used. */
    token = strtok(0, ",");
 8002040:	491d      	ldr	r1, [pc, #116]	@ (80020b8 <MSS_Structure_Update+0x110>)
 8002042:	2000      	movs	r0, #0
 8002044:	f005 fe24 	bl	8007c90 <strtok>
 8002048:	61b8      	str	r0, [r7, #24]
    nmea->MSS.Channel_Number = atoi(token);
 800204a:	69b8      	ldr	r0, [r7, #24]
 800204c:	f004 f911 	bl	8006272 <atoi>
 8002050:	4602      	mov	r2, r0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

    /* Extract Checksum */
    ret = strchr(token, '*');
 8002058:	212a      	movs	r1, #42	@ 0x2a
 800205a:	69b8      	ldr	r0, [r7, #24]
 800205c:	f005 fdf8 	bl	8007c50 <strchr>
 8002060:	61f8      	str	r0, [r7, #28]
    strcpy(nmea->MSS.Str_Checksum, ret);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8002068:	69f9      	ldr	r1, [r7, #28]
 800206a:	4618      	mov	r0, r3
 800206c:	f005 fee3 	bl	8007e36 <strcpy>
    // printf("%f\n", nmea->MSS.Beacon_Frequency);
    // printf("%d\n", nmea->MSS.Beacon_Bit_Rate);
    // printf("%d\n", nmea->MSS.Channel_Number);
    // printf("%s\n", nmea->MSS.Str_Checksum);

    char *pMSS_Message_ID = &MSS_Message_ID[0];
 8002070:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <MSS_Structure_Update+0x114>)
 8002072:	617b      	str	r3, [r7, #20]
    char *pMSS_Checksum = &MSS_Checksum[0];
 8002074:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <MSS_Structure_Update+0x118>)
 8002076:	613b      	str	r3, [r7, #16]

    char *pMSS_Struct_Message_ID = &nmea->MSS.Message_ID[0];
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800207e:	60fb      	str	r3, [r7, #12]
    char *pMSS_Struct_Checksum = &nmea->MSS.Str_Checksum[0];
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8002086:	60bb      	str	r3, [r7, #8]

    if(strcmp(pMSS_Message_ID, pMSS_Struct_Message_ID) == 0){
 8002088:	68f9      	ldr	r1, [r7, #12]
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7fe f8a0 	bl	80001d0 <strcmp>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d102      	bne.n	800209c <MSS_Structure_Update+0xf4>
        printf("MSS Message ID validated\n");
 8002096:	480b      	ldr	r0, [pc, #44]	@ (80020c4 <MSS_Structure_Update+0x11c>)
 8002098:	f005 fcf2 	bl	8007a80 <puts>
    }

    if(strcmp(pMSS_Checksum, pMSS_Struct_Checksum) == 0){
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	6938      	ldr	r0, [r7, #16]
 80020a0:	f7fe f896 	bl	80001d0 <strcmp>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <MSS_Structure_Update+0x108>
        printf("MSS Checksum validated\n");
 80020aa:	4807      	ldr	r0, [pc, #28]	@ (80020c8 <MSS_Structure_Update+0x120>)
 80020ac:	f005 fce8 	bl	8007a80 <puts>
    }
}
 80020b0:	bf00      	nop
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	0800a368 	.word	0x0800a368
 80020bc:	0800a53c 	.word	0x0800a53c
 80020c0:	0800a544 	.word	0x0800a544
 80020c4:	0800a43c 	.word	0x0800a43c
 80020c8:	0800a458 	.word	0x0800a458
 80020cc:	00000000 	.word	0x00000000

080020d0 <RMC_Structure_Update>:


void RMC_Structure_Update(NMEA_Data_Struct_t *nmea, char *buffer){
 80020d0:	b5b0      	push	{r4, r5, r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]

    char *ret;
    char *token;

    /* Remove enytihings before message ID */
    ret = strchr(buffer, '$');
 80020da:	2124      	movs	r1, #36	@ 0x24
 80020dc:	6838      	ldr	r0, [r7, #0]
 80020de:	f005 fdb7 	bl	8007c50 <strchr>
 80020e2:	61f8      	str	r0, [r7, #28]
    // printf("%s\n", ret);

    /* Extract Message_ID */
    token = strtok(ret, ",");
 80020e4:	49c8      	ldr	r1, [pc, #800]	@ (8002408 <RMC_Structure_Update+0x338>)
 80020e6:	69f8      	ldr	r0, [r7, #28]
 80020e8:	f005 fdd2 	bl	8007c90 <strtok>
 80020ec:	61b8      	str	r0, [r7, #24]
    strcpy(nmea->RMC.Message_ID, token);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80020f4:	69b9      	ldr	r1, [r7, #24]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f005 fe9d 	bl	8007e36 <strcpy>

    /* Extract UTC Time */
    token = strtok(0, ",");
 80020fc:	49c2      	ldr	r1, [pc, #776]	@ (8002408 <RMC_Structure_Update+0x338>)
 80020fe:	2000      	movs	r0, #0
 8002100:	f005 fdc6 	bl	8007c90 <strtok>
 8002104:	61b8      	str	r0, [r7, #24]
    nmea->RMC.UTC_Time.Time = atof(token);
 8002106:	69b8      	ldr	r0, [r7, #24]
 8002108:	f004 f8b0 	bl	800626c <atof>
 800210c:	eeb0 7a40 	vmov.f32	s14, s0
 8002110:	eef0 7a60 	vmov.f32	s15, s1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	ed83 7b60 	vstr	d7, [r3, #384]	@ 0x180
    nmea->RMC.UTC_Time.hour = nmea->RMC.UTC_Time.Time / 10000;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	@ 0x180
 8002120:	a3b7      	add	r3, pc, #732	@ (adr r3, 8002400 <RMC_Structure_Update+0x330>)
 8002122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002126:	f7fe fba1 	bl	800086c <__aeabi_ddiv>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	f7fe fd21 	bl	8000b78 <__aeabi_d2iz>
 8002136:	4602      	mov	r2, r0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    nmea->RMC.UTC_Time.min = (nmea->RMC.UTC_Time.Time/100) - (((int)(nmea->RMC.UTC_Time.Time/10000))*100);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	@ 0x180
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	4bb0      	ldr	r3, [pc, #704]	@ (800240c <RMC_Structure_Update+0x33c>)
 800214a:	f7fe fb8f 	bl	800086c <__aeabi_ddiv>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4614      	mov	r4, r2
 8002154:	461d      	mov	r5, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	@ 0x180
 800215c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8002400 <RMC_Structure_Update+0x330>)
 800215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002162:	f7fe fb83 	bl	800086c <__aeabi_ddiv>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	f7fe fd03 	bl	8000b78 <__aeabi_d2iz>
 8002172:	4603      	mov	r3, r0
 8002174:	2264      	movs	r2, #100	@ 0x64
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f9e2 	bl	8000544 <__aeabi_i2d>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4620      	mov	r0, r4
 8002186:	4629      	mov	r1, r5
 8002188:	f7fe f88e 	bl	80002a8 <__aeabi_dsub>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	f7fe fcf0 	bl	8000b78 <__aeabi_d2iz>
 8002198:	4602      	mov	r2, r0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    nmea->RMC.UTC_Time.sec = nmea->RMC.UTC_Time.Time - (((int)(nmea->RMC.UTC_Time.Time/100))*100);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	e9d3 4560 	ldrd	r4, r5, [r3, #384]	@ 0x180
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	@ 0x180
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	4b96      	ldr	r3, [pc, #600]	@ (800240c <RMC_Structure_Update+0x33c>)
 80021b2:	f7fe fb5b 	bl	800086c <__aeabi_ddiv>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f7fe fcdb 	bl	8000b78 <__aeabi_d2iz>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2264      	movs	r2, #100	@ 0x64
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f9ba 	bl	8000544 <__aeabi_i2d>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4620      	mov	r0, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	f7fe f866 	bl	80002a8 <__aeabi_dsub>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fd10 	bl	8000c08 <__aeabi_d2f>
 80021e8:	4602      	mov	r2, r0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190

    /* Extract Status */
    token = strtok(0, ",");
 80021f0:	4985      	ldr	r1, [pc, #532]	@ (8002408 <RMC_Structure_Update+0x338>)
 80021f2:	2000      	movs	r0, #0
 80021f4:	f005 fd4c 	bl	8007c90 <strtok>
 80021f8:	61b8      	str	r0, [r7, #24]
    nmea->RMC.Status = *token;
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f883 2198 	strb.w	r2, [r3, #408]	@ 0x198

    /* Extract Latitude */
    token = strtok(0, ",");
 8002204:	4980      	ldr	r1, [pc, #512]	@ (8002408 <RMC_Structure_Update+0x338>)
 8002206:	2000      	movs	r0, #0
 8002208:	f005 fd42 	bl	8007c90 <strtok>
 800220c:	61b8      	str	r0, [r7, #24]
    nmea->RMC.Location.latitude.Position = atof(token);
 800220e:	69b8      	ldr	r0, [r7, #24]
 8002210:	f004 f82c 	bl	800626c <atof>
 8002214:	ec53 2b10 	vmov	r2, r3, d0
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe fcf4 	bl	8000c08 <__aeabi_d2f>
 8002220:	4602      	mov	r2, r0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
    nmea->RMC.Location.latitude.Degree = nmea->RMC.Location.latitude.Position / 100;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	ed93 7a67 	vldr	s14, [r3, #412]	@ 0x19c
 800222e:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002410 <RMC_Structure_Update+0x340>
 8002232:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800223a:	ee17 2a90 	vmov	r2, s15
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
    nmea->RMC.Location.latitude.Minutes = nmea->RMC.Location.latitude.Position - (nmea->RMC.Location.latitude.Degree * 100);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	ed93 7a67 	vldr	s14, [r3, #412]	@ 0x19c
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8002250:	2264      	movs	r2, #100	@ 0x64
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	edc3 7a69 	vstr	s15, [r3, #420]	@ 0x1a4

    /* Extract N/S Indicator */
    token = strtok(0, ",");
 8002268:	4967      	ldr	r1, [pc, #412]	@ (8002408 <RMC_Structure_Update+0x338>)
 800226a:	2000      	movs	r0, #0
 800226c:	f005 fd10 	bl	8007c90 <strtok>
 8002270:	61b8      	str	r0, [r7, #24]
    nmea->RMC.Location.NS = *token;
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f883 21a8 	strb.w	r2, [r3, #424]	@ 0x1a8

    /* Extract Longitude */
    token = strtok(0, ",");
 800227c:	4962      	ldr	r1, [pc, #392]	@ (8002408 <RMC_Structure_Update+0x338>)
 800227e:	2000      	movs	r0, #0
 8002280:	f005 fd06 	bl	8007c90 <strtok>
 8002284:	61b8      	str	r0, [r7, #24]
    nmea->RMC.Location.longitude.Position = atof(token);
 8002286:	69b8      	ldr	r0, [r7, #24]
 8002288:	f003 fff0 	bl	800626c <atof>
 800228c:	ec53 2b10 	vmov	r2, r3, d0
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fcb8 	bl	8000c08 <__aeabi_d2f>
 8002298:	4602      	mov	r2, r0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
    nmea->RMC.Location.longitude.Degree = nmea->RMC.Location.longitude.Position / 100;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	ed93 7a6b 	vldr	s14, [r3, #428]	@ 0x1ac
 80022a6:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8002410 <RMC_Structure_Update+0x340>
 80022aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b2:	ee17 2a90 	vmov	r2, s15
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
    nmea->RMC.Location.longitude.Minutes = nmea->RMC.Location.longitude.Position - (nmea->RMC.Location.longitude.Degree * 100);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	ed93 7a6b 	vldr	s14, [r3, #428]	@ 0x1ac
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 80022c8:	2264      	movs	r2, #100	@ 0x64
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	edc3 7a6d 	vstr	s15, [r3, #436]	@ 0x1b4

    /* Extract E/W Indicator */
    token = strtok(0, ",");
 80022e0:	4949      	ldr	r1, [pc, #292]	@ (8002408 <RMC_Structure_Update+0x338>)
 80022e2:	2000      	movs	r0, #0
 80022e4:	f005 fcd4 	bl	8007c90 <strtok>
 80022e8:	61b8      	str	r0, [r7, #24]
    nmea->RMC.Location.EW = *token;
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8

    /* Extract Speed Over Ground | Knots */
    token = strtok(0, ",");
 80022f4:	4944      	ldr	r1, [pc, #272]	@ (8002408 <RMC_Structure_Update+0x338>)
 80022f6:	2000      	movs	r0, #0
 80022f8:	f005 fcca 	bl	8007c90 <strtok>
 80022fc:	61b8      	str	r0, [r7, #24]
    nmea->RMC.Speed_Over_Ground = atof(token);
 80022fe:	69b8      	ldr	r0, [r7, #24]
 8002300:	f003 ffb4 	bl	800626c <atof>
 8002304:	ec53 2b10 	vmov	r2, r3, d0
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fc7c 	bl	8000c08 <__aeabi_d2f>
 8002310:	4602      	mov	r2, r0
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc

    /* Extract Course Over Ground | degr */
    token = strtok(0, ",");
 8002318:	493b      	ldr	r1, [pc, #236]	@ (8002408 <RMC_Structure_Update+0x338>)
 800231a:	2000      	movs	r0, #0
 800231c:	f005 fcb8 	bl	8007c90 <strtok>
 8002320:	61b8      	str	r0, [r7, #24]
    nmea->RMC.Course_Over_Ground = atof(token);
 8002322:	69b8      	ldr	r0, [r7, #24]
 8002324:	f003 ffa2 	bl	800626c <atof>
 8002328:	ec53 2b10 	vmov	r2, r3, d0
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	f7fe fc6a 	bl	8000c08 <__aeabi_d2f>
 8002334:	4602      	mov	r2, r0
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0

    /* Extract Date */
    token = strtok(0, ",");
 800233c:	4932      	ldr	r1, [pc, #200]	@ (8002408 <RMC_Structure_Update+0x338>)
 800233e:	2000      	movs	r0, #0
 8002340:	f005 fca6 	bl	8007c90 <strtok>
 8002344:	61b8      	str	r0, [r7, #24]
    nmea->RMC.UTC_Date.Date = atoi(token);
 8002346:	69b8      	ldr	r0, [r7, #24]
 8002348:	f003 ff93 	bl	8006272 <atoi>
 800234c:	4602      	mov	r2, r0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
    nmea->RMC.UTC_Date.Day = nmea->RMC.UTC_Date.Date / 10000;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800235a:	4a2e      	ldr	r2, [pc, #184]	@ (8002414 <RMC_Structure_Update+0x344>)
 800235c:	fb82 1203 	smull	r1, r2, r2, r3
 8002360:	1312      	asrs	r2, r2, #12
 8002362:	17db      	asrs	r3, r3, #31
 8002364:	1ad2      	subs	r2, r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
    nmea->RMC.UTC_Date.Mon = (nmea->RMC.UTC_Date.Date/100) - (((int)(nmea->RMC.UTC_Date.Date/10000))*100);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8002372:	4a29      	ldr	r2, [pc, #164]	@ (8002418 <RMC_Structure_Update+0x348>)
 8002374:	fb82 1203 	smull	r1, r2, r2, r3
 8002378:	1152      	asrs	r2, r2, #5
 800237a:	17db      	asrs	r3, r3, #31
 800237c:	1ad2      	subs	r2, r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8002384:	4923      	ldr	r1, [pc, #140]	@ (8002414 <RMC_Structure_Update+0x344>)
 8002386:	fb81 0103 	smull	r0, r1, r1, r3
 800238a:	1309      	asrs	r1, r1, #12
 800238c:	17db      	asrs	r3, r3, #31
 800238e:	1a5b      	subs	r3, r3, r1
 8002390:	2164      	movs	r1, #100	@ 0x64
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	441a      	add	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
    nmea->RMC.UTC_Date.Yr = nmea->RMC.UTC_Date.Date - (((int)(nmea->RMC.UTC_Date.Date/100))*100);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 80023a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002418 <RMC_Structure_Update+0x348>)
 80023a6:	fb83 1302 	smull	r1, r3, r3, r2
 80023aa:	1159      	asrs	r1, r3, #5
 80023ac:	17d3      	asrs	r3, r2, #31
 80023ae:	1acb      	subs	r3, r1, r3
 80023b0:	2164      	movs	r1, #100	@ 0x64
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0

    /* Extract Magnetic_Variation */
    token = strtok(0, ",");
 80023be:	4912      	ldr	r1, [pc, #72]	@ (8002408 <RMC_Structure_Update+0x338>)
 80023c0:	2000      	movs	r0, #0
 80023c2:	f005 fc65 	bl	8007c90 <strtok>
 80023c6:	61b8      	str	r0, [r7, #24]
    nmea->RMC.Magnetic_Variation = *token;
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	781a      	ldrb	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f883 21d4 	strb.w	r2, [r3, #468]	@ 0x1d4

    /* Extract East_West_Indicator */
    token = strtok(0, ",");
 80023d2:	490d      	ldr	r1, [pc, #52]	@ (8002408 <RMC_Structure_Update+0x338>)
 80023d4:	2000      	movs	r0, #0
 80023d6:	f005 fc5b 	bl	8007c90 <strtok>
 80023da:	61b8      	str	r0, [r7, #24]
    nmea->RMC.East_West_Indicator = *token;    
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f883 21d5 	strb.w	r2, [r3, #469]	@ 0x1d5

    /* Extract Mode */
    token = strtok(0, ",");
 80023e6:	4908      	ldr	r1, [pc, #32]	@ (8002408 <RMC_Structure_Update+0x338>)
 80023e8:	2000      	movs	r0, #0
 80023ea:	f005 fc51 	bl	8007c90 <strtok>
 80023ee:	61b8      	str	r0, [r7, #24]
    nmea->RMC.Mode = *token;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	781a      	ldrb	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f883 21d6 	strb.w	r2, [r3, #470]	@ 0x1d6
 80023fa:	e00f      	b.n	800241c <RMC_Structure_Update+0x34c>
 80023fc:	f3af 8000 	nop.w
 8002400:	00000000 	.word	0x00000000
 8002404:	40c38800 	.word	0x40c38800
 8002408:	0800a368 	.word	0x0800a368
 800240c:	40590000 	.word	0x40590000
 8002410:	42c80000 	.word	0x42c80000
 8002414:	68db8bad 	.word	0x68db8bad
 8002418:	51eb851f 	.word	0x51eb851f

    /* Extract Checksum */
    ret = strchr(token, '*');
 800241c:	212a      	movs	r1, #42	@ 0x2a
 800241e:	69b8      	ldr	r0, [r7, #24]
 8002420:	f005 fc16 	bl	8007c50 <strchr>
 8002424:	61f8      	str	r0, [r7, #28]
    strcpy(nmea->RMC.Str_Checksum, ret);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f203 13d7 	addw	r3, r3, #471	@ 0x1d7
 800242c:	69f9      	ldr	r1, [r7, #28]
 800242e:	4618      	mov	r0, r3
 8002430:	f005 fd01 	bl	8007e36 <strcpy>
    // printf("%c\n", nmea->RMC.Magnetic_Variation);
    // printf("%c\n", nmea->RMC.East_West_Indicator);
    // printf("%c\n", nmea->RMC.Mode);
    // printf("%s\n", nmea->RMC.Str_Checksum);

    char *pRMC_Message_ID = &RMC_Message_ID[0];
 8002434:	4b11      	ldr	r3, [pc, #68]	@ (800247c <RMC_Structure_Update+0x3ac>)
 8002436:	617b      	str	r3, [r7, #20]
    char *pRMC_Checksum = &RMC_Checksum[0];
 8002438:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <RMC_Structure_Update+0x3b0>)
 800243a:	613b      	str	r3, [r7, #16]

    char *pRMC_Struct_Message_ID = &nmea->RMC.Message_ID[0];
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002442:	60fb      	str	r3, [r7, #12]
    char *pRMC_Struct_Checksum = &nmea->RMC.Str_Checksum[0];
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f203 13d7 	addw	r3, r3, #471	@ 0x1d7
 800244a:	60bb      	str	r3, [r7, #8]

    if(strcmp(pRMC_Message_ID, pRMC_Struct_Message_ID) == 0){
 800244c:	68f9      	ldr	r1, [r7, #12]
 800244e:	6978      	ldr	r0, [r7, #20]
 8002450:	f7fd febe 	bl	80001d0 <strcmp>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <RMC_Structure_Update+0x390>
        printf("RMC Message ID validated\n");
 800245a:	480a      	ldr	r0, [pc, #40]	@ (8002484 <RMC_Structure_Update+0x3b4>)
 800245c:	f005 fb10 	bl	8007a80 <puts>
    }

    if(strcmp(pRMC_Checksum, pRMC_Struct_Checksum) == 0){
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	6938      	ldr	r0, [r7, #16]
 8002464:	f7fd feb4 	bl	80001d0 <strcmp>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d102      	bne.n	8002474 <RMC_Structure_Update+0x3a4>
        printf("RMC Checksum validated\n");
 800246e:	4806      	ldr	r0, [pc, #24]	@ (8002488 <RMC_Structure_Update+0x3b8>)
 8002470:	f005 fb06 	bl	8007a80 <puts>
    }
}
 8002474:	bf00      	nop
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bdb0      	pop	{r4, r5, r7, pc}
 800247c:	0800a548 	.word	0x0800a548
 8002480:	0800a550 	.word	0x0800a550
 8002484:	0800a470 	.word	0x0800a470
 8002488:	0800a48c 	.word	0x0800a48c

0800248c <VTG_Structure_Update>:


void VTG_Structure_Update(NMEA_Data_Struct_t *nmea, char *buffer){
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]

    char *ret;
    char *token;

    /* Remove enytihings before message ID */
    ret = strchr(buffer, '$');
 8002496:	2124      	movs	r1, #36	@ 0x24
 8002498:	6838      	ldr	r0, [r7, #0]
 800249a:	f005 fbd9 	bl	8007c50 <strchr>
 800249e:	61f8      	str	r0, [r7, #28]
    // printf("%s\n", ret);

    /* Extract Message_ID */
    token = strtok(ret, ",");
 80024a0:	495a      	ldr	r1, [pc, #360]	@ (800260c <VTG_Structure_Update+0x180>)
 80024a2:	69f8      	ldr	r0, [r7, #28]
 80024a4:	f005 fbf4 	bl	8007c90 <strtok>
 80024a8:	61b8      	str	r0, [r7, #24]
    strcpy(nmea->VTG.Message_ID, token);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80024b0:	69b9      	ldr	r1, [r7, #24]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f005 fcbf 	bl	8007e36 <strcpy>

    /* Extract Measured true heading | degree */
    token = strtok(0, ",");
 80024b8:	4954      	ldr	r1, [pc, #336]	@ (800260c <VTG_Structure_Update+0x180>)
 80024ba:	2000      	movs	r0, #0
 80024bc:	f005 fbe8 	bl	8007c90 <strtok>
 80024c0:	61b8      	str	r0, [r7, #24]
    nmea->VTG.Course_T = atof(token);
 80024c2:	69b8      	ldr	r0, [r7, #24]
 80024c4:	f003 fed2 	bl	800626c <atof>
 80024c8:	ec53 2b10 	vmov	r2, r3, d0
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe fb9a 	bl	8000c08 <__aeabi_d2f>
 80024d4:	4602      	mov	r2, r0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8

    /* Extract Measured heading reference | True */
    token = strtok(0, ",");
 80024dc:	494b      	ldr	r1, [pc, #300]	@ (800260c <VTG_Structure_Update+0x180>)
 80024de:	2000      	movs	r0, #0
 80024e0:	f005 fbd6 	bl	8007c90 <strtok>
 80024e4:	61b8      	str	r0, [r7, #24]
    nmea->VTG.Reference_T = *token;
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec

    /* Extract Measured magnetic heading | degree */
    token = strtok(0, ",");
 80024f0:	4946      	ldr	r1, [pc, #280]	@ (800260c <VTG_Structure_Update+0x180>)
 80024f2:	2000      	movs	r0, #0
 80024f4:	f005 fbcc 	bl	8007c90 <strtok>
 80024f8:	61b8      	str	r0, [r7, #24]
    nmea->VTG.Course_M = atof(token);
 80024fa:	69b8      	ldr	r0, [r7, #24]
 80024fc:	f003 feb6 	bl	800626c <atof>
 8002500:	ec53 2b10 	vmov	r2, r3, d0
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	f7fe fb7e 	bl	8000c08 <__aeabi_d2f>
 800250c:	4602      	mov	r2, r0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0

    /* Extract Measured heading reference | Magnetic */
    token = strtok(0, ",");
 8002514:	493d      	ldr	r1, [pc, #244]	@ (800260c <VTG_Structure_Update+0x180>)
 8002516:	2000      	movs	r0, #0
 8002518:	f005 fbba 	bl	8007c90 <strtok>
 800251c:	61b8      	str	r0, [r7, #24]
    nmea->VTG.Reference_M = *token;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f883 21f4 	strb.w	r2, [r3, #500]	@ 0x1f4

    /* Extract Measured horizontal speed | Knots */
    token = strtok(0, ",");
 8002528:	4938      	ldr	r1, [pc, #224]	@ (800260c <VTG_Structure_Update+0x180>)
 800252a:	2000      	movs	r0, #0
 800252c:	f005 fbb0 	bl	8007c90 <strtok>
 8002530:	61b8      	str	r0, [r7, #24]
    nmea->VTG.Speed_Knots = atof(token);
 8002532:	69b8      	ldr	r0, [r7, #24]
 8002534:	f003 fe9a 	bl	800626c <atof>
 8002538:	ec53 2b10 	vmov	r2, r3, d0
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	f7fe fb62 	bl	8000c08 <__aeabi_d2f>
 8002544:	4602      	mov	r2, r0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

    /* Extract Measured horizontal speed units | Knots */
    token = strtok(0, ",");
 800254c:	492f      	ldr	r1, [pc, #188]	@ (800260c <VTG_Structure_Update+0x180>)
 800254e:	2000      	movs	r0, #0
 8002550:	f005 fb9e 	bl	8007c90 <strtok>
 8002554:	61b8      	str	r0, [r7, #24]
    nmea->VTG.Units_Knots = *token;
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	781a      	ldrb	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc

    /* Extract Measured horizontal speed | Km/hr */
    token = strtok(0, ",");
 8002560:	492a      	ldr	r1, [pc, #168]	@ (800260c <VTG_Structure_Update+0x180>)
 8002562:	2000      	movs	r0, #0
 8002564:	f005 fb94 	bl	8007c90 <strtok>
 8002568:	61b8      	str	r0, [r7, #24]
    nmea->VTG.Speed_Km_hr = atof(token);
 800256a:	69b8      	ldr	r0, [r7, #24]
 800256c:	f003 fe7e 	bl	800626c <atof>
 8002570:	ec53 2b10 	vmov	r2, r3, d0
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	f7fe fb46 	bl	8000c08 <__aeabi_d2f>
 800257c:	4602      	mov	r2, r0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Extract Measured horizontal speed units | Km/hr */
    token = strtok(0, ",");
 8002584:	4921      	ldr	r1, [pc, #132]	@ (800260c <VTG_Structure_Update+0x180>)
 8002586:	2000      	movs	r0, #0
 8002588:	f005 fb82 	bl	8007c90 <strtok>
 800258c:	61b8      	str	r0, [r7, #24]
    nmea->VTG.Units_Km_hr = *token;    
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204

    /* Extract Mode */
    token = strtok(0, ",");
 8002598:	491c      	ldr	r1, [pc, #112]	@ (800260c <VTG_Structure_Update+0x180>)
 800259a:	2000      	movs	r0, #0
 800259c:	f005 fb78 	bl	8007c90 <strtok>
 80025a0:	61b8      	str	r0, [r7, #24]
    nmea->VTG.Mode = *token;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	781a      	ldrb	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205

    /* Extract Checksum */
    ret = strchr(token, '*');
 80025ac:	212a      	movs	r1, #42	@ 0x2a
 80025ae:	69b8      	ldr	r0, [r7, #24]
 80025b0:	f005 fb4e 	bl	8007c50 <strchr>
 80025b4:	61f8      	str	r0, [r7, #28]
    strcpy(nmea->VTG.Str_Checksum, ret);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f203 2306 	addw	r3, r3, #518	@ 0x206
 80025bc:	69f9      	ldr	r1, [r7, #28]
 80025be:	4618      	mov	r0, r3
 80025c0:	f005 fc39 	bl	8007e36 <strcpy>
    // printf("%f\n", nmea->VTG.Speed_Km_hr);
    // printf("%c\n", nmea->VTG.Units_Km_hr);
    // printf("%c\n", nmea->VTG.Mode);
    // printf("%s\n", nmea->VTG.Str_Checksum);

    char *pVTG_Message_ID = &VTG_Message_ID[0];
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <VTG_Structure_Update+0x184>)
 80025c6:	617b      	str	r3, [r7, #20]
    char *pVTG_Checksum = &VTG_Checksum[0];
 80025c8:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <VTG_Structure_Update+0x188>)
 80025ca:	613b      	str	r3, [r7, #16]

    char *pVTG_Struct_Message_ID = &nmea->VTG.Message_ID[0];
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80025d2:	60fb      	str	r3, [r7, #12]
    char *pVTG_Struct_Checksum = &nmea->VTG.Str_Checksum[0];
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f203 2306 	addw	r3, r3, #518	@ 0x206
 80025da:	60bb      	str	r3, [r7, #8]

    if(strcmp(pVTG_Message_ID, pVTG_Struct_Message_ID) == 0){
 80025dc:	68f9      	ldr	r1, [r7, #12]
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f7fd fdf6 	bl	80001d0 <strcmp>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d102      	bne.n	80025f0 <VTG_Structure_Update+0x164>
        printf("VTG Message ID validated\n");
 80025ea:	480b      	ldr	r0, [pc, #44]	@ (8002618 <VTG_Structure_Update+0x18c>)
 80025ec:	f005 fa48 	bl	8007a80 <puts>
    }

    if(strcmp(pVTG_Checksum, pVTG_Struct_Checksum) == 0){
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	6938      	ldr	r0, [r7, #16]
 80025f4:	f7fd fdec 	bl	80001d0 <strcmp>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <VTG_Structure_Update+0x178>
        printf("VTG Checksum validated\n");
 80025fe:	4807      	ldr	r0, [pc, #28]	@ (800261c <VTG_Structure_Update+0x190>)
 8002600:	f005 fa3e 	bl	8007a80 <puts>
    }
}
 8002604:	bf00      	nop
 8002606:	3720      	adds	r7, #32
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	0800a368 	.word	0x0800a368
 8002610:	0800a554 	.word	0x0800a554
 8002614:	0800a55c 	.word	0x0800a55c
 8002618:	0800a4a4 	.word	0x0800a4a4
 800261c:	0800a4c0 	.word	0x0800a4c0

08002620 <ZDA_Structure_Update>:


void ZDA_Structure_Update(NMEA_Data_Struct_t *nmea, char *buffer){
 8002620:	b5b0      	push	{r4, r5, r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]

    char *ret;
    char *token;

    /* Remove enytihings before message ID */
    ret = strchr(buffer, '$');
 800262a:	2124      	movs	r1, #36	@ 0x24
 800262c:	6838      	ldr	r0, [r7, #0]
 800262e:	f005 fb0f 	bl	8007c50 <strchr>
 8002632:	61f8      	str	r0, [r7, #28]
    // printf("%s\n", ret);

    /* Extract Message_ID */
    token = strtok(ret, ",");
 8002634:	497a      	ldr	r1, [pc, #488]	@ (8002820 <ZDA_Structure_Update+0x200>)
 8002636:	69f8      	ldr	r0, [r7, #28]
 8002638:	f005 fb2a 	bl	8007c90 <strtok>
 800263c:	61b8      	str	r0, [r7, #24]
    strcpy(nmea->ZDA.Message_ID, token);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002644:	69b9      	ldr	r1, [r7, #24]
 8002646:	4618      	mov	r0, r3
 8002648:	f005 fbf5 	bl	8007e36 <strcpy>

    /* Extract UTC Time */
    token = strtok(0, ",");
 800264c:	4974      	ldr	r1, [pc, #464]	@ (8002820 <ZDA_Structure_Update+0x200>)
 800264e:	2000      	movs	r0, #0
 8002650:	f005 fb1e 	bl	8007c90 <strtok>
 8002654:	61b8      	str	r0, [r7, #24]
    nmea->ZDA.UTC_Time.Time = atof(token);
 8002656:	69b8      	ldr	r0, [r7, #24]
 8002658:	f003 fe08 	bl	800626c <atof>
 800265c:	eeb0 7a40 	vmov.f32	s14, s0
 8002660:	eef0 7a60 	vmov.f32	s15, s1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	ed83 7b86 	vstr	d7, [r3, #536]	@ 0x218
    nmea->ZDA.UTC_Time.hour = nmea->ZDA.UTC_Time.Time / 10000;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	@ 0x218
 8002670:	a369      	add	r3, pc, #420	@ (adr r3, 8002818 <ZDA_Structure_Update+0x1f8>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	f7fe f8f9 	bl	800086c <__aeabi_ddiv>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f7fe fa79 	bl	8000b78 <__aeabi_d2iz>
 8002686:	4602      	mov	r2, r0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
    nmea->ZDA.UTC_Time.min = (nmea->ZDA.UTC_Time.Time/100) - (((int)(nmea->ZDA.UTC_Time.Time/10000))*100);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	@ 0x218
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	4b62      	ldr	r3, [pc, #392]	@ (8002824 <ZDA_Structure_Update+0x204>)
 800269a:	f7fe f8e7 	bl	800086c <__aeabi_ddiv>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4614      	mov	r4, r2
 80026a4:	461d      	mov	r5, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	@ 0x218
 80026ac:	a35a      	add	r3, pc, #360	@ (adr r3, 8002818 <ZDA_Structure_Update+0x1f8>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fe f8db 	bl	800086c <__aeabi_ddiv>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f7fe fa5b 	bl	8000b78 <__aeabi_d2iz>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2264      	movs	r2, #100	@ 0x64
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd ff3a 	bl	8000544 <__aeabi_i2d>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7fd fde6 	bl	80002a8 <__aeabi_dsub>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7fe fa48 	bl	8000b78 <__aeabi_d2iz>
 80026e8:	4602      	mov	r2, r0
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
    nmea->ZDA.UTC_Time.sec = nmea->ZDA.UTC_Time.Time - (((int)(nmea->ZDA.UTC_Time.Time/100))*100);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	e9d3 4586 	ldrd	r4, r5, [r3, #536]	@ 0x218
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	@ 0x218
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	4b48      	ldr	r3, [pc, #288]	@ (8002824 <ZDA_Structure_Update+0x204>)
 8002702:	f7fe f8b3 	bl	800086c <__aeabi_ddiv>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	f7fe fa33 	bl	8000b78 <__aeabi_d2iz>
 8002712:	4603      	mov	r3, r0
 8002714:	2264      	movs	r2, #100	@ 0x64
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd ff12 	bl	8000544 <__aeabi_i2d>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4620      	mov	r0, r4
 8002726:	4629      	mov	r1, r5
 8002728:	f7fd fdbe 	bl	80002a8 <__aeabi_dsub>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	f7fe fa68 	bl	8000c08 <__aeabi_d2f>
 8002738:	4602      	mov	r2, r0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228

    /* Extract Date */
    token = strtok(0, ",");
 8002740:	4937      	ldr	r1, [pc, #220]	@ (8002820 <ZDA_Structure_Update+0x200>)
 8002742:	2000      	movs	r0, #0
 8002744:	f005 faa4 	bl	8007c90 <strtok>
 8002748:	61b8      	str	r0, [r7, #24]
    nmea->ZDA.UTC_Date.Day = atoi(token);
 800274a:	69b8      	ldr	r0, [r7, #24]
 800274c:	f003 fd91 	bl	8006272 <atoi>
 8002750:	4602      	mov	r2, r0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
    token = strtok(0, ",");
 8002758:	4931      	ldr	r1, [pc, #196]	@ (8002820 <ZDA_Structure_Update+0x200>)
 800275a:	2000      	movs	r0, #0
 800275c:	f005 fa98 	bl	8007c90 <strtok>
 8002760:	61b8      	str	r0, [r7, #24]
    nmea->ZDA.UTC_Date.Mon = atoi(token);
 8002762:	69b8      	ldr	r0, [r7, #24]
 8002764:	f003 fd85 	bl	8006272 <atoi>
 8002768:	4602      	mov	r2, r0
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
    token = strtok(0, ",");
 8002770:	492b      	ldr	r1, [pc, #172]	@ (8002820 <ZDA_Structure_Update+0x200>)
 8002772:	2000      	movs	r0, #0
 8002774:	f005 fa8c 	bl	8007c90 <strtok>
 8002778:	61b8      	str	r0, [r7, #24]
    nmea->ZDA.UTC_Date.Yr = atoi(token);
 800277a:	69b8      	ldr	r0, [r7, #24]
 800277c:	f003 fd79 	bl	8006272 <atoi>
 8002780:	4602      	mov	r2, r0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c

    /* Extract Local_Zone */
    token = strtok(0, ",");
 8002788:	4925      	ldr	r1, [pc, #148]	@ (8002820 <ZDA_Structure_Update+0x200>)
 800278a:	2000      	movs	r0, #0
 800278c:	f005 fa80 	bl	8007c90 <strtok>
 8002790:	61b8      	str	r0, [r7, #24]
    nmea->ZDA.Local_Zone.hour = *token;
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
    token = strtok(0, ",");
 800279e:	4920      	ldr	r1, [pc, #128]	@ (8002820 <ZDA_Structure_Update+0x200>)
 80027a0:	2000      	movs	r0, #0
 80027a2:	f005 fa75 	bl	8007c90 <strtok>
 80027a6:	61b8      	str	r0, [r7, #24]
    nmea->ZDA.Local_Zone.minutes = *token;
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244

    /* Extract Checksum */
    ret = strchr(token, '*');
 80027b4:	212a      	movs	r1, #42	@ 0x2a
 80027b6:	69b8      	ldr	r0, [r7, #24]
 80027b8:	f005 fa4a 	bl	8007c50 <strchr>
 80027bc:	61f8      	str	r0, [r7, #28]
    strcpy(nmea->ZDA.Str_Checksum, ret);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80027c4:	69f9      	ldr	r1, [r7, #28]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f005 fb35 	bl	8007e36 <strcpy>
    // printf("%d\n", nmea->ZDA.UTC_Date.Yr);
    // printf("%d\n", nmea->ZDA.Local_Zone.hour);
    // printf("%d\n", nmea->ZDA.Local_Zone.minutes);
    // printf("%s\n", nmea->ZDA.Str_Checksum);

    char *pZDA_Message_ID = &ZDA_Message_ID[0];
 80027cc:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <ZDA_Structure_Update+0x208>)
 80027ce:	617b      	str	r3, [r7, #20]
    char *pZDA_Checksum = &ZDA_Checksum[0];
 80027d0:	4b16      	ldr	r3, [pc, #88]	@ (800282c <ZDA_Structure_Update+0x20c>)
 80027d2:	613b      	str	r3, [r7, #16]

    char *pZDA_Struct_Message_ID = &nmea->ZDA.Message_ID[0];
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80027da:	60fb      	str	r3, [r7, #12]
    char *pZDA_Struct_Checksum = &nmea->ZDA.Str_Checksum[0];
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80027e2:	60bb      	str	r3, [r7, #8]

    if(strcmp(pZDA_Message_ID, pZDA_Struct_Message_ID) == 0){
 80027e4:	68f9      	ldr	r1, [r7, #12]
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f7fd fcf2 	bl	80001d0 <strcmp>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <ZDA_Structure_Update+0x1d8>
        printf("ZDA Message ID validated\n");
 80027f2:	480f      	ldr	r0, [pc, #60]	@ (8002830 <ZDA_Structure_Update+0x210>)
 80027f4:	f005 f944 	bl	8007a80 <puts>
    }

    if(strcmp(pZDA_Checksum, pZDA_Struct_Checksum) == 0){
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	6938      	ldr	r0, [r7, #16]
 80027fc:	f7fd fce8 	bl	80001d0 <strcmp>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <ZDA_Structure_Update+0x1ec>
        printf("ZDA Checksum validated\n");
 8002806:	480b      	ldr	r0, [pc, #44]	@ (8002834 <ZDA_Structure_Update+0x214>)
 8002808:	f005 f93a 	bl	8007a80 <puts>
    }
}
 800280c:	bf00      	nop
 800280e:	3720      	adds	r7, #32
 8002810:	46bd      	mov	sp, r7
 8002812:	bdb0      	pop	{r4, r5, r7, pc}
 8002814:	f3af 8000 	nop.w
 8002818:	00000000 	.word	0x00000000
 800281c:	40c38800 	.word	0x40c38800
 8002820:	0800a368 	.word	0x0800a368
 8002824:	40590000 	.word	0x40590000
 8002828:	0800a560 	.word	0x0800a560
 800282c:	0800a568 	.word	0x0800a568
 8002830:	0800a4d8 	.word	0x0800a4d8
 8002834:	0800a4f4 	.word	0x0800a4f4

08002838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <HAL_MspInit+0x4c>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	4a0f      	ldr	r2, [pc, #60]	@ (8002884 <HAL_MspInit+0x4c>)
 8002848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800284c:	6453      	str	r3, [r2, #68]	@ 0x44
 800284e:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <HAL_MspInit+0x4c>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <HAL_MspInit+0x4c>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	4a08      	ldr	r2, [pc, #32]	@ (8002884 <HAL_MspInit+0x4c>)
 8002864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002868:	6413      	str	r3, [r2, #64]	@ 0x40
 800286a:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <HAL_MspInit+0x4c>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	@ 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a29      	ldr	r2, [pc, #164]	@ (800294c <HAL_CAN_MspInit+0xc4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d14c      	bne.n	8002944 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	4b28      	ldr	r3, [pc, #160]	@ (8002950 <HAL_CAN_MspInit+0xc8>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	4a27      	ldr	r2, [pc, #156]	@ (8002950 <HAL_CAN_MspInit+0xc8>)
 80028b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ba:	4b25      	ldr	r3, [pc, #148]	@ (8002950 <HAL_CAN_MspInit+0xc8>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	4b21      	ldr	r3, [pc, #132]	@ (8002950 <HAL_CAN_MspInit+0xc8>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	4a20      	ldr	r2, [pc, #128]	@ (8002950 <HAL_CAN_MspInit+0xc8>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002950 <HAL_CAN_MspInit+0xc8>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80028e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80028f4:	2309      	movs	r3, #9
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	4619      	mov	r1, r3
 80028fe:	4815      	ldr	r0, [pc, #84]	@ (8002954 <HAL_CAN_MspInit+0xcc>)
 8002900:	f001 fd86 	bl	8004410 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002904:	2200      	movs	r2, #0
 8002906:	2100      	movs	r1, #0
 8002908:	2013      	movs	r0, #19
 800290a:	f001 f948 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800290e:	2013      	movs	r0, #19
 8002910:	f001 f961 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002914:	2200      	movs	r2, #0
 8002916:	2100      	movs	r1, #0
 8002918:	2014      	movs	r0, #20
 800291a:	f001 f940 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800291e:	2014      	movs	r0, #20
 8002920:	f001 f959 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2100      	movs	r1, #0
 8002928:	2015      	movs	r0, #21
 800292a:	f001 f938 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800292e:	2015      	movs	r0, #21
 8002930:	f001 f951 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8002934:	2200      	movs	r2, #0
 8002936:	2100      	movs	r1, #0
 8002938:	2016      	movs	r0, #22
 800293a:	f001 f930 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800293e:	2016      	movs	r0, #22
 8002940:	f001 f949 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002944:	bf00      	nop
 8002946:	3728      	adds	r7, #40	@ 0x28
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40006400 	.word	0x40006400
 8002950:	40023800 	.word	0x40023800
 8002954:	40020000 	.word	0x40020000

08002958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	@ 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a4b      	ldr	r2, [pc, #300]	@ (8002aa4 <HAL_UART_MspInit+0x14c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	f040 8090 	bne.w	8002a9c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	4b49      	ldr	r3, [pc, #292]	@ (8002aa8 <HAL_UART_MspInit+0x150>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	4a48      	ldr	r2, [pc, #288]	@ (8002aa8 <HAL_UART_MspInit+0x150>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800298a:	6413      	str	r3, [r2, #64]	@ 0x40
 800298c:	4b46      	ldr	r3, [pc, #280]	@ (8002aa8 <HAL_UART_MspInit+0x150>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	4b42      	ldr	r3, [pc, #264]	@ (8002aa8 <HAL_UART_MspInit+0x150>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a0:	4a41      	ldr	r2, [pc, #260]	@ (8002aa8 <HAL_UART_MspInit+0x150>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a8:	4b3f      	ldr	r3, [pc, #252]	@ (8002aa8 <HAL_UART_MspInit+0x150>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029b4:	230c      	movs	r3, #12
 80029b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c0:	2303      	movs	r3, #3
 80029c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029c4:	2307      	movs	r3, #7
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	4837      	ldr	r0, [pc, #220]	@ (8002aac <HAL_UART_MspInit+0x154>)
 80029d0:	f001 fd1e 	bl	8004410 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80029d4:	4b36      	ldr	r3, [pc, #216]	@ (8002ab0 <HAL_UART_MspInit+0x158>)
 80029d6:	4a37      	ldr	r2, [pc, #220]	@ (8002ab4 <HAL_UART_MspInit+0x15c>)
 80029d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80029da:	4b35      	ldr	r3, [pc, #212]	@ (8002ab0 <HAL_UART_MspInit+0x158>)
 80029dc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029e2:	4b33      	ldr	r3, [pc, #204]	@ (8002ab0 <HAL_UART_MspInit+0x158>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e8:	4b31      	ldr	r3, [pc, #196]	@ (8002ab0 <HAL_UART_MspInit+0x158>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029ee:	4b30      	ldr	r3, [pc, #192]	@ (8002ab0 <HAL_UART_MspInit+0x158>)
 80029f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029f6:	4b2e      	ldr	r3, [pc, #184]	@ (8002ab0 <HAL_UART_MspInit+0x158>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029fc:	4b2c      	ldr	r3, [pc, #176]	@ (8002ab0 <HAL_UART_MspInit+0x158>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a02:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab0 <HAL_UART_MspInit+0x158>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a08:	4b29      	ldr	r3, [pc, #164]	@ (8002ab0 <HAL_UART_MspInit+0x158>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a0e:	4b28      	ldr	r3, [pc, #160]	@ (8002ab0 <HAL_UART_MspInit+0x158>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a14:	4826      	ldr	r0, [pc, #152]	@ (8002ab0 <HAL_UART_MspInit+0x158>)
 8002a16:	f001 f8f9 	bl	8003c0c <HAL_DMA_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002a20:	f7fe fcb8 	bl	8001394 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a22      	ldr	r2, [pc, #136]	@ (8002ab0 <HAL_UART_MspInit+0x158>)
 8002a28:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a2a:	4a21      	ldr	r2, [pc, #132]	@ (8002ab0 <HAL_UART_MspInit+0x158>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002a30:	4b21      	ldr	r3, [pc, #132]	@ (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a32:	4a22      	ldr	r2, [pc, #136]	@ (8002abc <HAL_UART_MspInit+0x164>)
 8002a34:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002a36:	4b20      	ldr	r3, [pc, #128]	@ (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a38:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a40:	2240      	movs	r2, #64	@ 0x40
 8002a42:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a44:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a50:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a52:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a58:	4b17      	ldr	r3, [pc, #92]	@ (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a5e:	4b16      	ldr	r3, [pc, #88]	@ (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a64:	4b14      	ldr	r3, [pc, #80]	@ (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a6a:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a70:	4811      	ldr	r0, [pc, #68]	@ (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a72:	f001 f8cb 	bl	8003c0c <HAL_DMA_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002a7c:	f7fe fc8a 	bl	8001394 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a84:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a86:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	2026      	movs	r0, #38	@ 0x26
 8002a92:	f001 f884 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a96:	2026      	movs	r0, #38	@ 0x26
 8002a98:	f001 f89d 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a9c:	bf00      	nop
 8002a9e:	3728      	adds	r7, #40	@ 0x28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40004400 	.word	0x40004400
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	20000264 	.word	0x20000264
 8002ab4:	40026088 	.word	0x40026088
 8002ab8:	200002c4 	.word	0x200002c4
 8002abc:	400260a0 	.word	0x400260a0

08002ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ac4:	bf00      	nop
 8002ac6:	e7fd      	b.n	8002ac4 <NMI_Handler+0x4>

08002ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <HardFault_Handler+0x4>

08002ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <MemManage_Handler+0x4>

08002ad8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <BusFault_Handler+0x4>

08002ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <UsageFault_Handler+0x4>

08002ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b16:	f000 f99d 	bl	8002e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b24:	4802      	ldr	r0, [pc, #8]	@ (8002b30 <DMA1_Stream5_IRQHandler+0x10>)
 8002b26:	f001 fa09 	bl	8003f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000264 	.word	0x20000264

08002b34 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b38:	4802      	ldr	r0, [pc, #8]	@ (8002b44 <DMA1_Stream6_IRQHandler+0x10>)
 8002b3a:	f001 f9ff 	bl	8003f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200002c4 	.word	0x200002c4

08002b48 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002b4c:	4802      	ldr	r0, [pc, #8]	@ (8002b58 <CAN1_TX_IRQHandler+0x10>)
 8002b4e:	f000 fd1c 	bl	800358a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200001f4 	.word	0x200001f4

08002b5c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002b60:	4802      	ldr	r0, [pc, #8]	@ (8002b6c <CAN1_RX0_IRQHandler+0x10>)
 8002b62:	f000 fd12 	bl	800358a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200001f4 	.word	0x200001f4

08002b70 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002b74:	4802      	ldr	r0, [pc, #8]	@ (8002b80 <CAN1_RX1_IRQHandler+0x10>)
 8002b76:	f000 fd08 	bl	800358a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	200001f4 	.word	0x200001f4

08002b84 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002b88:	4802      	ldr	r0, [pc, #8]	@ (8002b94 <CAN1_SCE_IRQHandler+0x10>)
 8002b8a:	f000 fcfe 	bl	800358a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200001f4 	.word	0x200001f4

08002b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b9c:	4802      	ldr	r0, [pc, #8]	@ (8002ba8 <USART2_IRQHandler+0x10>)
 8002b9e:	f002 fad9 	bl	8005154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	2000021c 	.word	0x2000021c

08002bac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return 1;
 8002bb0:	2301      	movs	r3, #1
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <_kill>:

int _kill(int pid, int sig)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bc6:	f005 f909 	bl	8007ddc <__errno>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2216      	movs	r2, #22
 8002bce:	601a      	str	r2, [r3, #0]
  return -1;
 8002bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <_exit>:

void _exit (int status)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002be4:	f04f 31ff 	mov.w	r1, #4294967295
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ffe7 	bl	8002bbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bee:	bf00      	nop
 8002bf0:	e7fd      	b.n	8002bee <_exit+0x12>

08002bf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	e00a      	b.n	8002c1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c04:	f3af 8000 	nop.w
 8002c08:	4601      	mov	r1, r0
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	60ba      	str	r2, [r7, #8]
 8002c10:	b2ca      	uxtb	r2, r1
 8002c12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3301      	adds	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	dbf0      	blt.n	8002c04 <_read+0x12>
  }

  return len;
 8002c22:	687b      	ldr	r3, [r7, #4]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	e009      	b.n	8002c52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	60ba      	str	r2, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	dbf1      	blt.n	8002c3e <_write+0x12>
  }
  return len;
 8002c5a:	687b      	ldr	r3, [r7, #4]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <_close>:

int _close(int file)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <_isatty>:

int _isatty(int file)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ca4:	2301      	movs	r3, #1
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cd4:	4a14      	ldr	r2, [pc, #80]	@ (8002d28 <_sbrk+0x5c>)
 8002cd6:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <_sbrk+0x60>)
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ce0:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <_sbrk+0x64>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ce8:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <_sbrk+0x64>)
 8002cea:	4a12      	ldr	r2, [pc, #72]	@ (8002d34 <_sbrk+0x68>)
 8002cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cee:	4b10      	ldr	r3, [pc, #64]	@ (8002d30 <_sbrk+0x64>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d207      	bcs.n	8002d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cfc:	f005 f86e 	bl	8007ddc <__errno>
 8002d00:	4603      	mov	r3, r0
 8002d02:	220c      	movs	r2, #12
 8002d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0a:	e009      	b.n	8002d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d0c:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <_sbrk+0x64>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d12:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <_sbrk+0x64>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	4a05      	ldr	r2, [pc, #20]	@ (8002d30 <_sbrk+0x64>)
 8002d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20020000 	.word	0x20020000
 8002d2c:	00000400 	.word	0x00000400
 8002d30:	200007b8 	.word	0x200007b8
 8002d34:	20000910 	.word	0x20000910

08002d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d3c:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <SystemInit+0x20>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d42:	4a05      	ldr	r2, [pc, #20]	@ (8002d58 <SystemInit+0x20>)
 8002d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d60:	f7ff ffea 	bl	8002d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d64:	480c      	ldr	r0, [pc, #48]	@ (8002d98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d66:	490d      	ldr	r1, [pc, #52]	@ (8002d9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d68:	4a0d      	ldr	r2, [pc, #52]	@ (8002da0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d6c:	e002      	b.n	8002d74 <LoopCopyDataInit>

08002d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d72:	3304      	adds	r3, #4

08002d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d78:	d3f9      	bcc.n	8002d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002da4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8002da8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d80:	e001      	b.n	8002d86 <LoopFillZerobss>

08002d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d84:	3204      	adds	r2, #4

08002d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d88:	d3fb      	bcc.n	8002d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d8a:	f005 f82d 	bl	8007de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d8e:	f7fe f97d 	bl	800108c <main>
  bx  lr    
 8002d92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d9c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002da0:	0800aa1c 	.word	0x0800aa1c
  ldr r2, =_sbss
 8002da4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002da8:	2000090c 	.word	0x2000090c

08002dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dac:	e7fe      	b.n	8002dac <ADC_IRQHandler>
	...

08002db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002db4:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <HAL_Init+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0d      	ldr	r2, [pc, #52]	@ (8002df0 <HAL_Init+0x40>)
 8002dba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_Init+0x40>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <HAL_Init+0x40>)
 8002dc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dcc:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <HAL_Init+0x40>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a07      	ldr	r2, [pc, #28]	@ (8002df0 <HAL_Init+0x40>)
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd8:	2003      	movs	r0, #3
 8002dda:	f000 fed5 	bl	8003b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dde:	200f      	movs	r0, #15
 8002de0:	f000 f808 	bl	8002df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de4:	f7ff fd28 	bl	8002838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023c00 	.word	0x40023c00

08002df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dfc:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <HAL_InitTick+0x54>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <HAL_InitTick+0x58>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 feed 	bl	8003bf2 <HAL_SYSTICK_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00e      	b.n	8002e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b0f      	cmp	r3, #15
 8002e26:	d80a      	bhi.n	8002e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	f000 feb5 	bl	8003b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e34:	4a06      	ldr	r2, [pc, #24]	@ (8002e50 <HAL_InitTick+0x5c>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e000      	b.n	8002e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	20000008 	.word	0x20000008
 8002e50:	20000004 	.word	0x20000004

08002e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e58:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_IncTick+0x20>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <HAL_IncTick+0x24>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4413      	add	r3, r2
 8002e64:	4a04      	ldr	r2, [pc, #16]	@ (8002e78 <HAL_IncTick+0x24>)
 8002e66:	6013      	str	r3, [r2, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000008 	.word	0x20000008
 8002e78:	200007bc 	.word	0x200007bc

08002e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e80:	4b03      	ldr	r3, [pc, #12]	@ (8002e90 <HAL_GetTick+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	200007bc 	.word	0x200007bc

08002e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff ffee 	bl	8002e7c <HAL_GetTick>
 8002ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d005      	beq.n	8002eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <HAL_Delay+0x44>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eba:	bf00      	nop
 8002ebc:	f7ff ffde 	bl	8002e7c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d8f7      	bhi.n	8002ebc <HAL_Delay+0x28>
  {
  }
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000008 	.word	0x20000008

08002edc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0ed      	b.n	80030ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff fcc4 	bl	8002888 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f10:	f7ff ffb4 	bl	8002e7c <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f16:	e012      	b.n	8002f3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f18:	f7ff ffb0 	bl	8002e7c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b0a      	cmp	r3, #10
 8002f24:	d90b      	bls.n	8002f3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2205      	movs	r2, #5
 8002f36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0c5      	b.n	80030ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0e5      	beq.n	8002f18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0202 	bic.w	r2, r2, #2
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f5c:	f7ff ff8e 	bl	8002e7c <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f62:	e012      	b.n	8002f8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f64:	f7ff ff8a 	bl	8002e7c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b0a      	cmp	r3, #10
 8002f70:	d90b      	bls.n	8002f8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f76:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2205      	movs	r2, #5
 8002f82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e09f      	b.n	80030ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e5      	bne.n	8002f64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7e1b      	ldrb	r3, [r3, #24]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d108      	bne.n	8002fb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	e007      	b.n	8002fc2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	7e5b      	ldrb	r3, [r3, #25]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d108      	bne.n	8002fdc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e007      	b.n	8002fec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7e9b      	ldrb	r3, [r3, #26]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d108      	bne.n	8003006 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0220 	orr.w	r2, r2, #32
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e007      	b.n	8003016 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0220 	bic.w	r2, r2, #32
 8003014:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	7edb      	ldrb	r3, [r3, #27]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d108      	bne.n	8003030 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0210 	bic.w	r2, r2, #16
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e007      	b.n	8003040 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0210 	orr.w	r2, r2, #16
 800303e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7f1b      	ldrb	r3, [r3, #28]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d108      	bne.n	800305a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0208 	orr.w	r2, r2, #8
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e007      	b.n	800306a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0208 	bic.w	r2, r2, #8
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7f5b      	ldrb	r3, [r3, #29]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d108      	bne.n	8003084 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0204 	orr.w	r2, r2, #4
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e007      	b.n	8003094 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0204 	bic.w	r2, r2, #4
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	ea42 0103 	orr.w	r1, r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	1e5a      	subs	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d12e      	bne.n	8003144 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0201 	bic.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030fe:	f7ff febd 	bl	8002e7c <HAL_GetTick>
 8003102:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003104:	e012      	b.n	800312c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003106:	f7ff feb9 	bl	8002e7c <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b0a      	cmp	r3, #10
 8003112:	d90b      	bls.n	800312c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2205      	movs	r2, #5
 8003124:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e012      	b.n	8003152 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e5      	bne.n	8003106 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	e006      	b.n	8003152 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800315a:	b480      	push	{r7}
 800315c:	b089      	sub	sp, #36	@ 0x24
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800316e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003178:	7ffb      	ldrb	r3, [r7, #31]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d003      	beq.n	8003186 <HAL_CAN_AddTxMessage+0x2c>
 800317e:	7ffb      	ldrb	r3, [r7, #31]
 8003180:	2b02      	cmp	r3, #2
 8003182:	f040 80ad 	bne.w	80032e0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003196:	2b00      	cmp	r3, #0
 8003198:	d105      	bne.n	80031a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8095 	beq.w	80032d0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	0e1b      	lsrs	r3, r3, #24
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80031b0:	2201      	movs	r2, #1
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	409a      	lsls	r2, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10d      	bne.n	80031de <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031cc:	68f9      	ldr	r1, [r7, #12]
 80031ce:	6809      	ldr	r1, [r1, #0]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	3318      	adds	r3, #24
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	440b      	add	r3, r1
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e00f      	b.n	80031fe <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031e8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80031f2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	3318      	adds	r3, #24
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	440b      	add	r3, r1
 80031fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	3318      	adds	r3, #24
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	440b      	add	r3, r1
 800320e:	3304      	adds	r3, #4
 8003210:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	7d1b      	ldrb	r3, [r3, #20]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d111      	bne.n	800323e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	3318      	adds	r3, #24
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	4413      	add	r3, r2
 8003226:	3304      	adds	r3, #4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	6811      	ldr	r1, [r2, #0]
 800322e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	3318      	adds	r3, #24
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	440b      	add	r3, r1
 800323a:	3304      	adds	r3, #4
 800323c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3307      	adds	r3, #7
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	061a      	lsls	r2, r3, #24
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3306      	adds	r3, #6
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3305      	adds	r3, #5
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	4313      	orrs	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	3204      	adds	r2, #4
 800325e:	7812      	ldrb	r2, [r2, #0]
 8003260:	4610      	mov	r0, r2
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	6811      	ldr	r1, [r2, #0]
 8003266:	ea43 0200 	orr.w	r2, r3, r0
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	440b      	add	r3, r1
 8003270:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003274:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3303      	adds	r3, #3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	061a      	lsls	r2, r3, #24
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3302      	adds	r3, #2
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	041b      	lsls	r3, r3, #16
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3301      	adds	r3, #1
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	4313      	orrs	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	4610      	mov	r0, r2
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	6811      	ldr	r1, [r2, #0]
 800329c:	ea43 0200 	orr.w	r2, r3, r0
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	440b      	add	r3, r1
 80032a6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80032aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	3318      	adds	r3, #24
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	4413      	add	r3, r2
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	6811      	ldr	r1, [r2, #0]
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	3318      	adds	r3, #24
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	440b      	add	r3, r1
 80032ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e00e      	b.n	80032ee <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e006      	b.n	80032ee <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	@ 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80032fa:	b480      	push	{r7}
 80032fc:	b087      	sub	sp, #28
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800330e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d003      	beq.n	800331e <HAL_CAN_GetRxMessage+0x24>
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	2b02      	cmp	r3, #2
 800331a:	f040 8103 	bne.w	8003524 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10e      	bne.n	8003342 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d116      	bne.n	8003360 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0f7      	b.n	8003532 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d107      	bne.n	8003360 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0e8      	b.n	8003532 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	331b      	adds	r3, #27
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	4413      	add	r3, r2
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0204 	and.w	r2, r3, #4
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10c      	bne.n	8003398 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	331b      	adds	r3, #27
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	4413      	add	r3, r2
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	0d5b      	lsrs	r3, r3, #21
 800338e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e00b      	b.n	80033b0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	331b      	adds	r3, #27
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	4413      	add	r3, r2
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	08db      	lsrs	r3, r3, #3
 80033a8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	331b      	adds	r3, #27
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	4413      	add	r3, r2
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0202 	and.w	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	331b      	adds	r3, #27
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	4413      	add	r3, r2
 80033d2:	3304      	adds	r3, #4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2208      	movs	r2, #8
 80033e2:	611a      	str	r2, [r3, #16]
 80033e4:	e00b      	b.n	80033fe <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	331b      	adds	r3, #27
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	4413      	add	r3, r2
 80033f2:	3304      	adds	r3, #4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 020f 	and.w	r2, r3, #15
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	331b      	adds	r3, #27
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	4413      	add	r3, r2
 800340a:	3304      	adds	r3, #4
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	b2da      	uxtb	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	331b      	adds	r3, #27
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	4413      	add	r3, r2
 8003422:	3304      	adds	r3, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	b29a      	uxth	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	4413      	add	r3, r2
 8003438:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	4413      	add	r3, r2
 800344e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	0a1a      	lsrs	r2, r3, #8
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	4413      	add	r3, r2
 8003468:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	0c1a      	lsrs	r2, r3, #16
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	3302      	adds	r3, #2
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	4413      	add	r3, r2
 8003482:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	0e1a      	lsrs	r2, r3, #24
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	3303      	adds	r3, #3
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	4413      	add	r3, r2
 800349c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	3304      	adds	r3, #4
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	0a1a      	lsrs	r2, r3, #8
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	3305      	adds	r3, #5
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	0c1a      	lsrs	r2, r3, #16
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	3306      	adds	r3, #6
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	0e1a      	lsrs	r2, r3, #24
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	3307      	adds	r3, #7
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d108      	bne.n	8003510 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0220 	orr.w	r2, r2, #32
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	e007      	b.n	8003520 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0220 	orr.w	r2, r2, #32
 800351e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e006      	b.n	8003532 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
  }
}
 8003532:	4618      	mov	r0, r3
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800353e:	b480      	push	{r7}
 8003540:	b085      	sub	sp, #20
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800354e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d002      	beq.n	800355c <HAL_CAN_ActivateNotification+0x1e>
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d109      	bne.n	8003570 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6959      	ldr	r1, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e006      	b.n	800357e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
  }
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b08a      	sub	sp, #40	@ 0x28
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003592:	2300      	movs	r3, #0
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d07c      	beq.n	80036ca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d023      	beq.n	8003622 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2201      	movs	r2, #1
 80035e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f983 	bl	80038f8 <HAL_CAN_TxMailbox0CompleteCallback>
 80035f2:	e016      	b.n	8003622 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d004      	beq.n	8003608 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
 8003606:	e00c      	b.n	8003622 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003614:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
 800361a:	e002      	b.n	8003622 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f989 	bl	8003934 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d024      	beq.n	8003676 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003634:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f963 	bl	800390c <HAL_CAN_TxMailbox1CompleteCallback>
 8003646:	e016      	b.n	8003676 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364e:	2b00      	cmp	r3, #0
 8003650:	d004      	beq.n	800365c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
 800365a:	e00c      	b.n	8003676 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003662:	2b00      	cmp	r3, #0
 8003664:	d004      	beq.n	8003670 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800366c:	627b      	str	r3, [r7, #36]	@ 0x24
 800366e:	e002      	b.n	8003676 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f969 	bl	8003948 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d024      	beq.n	80036ca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003688:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f943 	bl	8003920 <HAL_CAN_TxMailbox2CompleteCallback>
 800369a:	e016      	b.n	80036ca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ae:	e00c      	b.n	80036ca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d004      	beq.n	80036c4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c2:	e002      	b.n	80036ca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f949 	bl	800395c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2210      	movs	r2, #16
 80036ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00b      	beq.n	8003710 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d006      	beq.n	8003710 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2208      	movs	r2, #8
 8003708:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f930 	bl	8003970 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7fd fc91 	bl	8001050 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00c      	beq.n	8003752 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2210      	movs	r2, #16
 8003750:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00b      	beq.n	8003774 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d006      	beq.n	8003774 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2208      	movs	r2, #8
 800376c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f912 	bl	8003998 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f8f9 	bl	8003984 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d006      	beq.n	80037b4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2210      	movs	r2, #16
 80037ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8fc 	bl	80039ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d006      	beq.n	80037d6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2208      	movs	r2, #8
 80037ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f8f5 	bl	80039c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d07b      	beq.n	80038d8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d072      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	f043 0302 	orr.w	r3, r3, #2
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003844:	2b00      	cmp	r3, #0
 8003846:	d043      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800384e:	2b00      	cmp	r3, #0
 8003850:	d03e      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003858:	2b60      	cmp	r3, #96	@ 0x60
 800385a:	d02b      	beq.n	80038b4 <HAL_CAN_IRQHandler+0x32a>
 800385c:	2b60      	cmp	r3, #96	@ 0x60
 800385e:	d82e      	bhi.n	80038be <HAL_CAN_IRQHandler+0x334>
 8003860:	2b50      	cmp	r3, #80	@ 0x50
 8003862:	d022      	beq.n	80038aa <HAL_CAN_IRQHandler+0x320>
 8003864:	2b50      	cmp	r3, #80	@ 0x50
 8003866:	d82a      	bhi.n	80038be <HAL_CAN_IRQHandler+0x334>
 8003868:	2b40      	cmp	r3, #64	@ 0x40
 800386a:	d019      	beq.n	80038a0 <HAL_CAN_IRQHandler+0x316>
 800386c:	2b40      	cmp	r3, #64	@ 0x40
 800386e:	d826      	bhi.n	80038be <HAL_CAN_IRQHandler+0x334>
 8003870:	2b30      	cmp	r3, #48	@ 0x30
 8003872:	d010      	beq.n	8003896 <HAL_CAN_IRQHandler+0x30c>
 8003874:	2b30      	cmp	r3, #48	@ 0x30
 8003876:	d822      	bhi.n	80038be <HAL_CAN_IRQHandler+0x334>
 8003878:	2b10      	cmp	r3, #16
 800387a:	d002      	beq.n	8003882 <HAL_CAN_IRQHandler+0x2f8>
 800387c:	2b20      	cmp	r3, #32
 800387e:	d005      	beq.n	800388c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003880:	e01d      	b.n	80038be <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	f043 0308 	orr.w	r3, r3, #8
 8003888:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800388a:	e019      	b.n	80038c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388e:	f043 0310 	orr.w	r3, r3, #16
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003894:	e014      	b.n	80038c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	f043 0320 	orr.w	r3, r3, #32
 800389c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800389e:	e00f      	b.n	80038c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80038a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80038a8:	e00a      	b.n	80038c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80038b2:	e005      	b.n	80038c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80038bc:	e000      	b.n	80038c0 <HAL_CAN_IRQHandler+0x336>
            break;
 80038be:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80038ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2204      	movs	r2, #4
 80038d6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d008      	beq.n	80038f0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f872 	bl	80039d4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80038f0:	bf00      	nop
 80038f2:	3728      	adds	r7, #40	@ 0x28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039f8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a2c <__NVIC_SetPriorityGrouping+0x44>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a04:	4013      	ands	r3, r2
 8003a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a1a:	4a04      	ldr	r2, [pc, #16]	@ (8003a2c <__NVIC_SetPriorityGrouping+0x44>)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	60d3      	str	r3, [r2, #12]
}
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a34:	4b04      	ldr	r3, [pc, #16]	@ (8003a48 <__NVIC_GetPriorityGrouping+0x18>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	f003 0307 	and.w	r3, r3, #7
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	db0b      	blt.n	8003a76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	f003 021f 	and.w	r2, r3, #31
 8003a64:	4907      	ldr	r1, [pc, #28]	@ (8003a84 <__NVIC_EnableIRQ+0x38>)
 8003a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	e000e100 	.word	0xe000e100

08003a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	6039      	str	r1, [r7, #0]
 8003a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	db0a      	blt.n	8003ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	490c      	ldr	r1, [pc, #48]	@ (8003ad4 <__NVIC_SetPriority+0x4c>)
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	0112      	lsls	r2, r2, #4
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	440b      	add	r3, r1
 8003aac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ab0:	e00a      	b.n	8003ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4908      	ldr	r1, [pc, #32]	@ (8003ad8 <__NVIC_SetPriority+0x50>)
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	3b04      	subs	r3, #4
 8003ac0:	0112      	lsls	r2, r2, #4
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	761a      	strb	r2, [r3, #24]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	e000e100 	.word	0xe000e100
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b089      	sub	sp, #36	@ 0x24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f1c3 0307 	rsb	r3, r3, #7
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	bf28      	it	cs
 8003afa:	2304      	movcs	r3, #4
 8003afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3304      	adds	r3, #4
 8003b02:	2b06      	cmp	r3, #6
 8003b04:	d902      	bls.n	8003b0c <NVIC_EncodePriority+0x30>
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	3b03      	subs	r3, #3
 8003b0a:	e000      	b.n	8003b0e <NVIC_EncodePriority+0x32>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b10:	f04f 32ff 	mov.w	r2, #4294967295
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	401a      	ands	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b24:	f04f 31ff 	mov.w	r1, #4294967295
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2e:	43d9      	mvns	r1, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b34:	4313      	orrs	r3, r2
         );
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3724      	adds	r7, #36	@ 0x24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b54:	d301      	bcc.n	8003b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b56:	2301      	movs	r3, #1
 8003b58:	e00f      	b.n	8003b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b84 <SysTick_Config+0x40>)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b62:	210f      	movs	r1, #15
 8003b64:	f04f 30ff 	mov.w	r0, #4294967295
 8003b68:	f7ff ff8e 	bl	8003a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b6c:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <SysTick_Config+0x40>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b72:	4b04      	ldr	r3, [pc, #16]	@ (8003b84 <SysTick_Config+0x40>)
 8003b74:	2207      	movs	r2, #7
 8003b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	e000e010 	.word	0xe000e010

08003b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ff29 	bl	80039e8 <__NVIC_SetPriorityGrouping>
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b086      	sub	sp, #24
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bb0:	f7ff ff3e 	bl	8003a30 <__NVIC_GetPriorityGrouping>
 8003bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	6978      	ldr	r0, [r7, #20]
 8003bbc:	f7ff ff8e 	bl	8003adc <NVIC_EncodePriority>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff5d 	bl	8003a88 <__NVIC_SetPriority>
}
 8003bce:	bf00      	nop
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	4603      	mov	r3, r0
 8003bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff31 	bl	8003a4c <__NVIC_EnableIRQ>
}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff ffa2 	bl	8003b44 <SysTick_Config>
 8003c00:	4603      	mov	r3, r0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c18:	f7ff f930 	bl	8002e7c <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e099      	b.n	8003d5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c48:	e00f      	b.n	8003c6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c4a:	f7ff f917 	bl	8002e7c <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d908      	bls.n	8003c6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2203      	movs	r2, #3
 8003c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e078      	b.n	8003d5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e8      	bne.n	8003c4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4b38      	ldr	r3, [pc, #224]	@ (8003d64 <HAL_DMA_Init+0x158>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d107      	bne.n	8003cd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f023 0307 	bic.w	r3, r3, #7
 8003cea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d117      	bne.n	8003d2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fb01 	bl	8004318 <DMA_CheckFifoParam>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2240      	movs	r2, #64	@ 0x40
 8003d20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e016      	b.n	8003d5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fab8 	bl	80042ac <DMA_CalcBaseAndBitshift>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d44:	223f      	movs	r2, #63	@ 0x3f
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	f010803f 	.word	0xf010803f

08003d68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_DMA_Start_IT+0x26>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e040      	b.n	8003e10 <HAL_DMA_Start_IT+0xa8>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d12f      	bne.n	8003e02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2202      	movs	r2, #2
 8003da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fa4a 	bl	8004250 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc0:	223f      	movs	r2, #63	@ 0x3f
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0216 	orr.w	r2, r2, #22
 8003dd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0208 	orr.w	r2, r2, #8
 8003dee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e005      	b.n	8003e0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e26:	f7ff f829 	bl	8002e7c <HAL_GetTick>
 8003e2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d008      	beq.n	8003e4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2280      	movs	r2, #128	@ 0x80
 8003e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e052      	b.n	8003ef0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0216 	bic.w	r2, r2, #22
 8003e58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d103      	bne.n	8003e7a <HAL_DMA_Abort+0x62>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0208 	bic.w	r2, r2, #8
 8003e88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e9a:	e013      	b.n	8003ec4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e9c:	f7fe ffee 	bl	8002e7c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	d90c      	bls.n	8003ec4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e015      	b.n	8003ef0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e4      	bne.n	8003e9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed6:	223f      	movs	r2, #63	@ 0x3f
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d004      	beq.n	8003f16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2280      	movs	r2, #128	@ 0x80
 8003f10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e00c      	b.n	8003f30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2205      	movs	r2, #5
 8003f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f48:	4b8e      	ldr	r3, [pc, #568]	@ (8004184 <HAL_DMA_IRQHandler+0x248>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a8e      	ldr	r2, [pc, #568]	@ (8004188 <HAL_DMA_IRQHandler+0x24c>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	0a9b      	lsrs	r3, r3, #10
 8003f54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f66:	2208      	movs	r2, #8
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01a      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d013      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0204 	bic.w	r2, r2, #4
 8003f8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f94:	2208      	movs	r2, #8
 8003f96:	409a      	lsls	r2, r3
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa0:	f043 0201 	orr.w	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fac:	2201      	movs	r2, #1
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d012      	beq.n	8003fde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fca:	2201      	movs	r2, #1
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd6:	f043 0202 	orr.w	r2, r3, #2
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d012      	beq.n	8004014 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00b      	beq.n	8004014 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004000:	2204      	movs	r2, #4
 8004002:	409a      	lsls	r2, r3
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400c:	f043 0204 	orr.w	r2, r3, #4
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004018:	2210      	movs	r2, #16
 800401a:	409a      	lsls	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4013      	ands	r3, r2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d043      	beq.n	80040ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d03c      	beq.n	80040ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004036:	2210      	movs	r2, #16
 8004038:	409a      	lsls	r2, r3
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d018      	beq.n	800407e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d108      	bne.n	800406c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d024      	beq.n	80040ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
 800406a:	e01f      	b.n	80040ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01b      	beq.n	80040ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
 800407c:	e016      	b.n	80040ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d107      	bne.n	800409c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0208 	bic.w	r2, r2, #8
 800409a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b0:	2220      	movs	r2, #32
 80040b2:	409a      	lsls	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 808f 	beq.w	80041dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8087 	beq.w	80041dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d2:	2220      	movs	r2, #32
 80040d4:	409a      	lsls	r2, r3
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b05      	cmp	r3, #5
 80040e4:	d136      	bne.n	8004154 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0216 	bic.w	r2, r2, #22
 80040f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004104:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d103      	bne.n	8004116 <HAL_DMA_IRQHandler+0x1da>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0208 	bic.w	r2, r2, #8
 8004124:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412a:	223f      	movs	r2, #63	@ 0x3f
 800412c:	409a      	lsls	r2, r3
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004146:	2b00      	cmp	r3, #0
 8004148:	d07e      	beq.n	8004248 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	4798      	blx	r3
        }
        return;
 8004152:	e079      	b.n	8004248 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d01d      	beq.n	800419e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10d      	bne.n	800418c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004174:	2b00      	cmp	r3, #0
 8004176:	d031      	beq.n	80041dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	4798      	blx	r3
 8004180:	e02c      	b.n	80041dc <HAL_DMA_IRQHandler+0x2a0>
 8004182:	bf00      	nop
 8004184:	20000000 	.word	0x20000000
 8004188:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d023      	beq.n	80041dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	4798      	blx	r3
 800419c:	e01e      	b.n	80041dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10f      	bne.n	80041cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0210 	bic.w	r2, r2, #16
 80041ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d032      	beq.n	800424a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d022      	beq.n	8004236 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2205      	movs	r2, #5
 80041f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0201 	bic.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	3301      	adds	r3, #1
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	429a      	cmp	r2, r3
 8004212:	d307      	bcc.n	8004224 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f2      	bne.n	8004208 <HAL_DMA_IRQHandler+0x2cc>
 8004222:	e000      	b.n	8004226 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004224:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	4798      	blx	r3
 8004246:	e000      	b.n	800424a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004248:	bf00      	nop
    }
  }
}
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800426c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b40      	cmp	r3, #64	@ 0x40
 800427c:	d108      	bne.n	8004290 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800428e:	e007      	b.n	80042a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	60da      	str	r2, [r3, #12]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	3b10      	subs	r3, #16
 80042bc:	4a14      	ldr	r2, [pc, #80]	@ (8004310 <DMA_CalcBaseAndBitshift+0x64>)
 80042be:	fba2 2303 	umull	r2, r3, r2, r3
 80042c2:	091b      	lsrs	r3, r3, #4
 80042c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042c6:	4a13      	ldr	r2, [pc, #76]	@ (8004314 <DMA_CalcBaseAndBitshift+0x68>)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d909      	bls.n	80042ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80042e2:	f023 0303 	bic.w	r3, r3, #3
 80042e6:	1d1a      	adds	r2, r3, #4
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80042ec:	e007      	b.n	80042fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	aaaaaaab 	.word	0xaaaaaaab
 8004314:	0800a584 	.word	0x0800a584

08004318 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004328:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d11f      	bne.n	8004372 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d856      	bhi.n	80043e6 <DMA_CheckFifoParam+0xce>
 8004338:	a201      	add	r2, pc, #4	@ (adr r2, 8004340 <DMA_CheckFifoParam+0x28>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004351 	.word	0x08004351
 8004344:	08004363 	.word	0x08004363
 8004348:	08004351 	.word	0x08004351
 800434c:	080043e7 	.word	0x080043e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004354:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d046      	beq.n	80043ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004360:	e043      	b.n	80043ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004366:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800436a:	d140      	bne.n	80043ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004370:	e03d      	b.n	80043ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800437a:	d121      	bne.n	80043c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b03      	cmp	r3, #3
 8004380:	d837      	bhi.n	80043f2 <DMA_CheckFifoParam+0xda>
 8004382:	a201      	add	r2, pc, #4	@ (adr r2, 8004388 <DMA_CheckFifoParam+0x70>)
 8004384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004388:	08004399 	.word	0x08004399
 800438c:	0800439f 	.word	0x0800439f
 8004390:	08004399 	.word	0x08004399
 8004394:	080043b1 	.word	0x080043b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
      break;
 800439c:	e030      	b.n	8004400 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d025      	beq.n	80043f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ae:	e022      	b.n	80043f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043b8:	d11f      	bne.n	80043fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043be:	e01c      	b.n	80043fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d903      	bls.n	80043ce <DMA_CheckFifoParam+0xb6>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d003      	beq.n	80043d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043cc:	e018      	b.n	8004400 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
      break;
 80043d2:	e015      	b.n	8004400 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00e      	beq.n	80043fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
      break;
 80043e4:	e00b      	b.n	80043fe <DMA_CheckFifoParam+0xe6>
      break;
 80043e6:	bf00      	nop
 80043e8:	e00a      	b.n	8004400 <DMA_CheckFifoParam+0xe8>
      break;
 80043ea:	bf00      	nop
 80043ec:	e008      	b.n	8004400 <DMA_CheckFifoParam+0xe8>
      break;
 80043ee:	bf00      	nop
 80043f0:	e006      	b.n	8004400 <DMA_CheckFifoParam+0xe8>
      break;
 80043f2:	bf00      	nop
 80043f4:	e004      	b.n	8004400 <DMA_CheckFifoParam+0xe8>
      break;
 80043f6:	bf00      	nop
 80043f8:	e002      	b.n	8004400 <DMA_CheckFifoParam+0xe8>
      break;   
 80043fa:	bf00      	nop
 80043fc:	e000      	b.n	8004400 <DMA_CheckFifoParam+0xe8>
      break;
 80043fe:	bf00      	nop
    }
  } 
  
  return status; 
 8004400:	7bfb      	ldrb	r3, [r7, #15]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop

08004410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004410:	b480      	push	{r7}
 8004412:	b089      	sub	sp, #36	@ 0x24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800441e:	2300      	movs	r3, #0
 8004420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004422:	2300      	movs	r3, #0
 8004424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	e16b      	b.n	8004704 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800442c:	2201      	movs	r2, #1
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	429a      	cmp	r2, r3
 8004446:	f040 815a 	bne.w	80046fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	2b01      	cmp	r3, #1
 8004454:	d005      	beq.n	8004462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800445e:	2b02      	cmp	r3, #2
 8004460:	d130      	bne.n	80044c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	2203      	movs	r2, #3
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	43db      	mvns	r3, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4013      	ands	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004498:	2201      	movs	r2, #1
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4013      	ands	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	091b      	lsrs	r3, r3, #4
 80044ae:	f003 0201 	and.w	r2, r3, #1
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d017      	beq.n	8004500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	2203      	movs	r2, #3
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4013      	ands	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d123      	bne.n	8004554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	08da      	lsrs	r2, r3, #3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3208      	adds	r2, #8
 8004514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	220f      	movs	r2, #15
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	08da      	lsrs	r2, r3, #3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3208      	adds	r2, #8
 800454e:	69b9      	ldr	r1, [r7, #24]
 8004550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	2203      	movs	r2, #3
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 0203 	and.w	r2, r3, #3
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80b4 	beq.w	80046fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	4b60      	ldr	r3, [pc, #384]	@ (800471c <HAL_GPIO_Init+0x30c>)
 800459c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459e:	4a5f      	ldr	r2, [pc, #380]	@ (800471c <HAL_GPIO_Init+0x30c>)
 80045a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80045a6:	4b5d      	ldr	r3, [pc, #372]	@ (800471c <HAL_GPIO_Init+0x30c>)
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004720 <HAL_GPIO_Init+0x310>)
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	089b      	lsrs	r3, r3, #2
 80045b8:	3302      	adds	r3, #2
 80045ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	220f      	movs	r2, #15
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4013      	ands	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a52      	ldr	r2, [pc, #328]	@ (8004724 <HAL_GPIO_Init+0x314>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d02b      	beq.n	8004636 <HAL_GPIO_Init+0x226>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a51      	ldr	r2, [pc, #324]	@ (8004728 <HAL_GPIO_Init+0x318>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d025      	beq.n	8004632 <HAL_GPIO_Init+0x222>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a50      	ldr	r2, [pc, #320]	@ (800472c <HAL_GPIO_Init+0x31c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01f      	beq.n	800462e <HAL_GPIO_Init+0x21e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a4f      	ldr	r2, [pc, #316]	@ (8004730 <HAL_GPIO_Init+0x320>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d019      	beq.n	800462a <HAL_GPIO_Init+0x21a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a4e      	ldr	r2, [pc, #312]	@ (8004734 <HAL_GPIO_Init+0x324>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <HAL_GPIO_Init+0x216>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a4d      	ldr	r2, [pc, #308]	@ (8004738 <HAL_GPIO_Init+0x328>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00d      	beq.n	8004622 <HAL_GPIO_Init+0x212>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a4c      	ldr	r2, [pc, #304]	@ (800473c <HAL_GPIO_Init+0x32c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d007      	beq.n	800461e <HAL_GPIO_Init+0x20e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a4b      	ldr	r2, [pc, #300]	@ (8004740 <HAL_GPIO_Init+0x330>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d101      	bne.n	800461a <HAL_GPIO_Init+0x20a>
 8004616:	2307      	movs	r3, #7
 8004618:	e00e      	b.n	8004638 <HAL_GPIO_Init+0x228>
 800461a:	2308      	movs	r3, #8
 800461c:	e00c      	b.n	8004638 <HAL_GPIO_Init+0x228>
 800461e:	2306      	movs	r3, #6
 8004620:	e00a      	b.n	8004638 <HAL_GPIO_Init+0x228>
 8004622:	2305      	movs	r3, #5
 8004624:	e008      	b.n	8004638 <HAL_GPIO_Init+0x228>
 8004626:	2304      	movs	r3, #4
 8004628:	e006      	b.n	8004638 <HAL_GPIO_Init+0x228>
 800462a:	2303      	movs	r3, #3
 800462c:	e004      	b.n	8004638 <HAL_GPIO_Init+0x228>
 800462e:	2302      	movs	r3, #2
 8004630:	e002      	b.n	8004638 <HAL_GPIO_Init+0x228>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <HAL_GPIO_Init+0x228>
 8004636:	2300      	movs	r3, #0
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	f002 0203 	and.w	r2, r2, #3
 800463e:	0092      	lsls	r2, r2, #2
 8004640:	4093      	lsls	r3, r2
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004648:	4935      	ldr	r1, [pc, #212]	@ (8004720 <HAL_GPIO_Init+0x310>)
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	089b      	lsrs	r3, r3, #2
 800464e:	3302      	adds	r3, #2
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004656:	4b3b      	ldr	r3, [pc, #236]	@ (8004744 <HAL_GPIO_Init+0x334>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	43db      	mvns	r3, r3
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	4013      	ands	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800467a:	4a32      	ldr	r2, [pc, #200]	@ (8004744 <HAL_GPIO_Init+0x334>)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004680:	4b30      	ldr	r3, [pc, #192]	@ (8004744 <HAL_GPIO_Init+0x334>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	43db      	mvns	r3, r3
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4013      	ands	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046a4:	4a27      	ldr	r2, [pc, #156]	@ (8004744 <HAL_GPIO_Init+0x334>)
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046aa:	4b26      	ldr	r3, [pc, #152]	@ (8004744 <HAL_GPIO_Init+0x334>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	43db      	mvns	r3, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4013      	ands	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004744 <HAL_GPIO_Init+0x334>)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004744 <HAL_GPIO_Init+0x334>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	43db      	mvns	r3, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046f8:	4a12      	ldr	r2, [pc, #72]	@ (8004744 <HAL_GPIO_Init+0x334>)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	3301      	adds	r3, #1
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	2b0f      	cmp	r3, #15
 8004708:	f67f ae90 	bls.w	800442c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	3724      	adds	r7, #36	@ 0x24
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800
 8004720:	40013800 	.word	0x40013800
 8004724:	40020000 	.word	0x40020000
 8004728:	40020400 	.word	0x40020400
 800472c:	40020800 	.word	0x40020800
 8004730:	40020c00 	.word	0x40020c00
 8004734:	40021000 	.word	0x40021000
 8004738:	40021400 	.word	0x40021400
 800473c:	40021800 	.word	0x40021800
 8004740:	40021c00 	.word	0x40021c00
 8004744:	40013c00 	.word	0x40013c00

08004748 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e267      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d075      	beq.n	8004852 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004766:	4b88      	ldr	r3, [pc, #544]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 030c 	and.w	r3, r3, #12
 800476e:	2b04      	cmp	r3, #4
 8004770:	d00c      	beq.n	800478c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004772:	4b85      	ldr	r3, [pc, #532]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800477a:	2b08      	cmp	r3, #8
 800477c:	d112      	bne.n	80047a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800477e:	4b82      	ldr	r3, [pc, #520]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004786:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800478a:	d10b      	bne.n	80047a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800478c:	4b7e      	ldr	r3, [pc, #504]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d05b      	beq.n	8004850 <HAL_RCC_OscConfig+0x108>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d157      	bne.n	8004850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e242      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ac:	d106      	bne.n	80047bc <HAL_RCC_OscConfig+0x74>
 80047ae:	4b76      	ldr	r3, [pc, #472]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a75      	ldr	r2, [pc, #468]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 80047b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e01d      	b.n	80047f8 <HAL_RCC_OscConfig+0xb0>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x98>
 80047c6:	4b70      	ldr	r3, [pc, #448]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a6f      	ldr	r2, [pc, #444]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 80047cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a6c      	ldr	r2, [pc, #432]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 80047d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	e00b      	b.n	80047f8 <HAL_RCC_OscConfig+0xb0>
 80047e0:	4b69      	ldr	r3, [pc, #420]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a68      	ldr	r2, [pc, #416]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 80047e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	4b66      	ldr	r3, [pc, #408]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a65      	ldr	r2, [pc, #404]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 80047f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d013      	beq.n	8004828 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004800:	f7fe fb3c 	bl	8002e7c <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004808:	f7fe fb38 	bl	8002e7c <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	@ 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e207      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481a:	4b5b      	ldr	r3, [pc, #364]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0xc0>
 8004826:	e014      	b.n	8004852 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004828:	f7fe fb28 	bl	8002e7c <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004830:	f7fe fb24 	bl	8002e7c <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b64      	cmp	r3, #100	@ 0x64
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e1f3      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004842:	4b51      	ldr	r3, [pc, #324]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0xe8>
 800484e:	e000      	b.n	8004852 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d063      	beq.n	8004926 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800485e:	4b4a      	ldr	r3, [pc, #296]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00b      	beq.n	8004882 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800486a:	4b47      	ldr	r3, [pc, #284]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004872:	2b08      	cmp	r3, #8
 8004874:	d11c      	bne.n	80048b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004876:	4b44      	ldr	r3, [pc, #272]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d116      	bne.n	80048b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004882:	4b41      	ldr	r3, [pc, #260]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_RCC_OscConfig+0x152>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d001      	beq.n	800489a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e1c7      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489a:	4b3b      	ldr	r3, [pc, #236]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4937      	ldr	r1, [pc, #220]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ae:	e03a      	b.n	8004926 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d020      	beq.n	80048fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048b8:	4b34      	ldr	r3, [pc, #208]	@ (800498c <HAL_RCC_OscConfig+0x244>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048be:	f7fe fadd 	bl	8002e7c <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048c6:	f7fe fad9 	bl	8002e7c <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e1a8      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e4:	4b28      	ldr	r3, [pc, #160]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4925      	ldr	r1, [pc, #148]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	600b      	str	r3, [r1, #0]
 80048f8:	e015      	b.n	8004926 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048fa:	4b24      	ldr	r3, [pc, #144]	@ (800498c <HAL_RCC_OscConfig+0x244>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004900:	f7fe fabc 	bl	8002e7c <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004908:	f7fe fab8 	bl	8002e7c <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e187      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800491a:	4b1b      	ldr	r3, [pc, #108]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f0      	bne.n	8004908 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d036      	beq.n	80049a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d016      	beq.n	8004968 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800493a:	4b15      	ldr	r3, [pc, #84]	@ (8004990 <HAL_RCC_OscConfig+0x248>)
 800493c:	2201      	movs	r2, #1
 800493e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004940:	f7fe fa9c 	bl	8002e7c <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004948:	f7fe fa98 	bl	8002e7c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e167      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495a:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <HAL_RCC_OscConfig+0x240>)
 800495c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0f0      	beq.n	8004948 <HAL_RCC_OscConfig+0x200>
 8004966:	e01b      	b.n	80049a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004968:	4b09      	ldr	r3, [pc, #36]	@ (8004990 <HAL_RCC_OscConfig+0x248>)
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800496e:	f7fe fa85 	bl	8002e7c <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004974:	e00e      	b.n	8004994 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004976:	f7fe fa81 	bl	8002e7c <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d907      	bls.n	8004994 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e150      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
 8004988:	40023800 	.word	0x40023800
 800498c:	42470000 	.word	0x42470000
 8004990:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004994:	4b88      	ldr	r3, [pc, #544]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1ea      	bne.n	8004976 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8097 	beq.w	8004adc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ae:	2300      	movs	r3, #0
 80049b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049b2:	4b81      	ldr	r3, [pc, #516]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10f      	bne.n	80049de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	4b7d      	ldr	r3, [pc, #500]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	4a7c      	ldr	r2, [pc, #496]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 80049c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80049ce:	4b7a      	ldr	r3, [pc, #488]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d6:	60bb      	str	r3, [r7, #8]
 80049d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049da:	2301      	movs	r3, #1
 80049dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049de:	4b77      	ldr	r3, [pc, #476]	@ (8004bbc <HAL_RCC_OscConfig+0x474>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d118      	bne.n	8004a1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ea:	4b74      	ldr	r3, [pc, #464]	@ (8004bbc <HAL_RCC_OscConfig+0x474>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a73      	ldr	r2, [pc, #460]	@ (8004bbc <HAL_RCC_OscConfig+0x474>)
 80049f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049f6:	f7fe fa41 	bl	8002e7c <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049fe:	f7fe fa3d 	bl	8002e7c <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e10c      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a10:	4b6a      	ldr	r3, [pc, #424]	@ (8004bbc <HAL_RCC_OscConfig+0x474>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d106      	bne.n	8004a32 <HAL_RCC_OscConfig+0x2ea>
 8004a24:	4b64      	ldr	r3, [pc, #400]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a28:	4a63      	ldr	r2, [pc, #396]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a30:	e01c      	b.n	8004a6c <HAL_RCC_OscConfig+0x324>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b05      	cmp	r3, #5
 8004a38:	d10c      	bne.n	8004a54 <HAL_RCC_OscConfig+0x30c>
 8004a3a:	4b5f      	ldr	r3, [pc, #380]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3e:	4a5e      	ldr	r2, [pc, #376]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004a40:	f043 0304 	orr.w	r3, r3, #4
 8004a44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a46:	4b5c      	ldr	r3, [pc, #368]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4a:	4a5b      	ldr	r2, [pc, #364]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a52:	e00b      	b.n	8004a6c <HAL_RCC_OscConfig+0x324>
 8004a54:	4b58      	ldr	r3, [pc, #352]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a58:	4a57      	ldr	r2, [pc, #348]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a60:	4b55      	ldr	r3, [pc, #340]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a64:	4a54      	ldr	r2, [pc, #336]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004a66:	f023 0304 	bic.w	r3, r3, #4
 8004a6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d015      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a74:	f7fe fa02 	bl	8002e7c <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a7c:	f7fe f9fe 	bl	8002e7c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e0cb      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a92:	4b49      	ldr	r3, [pc, #292]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0ee      	beq.n	8004a7c <HAL_RCC_OscConfig+0x334>
 8004a9e:	e014      	b.n	8004aca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa0:	f7fe f9ec 	bl	8002e7c <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aa8:	f7fe f9e8 	bl	8002e7c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e0b5      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004abe:	4b3e      	ldr	r3, [pc, #248]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1ee      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d105      	bne.n	8004adc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ad0:	4b39      	ldr	r3, [pc, #228]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad4:	4a38      	ldr	r2, [pc, #224]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004ad6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ada:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80a1 	beq.w	8004c28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ae6:	4b34      	ldr	r3, [pc, #208]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d05c      	beq.n	8004bac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d141      	bne.n	8004b7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004afa:	4b31      	ldr	r3, [pc, #196]	@ (8004bc0 <HAL_RCC_OscConfig+0x478>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b00:	f7fe f9bc 	bl	8002e7c <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b08:	f7fe f9b8 	bl	8002e7c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e087      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1a:	4b27      	ldr	r3, [pc, #156]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69da      	ldr	r2, [r3, #28]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	019b      	lsls	r3, r3, #6
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3c:	085b      	lsrs	r3, r3, #1
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	041b      	lsls	r3, r3, #16
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b48:	061b      	lsls	r3, r3, #24
 8004b4a:	491b      	ldr	r1, [pc, #108]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b50:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc0 <HAL_RCC_OscConfig+0x478>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b56:	f7fe f991 	bl	8002e7c <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b5e:	f7fe f98d 	bl	8002e7c <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e05c      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b70:	4b11      	ldr	r3, [pc, #68]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x416>
 8004b7c:	e054      	b.n	8004c28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7e:	4b10      	ldr	r3, [pc, #64]	@ (8004bc0 <HAL_RCC_OscConfig+0x478>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7fe f97a 	bl	8002e7c <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b8c:	f7fe f976 	bl	8002e7c <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e045      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b9e:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f0      	bne.n	8004b8c <HAL_RCC_OscConfig+0x444>
 8004baa:	e03d      	b.n	8004c28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d107      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e038      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	40007000 	.word	0x40007000
 8004bc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c34 <HAL_RCC_OscConfig+0x4ec>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d028      	beq.n	8004c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d121      	bne.n	8004c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d11a      	bne.n	8004c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d111      	bne.n	8004c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0a:	085b      	lsrs	r3, r3, #1
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d107      	bne.n	8004c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40023800 	.word	0x40023800

08004c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0cc      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c4c:	4b68      	ldr	r3, [pc, #416]	@ (8004df0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d90c      	bls.n	8004c74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5a:	4b65      	ldr	r3, [pc, #404]	@ (8004df0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c62:	4b63      	ldr	r3, [pc, #396]	@ (8004df0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0b8      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d020      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c8c:	4b59      	ldr	r3, [pc, #356]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	4a58      	ldr	r2, [pc, #352]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ca4:	4b53      	ldr	r3, [pc, #332]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4a52      	ldr	r2, [pc, #328]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004cae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb0:	4b50      	ldr	r3, [pc, #320]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	494d      	ldr	r1, [pc, #308]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d044      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d107      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd6:	4b47      	ldr	r3, [pc, #284]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d119      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e07f      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d003      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d107      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d109      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e06f      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d06:	4b3b      	ldr	r3, [pc, #236]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e067      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d16:	4b37      	ldr	r3, [pc, #220]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f023 0203 	bic.w	r2, r3, #3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	4934      	ldr	r1, [pc, #208]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d28:	f7fe f8a8 	bl	8002e7c <HAL_GetTick>
 8004d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2e:	e00a      	b.n	8004d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d30:	f7fe f8a4 	bl	8002e7c <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e04f      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d46:	4b2b      	ldr	r3, [pc, #172]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 020c 	and.w	r2, r3, #12
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d1eb      	bne.n	8004d30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d58:	4b25      	ldr	r3, [pc, #148]	@ (8004df0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d20c      	bcs.n	8004d80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d66:	4b22      	ldr	r3, [pc, #136]	@ (8004df0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6e:	4b20      	ldr	r3, [pc, #128]	@ (8004df0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e032      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d8c:	4b19      	ldr	r3, [pc, #100]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4916      	ldr	r1, [pc, #88]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004daa:	4b12      	ldr	r3, [pc, #72]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	490e      	ldr	r1, [pc, #56]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dbe:	f000 f821 	bl	8004e04 <HAL_RCC_GetSysClockFreq>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004df4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	490a      	ldr	r1, [pc, #40]	@ (8004df8 <HAL_RCC_ClockConfig+0x1c0>)
 8004dd0:	5ccb      	ldrb	r3, [r1, r3]
 8004dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd6:	4a09      	ldr	r2, [pc, #36]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c4>)
 8004dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dda:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <HAL_RCC_ClockConfig+0x1c8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe f808 	bl	8002df4 <HAL_InitTick>

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40023c00 	.word	0x40023c00
 8004df4:	40023800 	.word	0x40023800
 8004df8:	0800a56c 	.word	0x0800a56c
 8004dfc:	20000000 	.word	0x20000000
 8004e00:	20000004 	.word	0x20000004

08004e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e08:	b090      	sub	sp, #64	@ 0x40
 8004e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e10:	2300      	movs	r3, #0
 8004e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e14:	2300      	movs	r3, #0
 8004e16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e1c:	4b59      	ldr	r3, [pc, #356]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 030c 	and.w	r3, r3, #12
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d00d      	beq.n	8004e44 <HAL_RCC_GetSysClockFreq+0x40>
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	f200 80a1 	bhi.w	8004f70 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x34>
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d003      	beq.n	8004e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e36:	e09b      	b.n	8004f70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e38:	4b53      	ldr	r3, [pc, #332]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004e3c:	e09b      	b.n	8004f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e3e:	4b53      	ldr	r3, [pc, #332]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e42:	e098      	b.n	8004f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e44:	4b4f      	ldr	r3, [pc, #316]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e4e:	4b4d      	ldr	r3, [pc, #308]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d028      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	099b      	lsrs	r3, r3, #6
 8004e60:	2200      	movs	r2, #0
 8004e62:	623b      	str	r3, [r7, #32]
 8004e64:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	4b47      	ldr	r3, [pc, #284]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e70:	fb03 f201 	mul.w	r2, r3, r1
 8004e74:	2300      	movs	r3, #0
 8004e76:	fb00 f303 	mul.w	r3, r0, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	4a43      	ldr	r2, [pc, #268]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e7e:	fba0 1202 	umull	r1, r2, r0, r2
 8004e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e84:	460a      	mov	r2, r1
 8004e86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e8a:	4413      	add	r3, r2
 8004e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e90:	2200      	movs	r2, #0
 8004e92:	61bb      	str	r3, [r7, #24]
 8004e94:	61fa      	str	r2, [r7, #28]
 8004e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e9e:	f7fb ff03 	bl	8000ca8 <__aeabi_uldivmod>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eaa:	e053      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eac:	4b35      	ldr	r3, [pc, #212]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	099b      	lsrs	r3, r3, #6
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	617a      	str	r2, [r7, #20]
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ebe:	f04f 0b00 	mov.w	fp, #0
 8004ec2:	4652      	mov	r2, sl
 8004ec4:	465b      	mov	r3, fp
 8004ec6:	f04f 0000 	mov.w	r0, #0
 8004eca:	f04f 0100 	mov.w	r1, #0
 8004ece:	0159      	lsls	r1, r3, #5
 8004ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ed4:	0150      	lsls	r0, r2, #5
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	ebb2 080a 	subs.w	r8, r2, sl
 8004ede:	eb63 090b 	sbc.w	r9, r3, fp
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004eee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ef2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ef6:	ebb2 0408 	subs.w	r4, r2, r8
 8004efa:	eb63 0509 	sbc.w	r5, r3, r9
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	00eb      	lsls	r3, r5, #3
 8004f08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f0c:	00e2      	lsls	r2, r4, #3
 8004f0e:	4614      	mov	r4, r2
 8004f10:	461d      	mov	r5, r3
 8004f12:	eb14 030a 	adds.w	r3, r4, sl
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	eb45 030b 	adc.w	r3, r5, fp
 8004f1c:	607b      	str	r3, [r7, #4]
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	028b      	lsls	r3, r1, #10
 8004f2e:	4621      	mov	r1, r4
 8004f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f34:	4621      	mov	r1, r4
 8004f36:	028a      	lsls	r2, r1, #10
 8004f38:	4610      	mov	r0, r2
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f3e:	2200      	movs	r2, #0
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	60fa      	str	r2, [r7, #12]
 8004f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f48:	f7fb feae 	bl	8000ca8 <__aeabi_uldivmod>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4613      	mov	r3, r2
 8004f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f54:	4b0b      	ldr	r3, [pc, #44]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	0c1b      	lsrs	r3, r3, #16
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	3301      	adds	r3, #1
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004f64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f6e:	e002      	b.n	8004f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f70:	4b05      	ldr	r3, [pc, #20]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3740      	adds	r7, #64	@ 0x40
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f82:	bf00      	nop
 8004f84:	40023800 	.word	0x40023800
 8004f88:	00f42400 	.word	0x00f42400
 8004f8c:	017d7840 	.word	0x017d7840

08004f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f94:	4b03      	ldr	r3, [pc, #12]	@ (8004fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f96:	681b      	ldr	r3, [r3, #0]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20000000 	.word	0x20000000

08004fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fac:	f7ff fff0 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	4b05      	ldr	r3, [pc, #20]	@ (8004fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	0a9b      	lsrs	r3, r3, #10
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	4903      	ldr	r1, [pc, #12]	@ (8004fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fbe:	5ccb      	ldrb	r3, [r1, r3]
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	0800a57c 	.word	0x0800a57c

08004fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fd4:	f7ff ffdc 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4b05      	ldr	r3, [pc, #20]	@ (8004ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	0b5b      	lsrs	r3, r3, #13
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	4903      	ldr	r1, [pc, #12]	@ (8004ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	0800a57c 	.word	0x0800a57c

08004ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e042      	b.n	8005090 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fd fc9a 	bl	8002958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2224      	movs	r2, #36	@ 0x24
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800503a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fea1 	bl	8005d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695a      	ldr	r2, [r3, #20]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08c      	sub	sp, #48	@ 0x30
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d14a      	bne.n	8005148 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80050b8:	88fb      	ldrh	r3, [r7, #6]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e043      	b.n	800514a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	461a      	mov	r2, r3
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 fbf5 	bl	80058c4 <UART_Start_Receive_DMA>
 80050da:	4603      	mov	r3, r0
 80050dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80050e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d12c      	bne.n	8005142 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d125      	bne.n	800513c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050f0:	2300      	movs	r3, #0
 80050f2:	613b      	str	r3, [r7, #16]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	617b      	str	r3, [r7, #20]
   return(result);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f043 0310 	orr.w	r3, r3, #16
 800511c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005126:	627a      	str	r2, [r7, #36]	@ 0x24
 8005128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	6a39      	ldr	r1, [r7, #32]
 800512c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	61fb      	str	r3, [r7, #28]
   return(result);
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e5      	bne.n	8005106 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800513a:	e002      	b.n	8005142 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005142:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005146:	e000      	b.n	800514a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005148:	2302      	movs	r3, #2
  }
}
 800514a:	4618      	mov	r0, r3
 800514c:	3730      	adds	r7, #48	@ 0x30
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b0ba      	sub	sp, #232	@ 0xe8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800517a:	2300      	movs	r3, #0
 800517c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005180:	2300      	movs	r3, #0
 8005182:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10f      	bne.n	80051ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800519a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_UART_IRQHandler+0x66>
 80051a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fd27 	bl	8005c06 <UART_Receive_IT>
      return;
 80051b8:	e25b      	b.n	8005672 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 80de 	beq.w	8005380 <HAL_UART_IRQHandler+0x22c>
 80051c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d106      	bne.n	80051de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 80d1 	beq.w	8005380 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00b      	beq.n	8005202 <HAL_UART_IRQHandler+0xae>
 80051ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fa:	f043 0201 	orr.w	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005206:	f003 0304 	and.w	r3, r3, #4
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <HAL_UART_IRQHandler+0xd2>
 800520e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521e:	f043 0202 	orr.w	r2, r3, #2
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <HAL_UART_IRQHandler+0xf6>
 8005232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005242:	f043 0204 	orr.w	r2, r3, #4
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d011      	beq.n	800527a <HAL_UART_IRQHandler+0x126>
 8005256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b00      	cmp	r3, #0
 8005260:	d105      	bne.n	800526e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	f043 0208 	orr.w	r2, r3, #8
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 81f2 	beq.w	8005668 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <HAL_UART_IRQHandler+0x14e>
 8005290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fcb2 	bl	8005c06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ac:	2b40      	cmp	r3, #64	@ 0x40
 80052ae:	bf0c      	ite	eq
 80052b0:	2301      	moveq	r3, #1
 80052b2:	2300      	movne	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d103      	bne.n	80052ce <HAL_UART_IRQHandler+0x17a>
 80052c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d04f      	beq.n	800536e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fbba 	bl	8005a48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052de:	2b40      	cmp	r3, #64	@ 0x40
 80052e0:	d141      	bne.n	8005366 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3314      	adds	r3, #20
 80052e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005300:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3314      	adds	r3, #20
 800530a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800530e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005312:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800531a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1d9      	bne.n	80052e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d013      	beq.n	800535e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533a:	4a7e      	ldr	r2, [pc, #504]	@ (8005534 <HAL_UART_IRQHandler+0x3e0>)
 800533c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005342:	4618      	mov	r0, r3
 8005344:	f7fe fdd8 	bl	8003ef8 <HAL_DMA_Abort_IT>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d016      	beq.n	800537c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005358:	4610      	mov	r0, r2
 800535a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535c:	e00e      	b.n	800537c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f9a8 	bl	80056b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	e00a      	b.n	800537c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f9a4 	bl	80056b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536c:	e006      	b.n	800537c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f9a0 	bl	80056b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800537a:	e175      	b.n	8005668 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537c:	bf00      	nop
    return;
 800537e:	e173      	b.n	8005668 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005384:	2b01      	cmp	r3, #1
 8005386:	f040 814f 	bne.w	8005628 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800538a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800538e:	f003 0310 	and.w	r3, r3, #16
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 8148 	beq.w	8005628 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 8141 	beq.w	8005628 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053a6:	2300      	movs	r3, #0
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c6:	2b40      	cmp	r3, #64	@ 0x40
 80053c8:	f040 80b6 	bne.w	8005538 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 8145 	beq.w	800566c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053ea:	429a      	cmp	r2, r3
 80053ec:	f080 813e 	bcs.w	800566c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005402:	f000 8088 	beq.w	8005516 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	330c      	adds	r3, #12
 800540c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800541c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005424:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005432:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005436:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800543e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800544a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1d9      	bne.n	8005406 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3314      	adds	r3, #20
 8005458:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005462:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005464:	f023 0301 	bic.w	r3, r3, #1
 8005468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3314      	adds	r3, #20
 8005472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005476:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800547a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800547e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e1      	bne.n	8005452 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3314      	adds	r3, #20
 8005494:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800549e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3314      	adds	r3, #20
 80054ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e3      	bne.n	800548e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	330c      	adds	r3, #12
 80054da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054e6:	f023 0310 	bic.w	r3, r3, #16
 80054ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	330c      	adds	r3, #12
 80054f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80054f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e3      	bne.n	80054d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005510:	4618      	mov	r0, r3
 8005512:	f7fe fc81 	bl	8003e18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005524:	b29b      	uxth	r3, r3
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	b29b      	uxth	r3, r3
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7fb fd69 	bl	8001004 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005532:	e09b      	b.n	800566c <HAL_UART_IRQHandler+0x518>
 8005534:	08005b0f 	.word	0x08005b0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005540:	b29b      	uxth	r3, r3
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 808e 	beq.w	8005670 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8089 	beq.w	8005670 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	330c      	adds	r3, #12
 8005564:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800556e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005574:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	330c      	adds	r3, #12
 800557e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005582:	647a      	str	r2, [r7, #68]	@ 0x44
 8005584:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005588:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e3      	bne.n	800555e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3314      	adds	r3, #20
 800559c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	623b      	str	r3, [r7, #32]
   return(result);
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3314      	adds	r3, #20
 80055b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80055bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e3      	bne.n	8005596 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0310 	bic.w	r3, r3, #16
 80055f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	330c      	adds	r3, #12
 80055fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005600:	61fa      	str	r2, [r7, #28]
 8005602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	69b9      	ldr	r1, [r7, #24]
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	617b      	str	r3, [r7, #20]
   return(result);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e3      	bne.n	80055dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800561a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7fb fcef 	bl	8001004 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005626:	e023      	b.n	8005670 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800562c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005630:	2b00      	cmp	r3, #0
 8005632:	d009      	beq.n	8005648 <HAL_UART_IRQHandler+0x4f4>
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fa78 	bl	8005b36 <UART_Transmit_IT>
    return;
 8005646:	e014      	b.n	8005672 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00e      	beq.n	8005672 <HAL_UART_IRQHandler+0x51e>
 8005654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fab8 	bl	8005bd6 <UART_EndTransmit_IT>
    return;
 8005666:	e004      	b.n	8005672 <HAL_UART_IRQHandler+0x51e>
    return;
 8005668:	bf00      	nop
 800566a:	e002      	b.n	8005672 <HAL_UART_IRQHandler+0x51e>
      return;
 800566c:	bf00      	nop
 800566e:	e000      	b.n	8005672 <HAL_UART_IRQHandler+0x51e>
      return;
 8005670:	bf00      	nop
  }
}
 8005672:	37e8      	adds	r7, #232	@ 0xe8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b09c      	sub	sp, #112	@ 0x70
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d172      	bne.n	80057ca <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80056e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056e6:	2200      	movs	r2, #0
 80056e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	330c      	adds	r3, #12
 80056f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005700:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	330c      	adds	r3, #12
 8005708:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800570a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800570c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005710:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e5      	bne.n	80056ea <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3314      	adds	r3, #20
 8005724:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800572e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	667b      	str	r3, [r7, #100]	@ 0x64
 8005736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3314      	adds	r3, #20
 800573c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800573e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005740:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005744:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800574c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e5      	bne.n	800571e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3314      	adds	r3, #20
 8005758:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	623b      	str	r3, [r7, #32]
   return(result);
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005768:	663b      	str	r3, [r7, #96]	@ 0x60
 800576a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3314      	adds	r3, #20
 8005770:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005772:	633a      	str	r2, [r7, #48]	@ 0x30
 8005774:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e5      	bne.n	8005752 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005788:	2220      	movs	r2, #32
 800578a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005792:	2b01      	cmp	r3, #1
 8005794:	d119      	bne.n	80057ca <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	330c      	adds	r3, #12
 800579c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f023 0310 	bic.w	r3, r3, #16
 80057ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	330c      	adds	r3, #12
 80057b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80057b6:	61fa      	str	r2, [r7, #28]
 80057b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	69b9      	ldr	r1, [r7, #24]
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	617b      	str	r3, [r7, #20]
   return(result);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e5      	bne.n	8005796 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057cc:	2200      	movs	r2, #0
 80057ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d106      	bne.n	80057e6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057dc:	4619      	mov	r1, r3
 80057de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80057e0:	f7fb fc10 	bl	8001004 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057e4:	e002      	b.n	80057ec <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80057e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80057e8:	f7ff ff50 	bl	800568c <HAL_UART_RxCpltCallback>
}
 80057ec:	bf00      	nop
 80057ee:	3770      	adds	r7, #112	@ 0x70
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005800:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580c:	2b01      	cmp	r3, #1
 800580e:	d108      	bne.n	8005822 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	b29b      	uxth	r3, r3
 8005818:	4619      	mov	r1, r3
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f7fb fbf2 	bl	8001004 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005820:	e002      	b.n	8005828 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff ff3c 	bl	80056a0 <HAL_UART_RxHalfCpltCallback>
}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005840:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800584c:	2b80      	cmp	r3, #128	@ 0x80
 800584e:	bf0c      	ite	eq
 8005850:	2301      	moveq	r3, #1
 8005852:	2300      	movne	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b21      	cmp	r3, #33	@ 0x21
 8005862:	d108      	bne.n	8005876 <UART_DMAError+0x46>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2200      	movs	r2, #0
 800586e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005870:	68b8      	ldr	r0, [r7, #8]
 8005872:	f000 f8c1 	bl	80059f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005880:	2b40      	cmp	r3, #64	@ 0x40
 8005882:	bf0c      	ite	eq
 8005884:	2301      	moveq	r3, #1
 8005886:	2300      	movne	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b22      	cmp	r3, #34	@ 0x22
 8005896:	d108      	bne.n	80058aa <UART_DMAError+0x7a>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d005      	beq.n	80058aa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2200      	movs	r2, #0
 80058a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80058a4:	68b8      	ldr	r0, [r7, #8]
 80058a6:	f000 f8cf 	bl	8005a48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ae:	f043 0210 	orr.w	r2, r3, #16
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058b6:	68b8      	ldr	r0, [r7, #8]
 80058b8:	f7ff fefc 	bl	80056b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b098      	sub	sp, #96	@ 0x60
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	4613      	mov	r3, r2
 80058d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	88fa      	ldrh	r2, [r7, #6]
 80058dc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2222      	movs	r2, #34	@ 0x22
 80058e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f0:	4a3e      	ldr	r2, [pc, #248]	@ (80059ec <UART_Start_Receive_DMA+0x128>)
 80058f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f8:	4a3d      	ldr	r2, [pc, #244]	@ (80059f0 <UART_Start_Receive_DMA+0x12c>)
 80058fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005900:	4a3c      	ldr	r2, [pc, #240]	@ (80059f4 <UART_Start_Receive_DMA+0x130>)
 8005902:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005908:	2200      	movs	r2, #0
 800590a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800590c:	f107 0308 	add.w	r3, r7, #8
 8005910:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3304      	adds	r3, #4
 800591c:	4619      	mov	r1, r3
 800591e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	f7fe fa20 	bl	8003d68 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005928:	2300      	movs	r3, #0
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d019      	beq.n	800597a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800595c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005966:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005968:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800596c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e5      	bne.n	8005946 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3314      	adds	r3, #20
 8005980:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800598a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	657b      	str	r3, [r7, #84]	@ 0x54
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3314      	adds	r3, #20
 8005998:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800599a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800599c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80059a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e5      	bne.n	800597a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3314      	adds	r3, #20
 80059b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	e853 3f00 	ldrex	r3, [r3]
 80059bc:	617b      	str	r3, [r7, #20]
   return(result);
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3314      	adds	r3, #20
 80059cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80059ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80059d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	6a39      	ldr	r1, [r7, #32]
 80059d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d6:	e841 2300 	strex	r3, r2, [r1]
 80059da:	61fb      	str	r3, [r7, #28]
   return(result);
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1e5      	bne.n	80059ae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3760      	adds	r7, #96	@ 0x60
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	080056c9 	.word	0x080056c9
 80059f0:	080057f5 	.word	0x080057f5
 80059f4:	08005831 	.word	0x08005831

080059f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b089      	sub	sp, #36	@ 0x24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	330c      	adds	r3, #12
 8005a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a16:	61fb      	str	r3, [r7, #28]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	330c      	adds	r3, #12
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	61ba      	str	r2, [r7, #24]
 8005a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	6979      	ldr	r1, [r7, #20]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e5      	bne.n	8005a00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005a3c:	bf00      	nop
 8005a3e:	3724      	adds	r7, #36	@ 0x24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b095      	sub	sp, #84	@ 0x54
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a70:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e5      	bne.n	8005a50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3314      	adds	r3, #20
 8005a8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3314      	adds	r3, #20
 8005aa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005aa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e5      	bne.n	8005a84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d119      	bne.n	8005af4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	330c      	adds	r3, #12
 8005ac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	e853 3f00 	ldrex	r3, [r3]
 8005ace:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f023 0310 	bic.w	r3, r3, #16
 8005ad6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	330c      	adds	r3, #12
 8005ade:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ae0:	61ba      	str	r2, [r7, #24]
 8005ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae4:	6979      	ldr	r1, [r7, #20]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	e841 2300 	strex	r3, r2, [r1]
 8005aec:	613b      	str	r3, [r7, #16]
   return(result);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1e5      	bne.n	8005ac0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b02:	bf00      	nop
 8005b04:	3754      	adds	r7, #84	@ 0x54
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff fdc3 	bl	80056b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b2e:	bf00      	nop
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b21      	cmp	r3, #33	@ 0x21
 8005b48:	d13e      	bne.n	8005bc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b52:	d114      	bne.n	8005b7e <UART_Transmit_IT+0x48>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d110      	bne.n	8005b7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	1c9a      	adds	r2, r3, #2
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	621a      	str	r2, [r3, #32]
 8005b7c:	e008      	b.n	8005b90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	1c59      	adds	r1, r3, #1
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6211      	str	r1, [r2, #32]
 8005b88:	781a      	ldrb	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10f      	bne.n	8005bc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e000      	b.n	8005bca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bc8:	2302      	movs	r3, #2
  }
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b082      	sub	sp, #8
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7ff fd3e 	bl	8005678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b08c      	sub	sp, #48	@ 0x30
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b22      	cmp	r3, #34	@ 0x22
 8005c18:	f040 80ae 	bne.w	8005d78 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c24:	d117      	bne.n	8005c56 <UART_Receive_IT+0x50>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d113      	bne.n	8005c56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c36:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4e:	1c9a      	adds	r2, r3, #2
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c54:	e026      	b.n	8005ca4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c68:	d007      	beq.n	8005c7a <UART_Receive_IT+0x74>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <UART_Receive_IT+0x82>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	e008      	b.n	8005c9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d15d      	bne.n	8005d74 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0220 	bic.w	r2, r2, #32
 8005cc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695a      	ldr	r2, [r3, #20]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0201 	bic.w	r2, r2, #1
 8005ce6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d135      	bne.n	8005d6a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	613b      	str	r3, [r7, #16]
   return(result);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f023 0310 	bic.w	r3, r3, #16
 8005d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	330c      	adds	r3, #12
 8005d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d24:	623a      	str	r2, [r7, #32]
 8005d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	69f9      	ldr	r1, [r7, #28]
 8005d2a:	6a3a      	ldr	r2, [r7, #32]
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e5      	bne.n	8005d04 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0310 	and.w	r3, r3, #16
 8005d42:	2b10      	cmp	r3, #16
 8005d44:	d10a      	bne.n	8005d5c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fb f94e 	bl	8001004 <HAL_UARTEx_RxEventCallback>
 8005d68:	e002      	b.n	8005d70 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff fc8e 	bl	800568c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	e002      	b.n	8005d7a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	e000      	b.n	8005d7a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d78:	2302      	movs	r3, #2
  }
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3730      	adds	r7, #48	@ 0x30
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d88:	b0c0      	sub	sp, #256	@ 0x100
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da0:	68d9      	ldr	r1, [r3, #12]
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	ea40 0301 	orr.w	r3, r0, r1
 8005dac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ddc:	f021 010c 	bic.w	r1, r1, #12
 8005de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005dea:	430b      	orrs	r3, r1
 8005dec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfe:	6999      	ldr	r1, [r3, #24]
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	ea40 0301 	orr.w	r3, r0, r1
 8005e0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4b8f      	ldr	r3, [pc, #572]	@ (8006050 <UART_SetConfig+0x2cc>)
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d005      	beq.n	8005e24 <UART_SetConfig+0xa0>
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b8d      	ldr	r3, [pc, #564]	@ (8006054 <UART_SetConfig+0x2d0>)
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d104      	bne.n	8005e2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e24:	f7ff f8d4 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 8005e28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e2c:	e003      	b.n	8005e36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e2e:	f7ff f8bb 	bl	8004fa8 <HAL_RCC_GetPCLK1Freq>
 8005e32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e40:	f040 810c 	bne.w	800605c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e56:	4622      	mov	r2, r4
 8005e58:	462b      	mov	r3, r5
 8005e5a:	1891      	adds	r1, r2, r2
 8005e5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e5e:	415b      	adcs	r3, r3
 8005e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e66:	4621      	mov	r1, r4
 8005e68:	eb12 0801 	adds.w	r8, r2, r1
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	eb43 0901 	adc.w	r9, r3, r1
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e86:	4690      	mov	r8, r2
 8005e88:	4699      	mov	r9, r3
 8005e8a:	4623      	mov	r3, r4
 8005e8c:	eb18 0303 	adds.w	r3, r8, r3
 8005e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e94:	462b      	mov	r3, r5
 8005e96:	eb49 0303 	adc.w	r3, r9, r3
 8005e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005eaa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005eae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	18db      	adds	r3, r3, r3
 8005eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005eb8:	4613      	mov	r3, r2
 8005eba:	eb42 0303 	adc.w	r3, r2, r3
 8005ebe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ec0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ec4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ec8:	f7fa feee 	bl	8000ca8 <__aeabi_uldivmod>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4b61      	ldr	r3, [pc, #388]	@ (8006058 <UART_SetConfig+0x2d4>)
 8005ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	011c      	lsls	r4, r3, #4
 8005eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ee4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ee8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	1891      	adds	r1, r2, r2
 8005ef2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ef4:	415b      	adcs	r3, r3
 8005ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ef8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005efc:	4641      	mov	r1, r8
 8005efe:	eb12 0a01 	adds.w	sl, r2, r1
 8005f02:	4649      	mov	r1, r9
 8005f04:	eb43 0b01 	adc.w	fp, r3, r1
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f1c:	4692      	mov	sl, r2
 8005f1e:	469b      	mov	fp, r3
 8005f20:	4643      	mov	r3, r8
 8005f22:	eb1a 0303 	adds.w	r3, sl, r3
 8005f26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f2a:	464b      	mov	r3, r9
 8005f2c:	eb4b 0303 	adc.w	r3, fp, r3
 8005f30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	18db      	adds	r3, r3, r3
 8005f4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f4e:	4613      	mov	r3, r2
 8005f50:	eb42 0303 	adc.w	r3, r2, r3
 8005f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f5e:	f7fa fea3 	bl	8000ca8 <__aeabi_uldivmod>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	4611      	mov	r1, r2
 8005f68:	4b3b      	ldr	r3, [pc, #236]	@ (8006058 <UART_SetConfig+0x2d4>)
 8005f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	2264      	movs	r2, #100	@ 0x64
 8005f72:	fb02 f303 	mul.w	r3, r2, r3
 8005f76:	1acb      	subs	r3, r1, r3
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f7e:	4b36      	ldr	r3, [pc, #216]	@ (8006058 <UART_SetConfig+0x2d4>)
 8005f80:	fba3 2302 	umull	r2, r3, r3, r2
 8005f84:	095b      	lsrs	r3, r3, #5
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f8c:	441c      	add	r4, r3
 8005f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	1891      	adds	r1, r2, r2
 8005fa6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fa8:	415b      	adcs	r3, r3
 8005faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005fb0:	4641      	mov	r1, r8
 8005fb2:	1851      	adds	r1, r2, r1
 8005fb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	414b      	adcs	r3, r1
 8005fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fc8:	4659      	mov	r1, fp
 8005fca:	00cb      	lsls	r3, r1, #3
 8005fcc:	4651      	mov	r1, sl
 8005fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fd2:	4651      	mov	r1, sl
 8005fd4:	00ca      	lsls	r2, r1, #3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4603      	mov	r3, r0
 8005fdc:	4642      	mov	r2, r8
 8005fde:	189b      	adds	r3, r3, r2
 8005fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fe4:	464b      	mov	r3, r9
 8005fe6:	460a      	mov	r2, r1
 8005fe8:	eb42 0303 	adc.w	r3, r2, r3
 8005fec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ffc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006000:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006004:	460b      	mov	r3, r1
 8006006:	18db      	adds	r3, r3, r3
 8006008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800600a:	4613      	mov	r3, r2
 800600c:	eb42 0303 	adc.w	r3, r2, r3
 8006010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006016:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800601a:	f7fa fe45 	bl	8000ca8 <__aeabi_uldivmod>
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	4b0d      	ldr	r3, [pc, #52]	@ (8006058 <UART_SetConfig+0x2d4>)
 8006024:	fba3 1302 	umull	r1, r3, r3, r2
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	2164      	movs	r1, #100	@ 0x64
 800602c:	fb01 f303 	mul.w	r3, r1, r3
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	3332      	adds	r3, #50	@ 0x32
 8006036:	4a08      	ldr	r2, [pc, #32]	@ (8006058 <UART_SetConfig+0x2d4>)
 8006038:	fba2 2303 	umull	r2, r3, r2, r3
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	f003 0207 	and.w	r2, r3, #7
 8006042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4422      	add	r2, r4
 800604a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800604c:	e106      	b.n	800625c <UART_SetConfig+0x4d8>
 800604e:	bf00      	nop
 8006050:	40011000 	.word	0x40011000
 8006054:	40011400 	.word	0x40011400
 8006058:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800605c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006060:	2200      	movs	r2, #0
 8006062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006066:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800606a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800606e:	4642      	mov	r2, r8
 8006070:	464b      	mov	r3, r9
 8006072:	1891      	adds	r1, r2, r2
 8006074:	6239      	str	r1, [r7, #32]
 8006076:	415b      	adcs	r3, r3
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
 800607a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800607e:	4641      	mov	r1, r8
 8006080:	1854      	adds	r4, r2, r1
 8006082:	4649      	mov	r1, r9
 8006084:	eb43 0501 	adc.w	r5, r3, r1
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	f04f 0300 	mov.w	r3, #0
 8006090:	00eb      	lsls	r3, r5, #3
 8006092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006096:	00e2      	lsls	r2, r4, #3
 8006098:	4614      	mov	r4, r2
 800609a:	461d      	mov	r5, r3
 800609c:	4643      	mov	r3, r8
 800609e:	18e3      	adds	r3, r4, r3
 80060a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060a4:	464b      	mov	r3, r9
 80060a6:	eb45 0303 	adc.w	r3, r5, r3
 80060aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060be:	f04f 0200 	mov.w	r2, #0
 80060c2:	f04f 0300 	mov.w	r3, #0
 80060c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060ca:	4629      	mov	r1, r5
 80060cc:	008b      	lsls	r3, r1, #2
 80060ce:	4621      	mov	r1, r4
 80060d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060d4:	4621      	mov	r1, r4
 80060d6:	008a      	lsls	r2, r1, #2
 80060d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060dc:	f7fa fde4 	bl	8000ca8 <__aeabi_uldivmod>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4b60      	ldr	r3, [pc, #384]	@ (8006268 <UART_SetConfig+0x4e4>)
 80060e6:	fba3 2302 	umull	r2, r3, r3, r2
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	011c      	lsls	r4, r3, #4
 80060ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006100:	4642      	mov	r2, r8
 8006102:	464b      	mov	r3, r9
 8006104:	1891      	adds	r1, r2, r2
 8006106:	61b9      	str	r1, [r7, #24]
 8006108:	415b      	adcs	r3, r3
 800610a:	61fb      	str	r3, [r7, #28]
 800610c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006110:	4641      	mov	r1, r8
 8006112:	1851      	adds	r1, r2, r1
 8006114:	6139      	str	r1, [r7, #16]
 8006116:	4649      	mov	r1, r9
 8006118:	414b      	adcs	r3, r1
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006128:	4659      	mov	r1, fp
 800612a:	00cb      	lsls	r3, r1, #3
 800612c:	4651      	mov	r1, sl
 800612e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006132:	4651      	mov	r1, sl
 8006134:	00ca      	lsls	r2, r1, #3
 8006136:	4610      	mov	r0, r2
 8006138:	4619      	mov	r1, r3
 800613a:	4603      	mov	r3, r0
 800613c:	4642      	mov	r2, r8
 800613e:	189b      	adds	r3, r3, r2
 8006140:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006144:	464b      	mov	r3, r9
 8006146:	460a      	mov	r2, r1
 8006148:	eb42 0303 	adc.w	r3, r2, r3
 800614c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	67bb      	str	r3, [r7, #120]	@ 0x78
 800615a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006168:	4649      	mov	r1, r9
 800616a:	008b      	lsls	r3, r1, #2
 800616c:	4641      	mov	r1, r8
 800616e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006172:	4641      	mov	r1, r8
 8006174:	008a      	lsls	r2, r1, #2
 8006176:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800617a:	f7fa fd95 	bl	8000ca8 <__aeabi_uldivmod>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4611      	mov	r1, r2
 8006184:	4b38      	ldr	r3, [pc, #224]	@ (8006268 <UART_SetConfig+0x4e4>)
 8006186:	fba3 2301 	umull	r2, r3, r3, r1
 800618a:	095b      	lsrs	r3, r3, #5
 800618c:	2264      	movs	r2, #100	@ 0x64
 800618e:	fb02 f303 	mul.w	r3, r2, r3
 8006192:	1acb      	subs	r3, r1, r3
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	3332      	adds	r3, #50	@ 0x32
 8006198:	4a33      	ldr	r2, [pc, #204]	@ (8006268 <UART_SetConfig+0x4e4>)
 800619a:	fba2 2303 	umull	r2, r3, r2, r3
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061a4:	441c      	add	r4, r3
 80061a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061aa:	2200      	movs	r2, #0
 80061ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80061ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80061b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80061b4:	4642      	mov	r2, r8
 80061b6:	464b      	mov	r3, r9
 80061b8:	1891      	adds	r1, r2, r2
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	415b      	adcs	r3, r3
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061c4:	4641      	mov	r1, r8
 80061c6:	1851      	adds	r1, r2, r1
 80061c8:	6039      	str	r1, [r7, #0]
 80061ca:	4649      	mov	r1, r9
 80061cc:	414b      	adcs	r3, r1
 80061ce:	607b      	str	r3, [r7, #4]
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061dc:	4659      	mov	r1, fp
 80061de:	00cb      	lsls	r3, r1, #3
 80061e0:	4651      	mov	r1, sl
 80061e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061e6:	4651      	mov	r1, sl
 80061e8:	00ca      	lsls	r2, r1, #3
 80061ea:	4610      	mov	r0, r2
 80061ec:	4619      	mov	r1, r3
 80061ee:	4603      	mov	r3, r0
 80061f0:	4642      	mov	r2, r8
 80061f2:	189b      	adds	r3, r3, r2
 80061f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061f6:	464b      	mov	r3, r9
 80061f8:	460a      	mov	r2, r1
 80061fa:	eb42 0303 	adc.w	r3, r2, r3
 80061fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	663b      	str	r3, [r7, #96]	@ 0x60
 800620a:	667a      	str	r2, [r7, #100]	@ 0x64
 800620c:	f04f 0200 	mov.w	r2, #0
 8006210:	f04f 0300 	mov.w	r3, #0
 8006214:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006218:	4649      	mov	r1, r9
 800621a:	008b      	lsls	r3, r1, #2
 800621c:	4641      	mov	r1, r8
 800621e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006222:	4641      	mov	r1, r8
 8006224:	008a      	lsls	r2, r1, #2
 8006226:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800622a:	f7fa fd3d 	bl	8000ca8 <__aeabi_uldivmod>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4b0d      	ldr	r3, [pc, #52]	@ (8006268 <UART_SetConfig+0x4e4>)
 8006234:	fba3 1302 	umull	r1, r3, r3, r2
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	2164      	movs	r1, #100	@ 0x64
 800623c:	fb01 f303 	mul.w	r3, r1, r3
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	3332      	adds	r3, #50	@ 0x32
 8006246:	4a08      	ldr	r2, [pc, #32]	@ (8006268 <UART_SetConfig+0x4e4>)
 8006248:	fba2 2303 	umull	r2, r3, r2, r3
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	f003 020f 	and.w	r2, r3, #15
 8006252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4422      	add	r2, r4
 800625a:	609a      	str	r2, [r3, #8]
}
 800625c:	bf00      	nop
 800625e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006262:	46bd      	mov	sp, r7
 8006264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006268:	51eb851f 	.word	0x51eb851f

0800626c <atof>:
 800626c:	2100      	movs	r1, #0
 800626e:	f000 be07 	b.w	8006e80 <strtod>

08006272 <atoi>:
 8006272:	220a      	movs	r2, #10
 8006274:	2100      	movs	r1, #0
 8006276:	f000 be89 	b.w	8006f8c <strtol>

0800627a <sulp>:
 800627a:	b570      	push	{r4, r5, r6, lr}
 800627c:	4604      	mov	r4, r0
 800627e:	460d      	mov	r5, r1
 8006280:	ec45 4b10 	vmov	d0, r4, r5
 8006284:	4616      	mov	r6, r2
 8006286:	f003 fc23 	bl	8009ad0 <__ulp>
 800628a:	ec51 0b10 	vmov	r0, r1, d0
 800628e:	b17e      	cbz	r6, 80062b0 <sulp+0x36>
 8006290:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006294:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006298:	2b00      	cmp	r3, #0
 800629a:	dd09      	ble.n	80062b0 <sulp+0x36>
 800629c:	051b      	lsls	r3, r3, #20
 800629e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80062a2:	2400      	movs	r4, #0
 80062a4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80062a8:	4622      	mov	r2, r4
 80062aa:	462b      	mov	r3, r5
 80062ac:	f7fa f9b4 	bl	8000618 <__aeabi_dmul>
 80062b0:	ec41 0b10 	vmov	d0, r0, r1
 80062b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080062b8 <_strtod_l>:
 80062b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062bc:	b09f      	sub	sp, #124	@ 0x7c
 80062be:	460c      	mov	r4, r1
 80062c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80062c2:	2200      	movs	r2, #0
 80062c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80062c6:	9005      	str	r0, [sp, #20]
 80062c8:	f04f 0a00 	mov.w	sl, #0
 80062cc:	f04f 0b00 	mov.w	fp, #0
 80062d0:	460a      	mov	r2, r1
 80062d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80062d4:	7811      	ldrb	r1, [r2, #0]
 80062d6:	292b      	cmp	r1, #43	@ 0x2b
 80062d8:	d04a      	beq.n	8006370 <_strtod_l+0xb8>
 80062da:	d838      	bhi.n	800634e <_strtod_l+0x96>
 80062dc:	290d      	cmp	r1, #13
 80062de:	d832      	bhi.n	8006346 <_strtod_l+0x8e>
 80062e0:	2908      	cmp	r1, #8
 80062e2:	d832      	bhi.n	800634a <_strtod_l+0x92>
 80062e4:	2900      	cmp	r1, #0
 80062e6:	d03b      	beq.n	8006360 <_strtod_l+0xa8>
 80062e8:	2200      	movs	r2, #0
 80062ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80062ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80062ee:	782a      	ldrb	r2, [r5, #0]
 80062f0:	2a30      	cmp	r2, #48	@ 0x30
 80062f2:	f040 80b3 	bne.w	800645c <_strtod_l+0x1a4>
 80062f6:	786a      	ldrb	r2, [r5, #1]
 80062f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80062fc:	2a58      	cmp	r2, #88	@ 0x58
 80062fe:	d16e      	bne.n	80063de <_strtod_l+0x126>
 8006300:	9302      	str	r3, [sp, #8]
 8006302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	ab1a      	add	r3, sp, #104	@ 0x68
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	4a8e      	ldr	r2, [pc, #568]	@ (8006544 <_strtod_l+0x28c>)
 800630c:	9805      	ldr	r0, [sp, #20]
 800630e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006310:	a919      	add	r1, sp, #100	@ 0x64
 8006312:	f002 fccf 	bl	8008cb4 <__gethex>
 8006316:	f010 060f 	ands.w	r6, r0, #15
 800631a:	4604      	mov	r4, r0
 800631c:	d005      	beq.n	800632a <_strtod_l+0x72>
 800631e:	2e06      	cmp	r6, #6
 8006320:	d128      	bne.n	8006374 <_strtod_l+0xbc>
 8006322:	3501      	adds	r5, #1
 8006324:	2300      	movs	r3, #0
 8006326:	9519      	str	r5, [sp, #100]	@ 0x64
 8006328:	930b      	str	r3, [sp, #44]	@ 0x2c
 800632a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800632c:	2b00      	cmp	r3, #0
 800632e:	f040 858e 	bne.w	8006e4e <_strtod_l+0xb96>
 8006332:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006334:	b1cb      	cbz	r3, 800636a <_strtod_l+0xb2>
 8006336:	4652      	mov	r2, sl
 8006338:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800633c:	ec43 2b10 	vmov	d0, r2, r3
 8006340:	b01f      	add	sp, #124	@ 0x7c
 8006342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006346:	2920      	cmp	r1, #32
 8006348:	d1ce      	bne.n	80062e8 <_strtod_l+0x30>
 800634a:	3201      	adds	r2, #1
 800634c:	e7c1      	b.n	80062d2 <_strtod_l+0x1a>
 800634e:	292d      	cmp	r1, #45	@ 0x2d
 8006350:	d1ca      	bne.n	80062e8 <_strtod_l+0x30>
 8006352:	2101      	movs	r1, #1
 8006354:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006356:	1c51      	adds	r1, r2, #1
 8006358:	9119      	str	r1, [sp, #100]	@ 0x64
 800635a:	7852      	ldrb	r2, [r2, #1]
 800635c:	2a00      	cmp	r2, #0
 800635e:	d1c5      	bne.n	80062ec <_strtod_l+0x34>
 8006360:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006362:	9419      	str	r4, [sp, #100]	@ 0x64
 8006364:	2b00      	cmp	r3, #0
 8006366:	f040 8570 	bne.w	8006e4a <_strtod_l+0xb92>
 800636a:	4652      	mov	r2, sl
 800636c:	465b      	mov	r3, fp
 800636e:	e7e5      	b.n	800633c <_strtod_l+0x84>
 8006370:	2100      	movs	r1, #0
 8006372:	e7ef      	b.n	8006354 <_strtod_l+0x9c>
 8006374:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006376:	b13a      	cbz	r2, 8006388 <_strtod_l+0xd0>
 8006378:	2135      	movs	r1, #53	@ 0x35
 800637a:	a81c      	add	r0, sp, #112	@ 0x70
 800637c:	f003 fca2 	bl	8009cc4 <__copybits>
 8006380:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006382:	9805      	ldr	r0, [sp, #20]
 8006384:	f003 f870 	bl	8009468 <_Bfree>
 8006388:	3e01      	subs	r6, #1
 800638a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800638c:	2e04      	cmp	r6, #4
 800638e:	d806      	bhi.n	800639e <_strtod_l+0xe6>
 8006390:	e8df f006 	tbb	[pc, r6]
 8006394:	201d0314 	.word	0x201d0314
 8006398:	14          	.byte	0x14
 8006399:	00          	.byte	0x00
 800639a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800639e:	05e1      	lsls	r1, r4, #23
 80063a0:	bf48      	it	mi
 80063a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80063a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80063aa:	0d1b      	lsrs	r3, r3, #20
 80063ac:	051b      	lsls	r3, r3, #20
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1bb      	bne.n	800632a <_strtod_l+0x72>
 80063b2:	f001 fd13 	bl	8007ddc <__errno>
 80063b6:	2322      	movs	r3, #34	@ 0x22
 80063b8:	6003      	str	r3, [r0, #0]
 80063ba:	e7b6      	b.n	800632a <_strtod_l+0x72>
 80063bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80063c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80063c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80063c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80063cc:	e7e7      	b.n	800639e <_strtod_l+0xe6>
 80063ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800654c <_strtod_l+0x294>
 80063d2:	e7e4      	b.n	800639e <_strtod_l+0xe6>
 80063d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80063d8:	f04f 3aff 	mov.w	sl, #4294967295
 80063dc:	e7df      	b.n	800639e <_strtod_l+0xe6>
 80063de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80063e4:	785b      	ldrb	r3, [r3, #1]
 80063e6:	2b30      	cmp	r3, #48	@ 0x30
 80063e8:	d0f9      	beq.n	80063de <_strtod_l+0x126>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d09d      	beq.n	800632a <_strtod_l+0x72>
 80063ee:	2301      	movs	r3, #1
 80063f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80063f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80063f6:	2300      	movs	r3, #0
 80063f8:	9308      	str	r3, [sp, #32]
 80063fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80063fc:	461f      	mov	r7, r3
 80063fe:	220a      	movs	r2, #10
 8006400:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006402:	7805      	ldrb	r5, [r0, #0]
 8006404:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006408:	b2d9      	uxtb	r1, r3
 800640a:	2909      	cmp	r1, #9
 800640c:	d928      	bls.n	8006460 <_strtod_l+0x1a8>
 800640e:	494e      	ldr	r1, [pc, #312]	@ (8006548 <_strtod_l+0x290>)
 8006410:	2201      	movs	r2, #1
 8006412:	f001 fc2a 	bl	8007c6a <strncmp>
 8006416:	2800      	cmp	r0, #0
 8006418:	d032      	beq.n	8006480 <_strtod_l+0x1c8>
 800641a:	2000      	movs	r0, #0
 800641c:	462a      	mov	r2, r5
 800641e:	4681      	mov	r9, r0
 8006420:	463d      	mov	r5, r7
 8006422:	4603      	mov	r3, r0
 8006424:	2a65      	cmp	r2, #101	@ 0x65
 8006426:	d001      	beq.n	800642c <_strtod_l+0x174>
 8006428:	2a45      	cmp	r2, #69	@ 0x45
 800642a:	d114      	bne.n	8006456 <_strtod_l+0x19e>
 800642c:	b91d      	cbnz	r5, 8006436 <_strtod_l+0x17e>
 800642e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006430:	4302      	orrs	r2, r0
 8006432:	d095      	beq.n	8006360 <_strtod_l+0xa8>
 8006434:	2500      	movs	r5, #0
 8006436:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006438:	1c62      	adds	r2, r4, #1
 800643a:	9219      	str	r2, [sp, #100]	@ 0x64
 800643c:	7862      	ldrb	r2, [r4, #1]
 800643e:	2a2b      	cmp	r2, #43	@ 0x2b
 8006440:	d077      	beq.n	8006532 <_strtod_l+0x27a>
 8006442:	2a2d      	cmp	r2, #45	@ 0x2d
 8006444:	d07b      	beq.n	800653e <_strtod_l+0x286>
 8006446:	f04f 0c00 	mov.w	ip, #0
 800644a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800644e:	2909      	cmp	r1, #9
 8006450:	f240 8082 	bls.w	8006558 <_strtod_l+0x2a0>
 8006454:	9419      	str	r4, [sp, #100]	@ 0x64
 8006456:	f04f 0800 	mov.w	r8, #0
 800645a:	e0a2      	b.n	80065a2 <_strtod_l+0x2ea>
 800645c:	2300      	movs	r3, #0
 800645e:	e7c7      	b.n	80063f0 <_strtod_l+0x138>
 8006460:	2f08      	cmp	r7, #8
 8006462:	bfd5      	itete	le
 8006464:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006466:	9908      	ldrgt	r1, [sp, #32]
 8006468:	fb02 3301 	mlale	r3, r2, r1, r3
 800646c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006470:	f100 0001 	add.w	r0, r0, #1
 8006474:	bfd4      	ite	le
 8006476:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006478:	9308      	strgt	r3, [sp, #32]
 800647a:	3701      	adds	r7, #1
 800647c:	9019      	str	r0, [sp, #100]	@ 0x64
 800647e:	e7bf      	b.n	8006400 <_strtod_l+0x148>
 8006480:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	9219      	str	r2, [sp, #100]	@ 0x64
 8006486:	785a      	ldrb	r2, [r3, #1]
 8006488:	b37f      	cbz	r7, 80064ea <_strtod_l+0x232>
 800648a:	4681      	mov	r9, r0
 800648c:	463d      	mov	r5, r7
 800648e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006492:	2b09      	cmp	r3, #9
 8006494:	d912      	bls.n	80064bc <_strtod_l+0x204>
 8006496:	2301      	movs	r3, #1
 8006498:	e7c4      	b.n	8006424 <_strtod_l+0x16c>
 800649a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	9219      	str	r2, [sp, #100]	@ 0x64
 80064a0:	785a      	ldrb	r2, [r3, #1]
 80064a2:	3001      	adds	r0, #1
 80064a4:	2a30      	cmp	r2, #48	@ 0x30
 80064a6:	d0f8      	beq.n	800649a <_strtod_l+0x1e2>
 80064a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	f200 84d3 	bhi.w	8006e58 <_strtod_l+0xba0>
 80064b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80064b6:	4681      	mov	r9, r0
 80064b8:	2000      	movs	r0, #0
 80064ba:	4605      	mov	r5, r0
 80064bc:	3a30      	subs	r2, #48	@ 0x30
 80064be:	f100 0301 	add.w	r3, r0, #1
 80064c2:	d02a      	beq.n	800651a <_strtod_l+0x262>
 80064c4:	4499      	add	r9, r3
 80064c6:	eb00 0c05 	add.w	ip, r0, r5
 80064ca:	462b      	mov	r3, r5
 80064cc:	210a      	movs	r1, #10
 80064ce:	4563      	cmp	r3, ip
 80064d0:	d10d      	bne.n	80064ee <_strtod_l+0x236>
 80064d2:	1c69      	adds	r1, r5, #1
 80064d4:	4401      	add	r1, r0
 80064d6:	4428      	add	r0, r5
 80064d8:	2808      	cmp	r0, #8
 80064da:	dc16      	bgt.n	800650a <_strtod_l+0x252>
 80064dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80064de:	230a      	movs	r3, #10
 80064e0:	fb03 2300 	mla	r3, r3, r0, r2
 80064e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80064e6:	2300      	movs	r3, #0
 80064e8:	e018      	b.n	800651c <_strtod_l+0x264>
 80064ea:	4638      	mov	r0, r7
 80064ec:	e7da      	b.n	80064a4 <_strtod_l+0x1ec>
 80064ee:	2b08      	cmp	r3, #8
 80064f0:	f103 0301 	add.w	r3, r3, #1
 80064f4:	dc03      	bgt.n	80064fe <_strtod_l+0x246>
 80064f6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80064f8:	434e      	muls	r6, r1
 80064fa:	960a      	str	r6, [sp, #40]	@ 0x28
 80064fc:	e7e7      	b.n	80064ce <_strtod_l+0x216>
 80064fe:	2b10      	cmp	r3, #16
 8006500:	bfde      	ittt	le
 8006502:	9e08      	ldrle	r6, [sp, #32]
 8006504:	434e      	mulle	r6, r1
 8006506:	9608      	strle	r6, [sp, #32]
 8006508:	e7e1      	b.n	80064ce <_strtod_l+0x216>
 800650a:	280f      	cmp	r0, #15
 800650c:	dceb      	bgt.n	80064e6 <_strtod_l+0x22e>
 800650e:	9808      	ldr	r0, [sp, #32]
 8006510:	230a      	movs	r3, #10
 8006512:	fb03 2300 	mla	r3, r3, r0, r2
 8006516:	9308      	str	r3, [sp, #32]
 8006518:	e7e5      	b.n	80064e6 <_strtod_l+0x22e>
 800651a:	4629      	mov	r1, r5
 800651c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800651e:	1c50      	adds	r0, r2, #1
 8006520:	9019      	str	r0, [sp, #100]	@ 0x64
 8006522:	7852      	ldrb	r2, [r2, #1]
 8006524:	4618      	mov	r0, r3
 8006526:	460d      	mov	r5, r1
 8006528:	e7b1      	b.n	800648e <_strtod_l+0x1d6>
 800652a:	f04f 0900 	mov.w	r9, #0
 800652e:	2301      	movs	r3, #1
 8006530:	e77d      	b.n	800642e <_strtod_l+0x176>
 8006532:	f04f 0c00 	mov.w	ip, #0
 8006536:	1ca2      	adds	r2, r4, #2
 8006538:	9219      	str	r2, [sp, #100]	@ 0x64
 800653a:	78a2      	ldrb	r2, [r4, #2]
 800653c:	e785      	b.n	800644a <_strtod_l+0x192>
 800653e:	f04f 0c01 	mov.w	ip, #1
 8006542:	e7f8      	b.n	8006536 <_strtod_l+0x27e>
 8006544:	0800a5a4 	.word	0x0800a5a4
 8006548:	0800a58c 	.word	0x0800a58c
 800654c:	7ff00000 	.word	0x7ff00000
 8006550:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006552:	1c51      	adds	r1, r2, #1
 8006554:	9119      	str	r1, [sp, #100]	@ 0x64
 8006556:	7852      	ldrb	r2, [r2, #1]
 8006558:	2a30      	cmp	r2, #48	@ 0x30
 800655a:	d0f9      	beq.n	8006550 <_strtod_l+0x298>
 800655c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006560:	2908      	cmp	r1, #8
 8006562:	f63f af78 	bhi.w	8006456 <_strtod_l+0x19e>
 8006566:	3a30      	subs	r2, #48	@ 0x30
 8006568:	920e      	str	r2, [sp, #56]	@ 0x38
 800656a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800656c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800656e:	f04f 080a 	mov.w	r8, #10
 8006572:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006574:	1c56      	adds	r6, r2, #1
 8006576:	9619      	str	r6, [sp, #100]	@ 0x64
 8006578:	7852      	ldrb	r2, [r2, #1]
 800657a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800657e:	f1be 0f09 	cmp.w	lr, #9
 8006582:	d939      	bls.n	80065f8 <_strtod_l+0x340>
 8006584:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006586:	1a76      	subs	r6, r6, r1
 8006588:	2e08      	cmp	r6, #8
 800658a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800658e:	dc03      	bgt.n	8006598 <_strtod_l+0x2e0>
 8006590:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006592:	4588      	cmp	r8, r1
 8006594:	bfa8      	it	ge
 8006596:	4688      	movge	r8, r1
 8006598:	f1bc 0f00 	cmp.w	ip, #0
 800659c:	d001      	beq.n	80065a2 <_strtod_l+0x2ea>
 800659e:	f1c8 0800 	rsb	r8, r8, #0
 80065a2:	2d00      	cmp	r5, #0
 80065a4:	d14e      	bne.n	8006644 <_strtod_l+0x38c>
 80065a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065a8:	4308      	orrs	r0, r1
 80065aa:	f47f aebe 	bne.w	800632a <_strtod_l+0x72>
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f47f aed6 	bne.w	8006360 <_strtod_l+0xa8>
 80065b4:	2a69      	cmp	r2, #105	@ 0x69
 80065b6:	d028      	beq.n	800660a <_strtod_l+0x352>
 80065b8:	dc25      	bgt.n	8006606 <_strtod_l+0x34e>
 80065ba:	2a49      	cmp	r2, #73	@ 0x49
 80065bc:	d025      	beq.n	800660a <_strtod_l+0x352>
 80065be:	2a4e      	cmp	r2, #78	@ 0x4e
 80065c0:	f47f aece 	bne.w	8006360 <_strtod_l+0xa8>
 80065c4:	499b      	ldr	r1, [pc, #620]	@ (8006834 <_strtod_l+0x57c>)
 80065c6:	a819      	add	r0, sp, #100	@ 0x64
 80065c8:	f002 fd96 	bl	80090f8 <__match>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	f43f aec7 	beq.w	8006360 <_strtod_l+0xa8>
 80065d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b28      	cmp	r3, #40	@ 0x28
 80065d8:	d12e      	bne.n	8006638 <_strtod_l+0x380>
 80065da:	4997      	ldr	r1, [pc, #604]	@ (8006838 <_strtod_l+0x580>)
 80065dc:	aa1c      	add	r2, sp, #112	@ 0x70
 80065de:	a819      	add	r0, sp, #100	@ 0x64
 80065e0:	f002 fd9e 	bl	8009120 <__hexnan>
 80065e4:	2805      	cmp	r0, #5
 80065e6:	d127      	bne.n	8006638 <_strtod_l+0x380>
 80065e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80065ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80065ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80065f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80065f6:	e698      	b.n	800632a <_strtod_l+0x72>
 80065f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80065fa:	fb08 2101 	mla	r1, r8, r1, r2
 80065fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006602:	920e      	str	r2, [sp, #56]	@ 0x38
 8006604:	e7b5      	b.n	8006572 <_strtod_l+0x2ba>
 8006606:	2a6e      	cmp	r2, #110	@ 0x6e
 8006608:	e7da      	b.n	80065c0 <_strtod_l+0x308>
 800660a:	498c      	ldr	r1, [pc, #560]	@ (800683c <_strtod_l+0x584>)
 800660c:	a819      	add	r0, sp, #100	@ 0x64
 800660e:	f002 fd73 	bl	80090f8 <__match>
 8006612:	2800      	cmp	r0, #0
 8006614:	f43f aea4 	beq.w	8006360 <_strtod_l+0xa8>
 8006618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800661a:	4989      	ldr	r1, [pc, #548]	@ (8006840 <_strtod_l+0x588>)
 800661c:	3b01      	subs	r3, #1
 800661e:	a819      	add	r0, sp, #100	@ 0x64
 8006620:	9319      	str	r3, [sp, #100]	@ 0x64
 8006622:	f002 fd69 	bl	80090f8 <__match>
 8006626:	b910      	cbnz	r0, 800662e <_strtod_l+0x376>
 8006628:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800662a:	3301      	adds	r3, #1
 800662c:	9319      	str	r3, [sp, #100]	@ 0x64
 800662e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006850 <_strtod_l+0x598>
 8006632:	f04f 0a00 	mov.w	sl, #0
 8006636:	e678      	b.n	800632a <_strtod_l+0x72>
 8006638:	4882      	ldr	r0, [pc, #520]	@ (8006844 <_strtod_l+0x58c>)
 800663a:	f001 fc15 	bl	8007e68 <nan>
 800663e:	ec5b ab10 	vmov	sl, fp, d0
 8006642:	e672      	b.n	800632a <_strtod_l+0x72>
 8006644:	eba8 0309 	sub.w	r3, r8, r9
 8006648:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800664a:	9309      	str	r3, [sp, #36]	@ 0x24
 800664c:	2f00      	cmp	r7, #0
 800664e:	bf08      	it	eq
 8006650:	462f      	moveq	r7, r5
 8006652:	2d10      	cmp	r5, #16
 8006654:	462c      	mov	r4, r5
 8006656:	bfa8      	it	ge
 8006658:	2410      	movge	r4, #16
 800665a:	f7f9 ff63 	bl	8000524 <__aeabi_ui2d>
 800665e:	2d09      	cmp	r5, #9
 8006660:	4682      	mov	sl, r0
 8006662:	468b      	mov	fp, r1
 8006664:	dc13      	bgt.n	800668e <_strtod_l+0x3d6>
 8006666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006668:	2b00      	cmp	r3, #0
 800666a:	f43f ae5e 	beq.w	800632a <_strtod_l+0x72>
 800666e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006670:	dd78      	ble.n	8006764 <_strtod_l+0x4ac>
 8006672:	2b16      	cmp	r3, #22
 8006674:	dc5f      	bgt.n	8006736 <_strtod_l+0x47e>
 8006676:	4974      	ldr	r1, [pc, #464]	@ (8006848 <_strtod_l+0x590>)
 8006678:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800667c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006680:	4652      	mov	r2, sl
 8006682:	465b      	mov	r3, fp
 8006684:	f7f9 ffc8 	bl	8000618 <__aeabi_dmul>
 8006688:	4682      	mov	sl, r0
 800668a:	468b      	mov	fp, r1
 800668c:	e64d      	b.n	800632a <_strtod_l+0x72>
 800668e:	4b6e      	ldr	r3, [pc, #440]	@ (8006848 <_strtod_l+0x590>)
 8006690:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006694:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006698:	f7f9 ffbe 	bl	8000618 <__aeabi_dmul>
 800669c:	4682      	mov	sl, r0
 800669e:	9808      	ldr	r0, [sp, #32]
 80066a0:	468b      	mov	fp, r1
 80066a2:	f7f9 ff3f 	bl	8000524 <__aeabi_ui2d>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4650      	mov	r0, sl
 80066ac:	4659      	mov	r1, fp
 80066ae:	f7f9 fdfd 	bl	80002ac <__adddf3>
 80066b2:	2d0f      	cmp	r5, #15
 80066b4:	4682      	mov	sl, r0
 80066b6:	468b      	mov	fp, r1
 80066b8:	ddd5      	ble.n	8006666 <_strtod_l+0x3ae>
 80066ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066bc:	1b2c      	subs	r4, r5, r4
 80066be:	441c      	add	r4, r3
 80066c0:	2c00      	cmp	r4, #0
 80066c2:	f340 8096 	ble.w	80067f2 <_strtod_l+0x53a>
 80066c6:	f014 030f 	ands.w	r3, r4, #15
 80066ca:	d00a      	beq.n	80066e2 <_strtod_l+0x42a>
 80066cc:	495e      	ldr	r1, [pc, #376]	@ (8006848 <_strtod_l+0x590>)
 80066ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80066d2:	4652      	mov	r2, sl
 80066d4:	465b      	mov	r3, fp
 80066d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066da:	f7f9 ff9d 	bl	8000618 <__aeabi_dmul>
 80066de:	4682      	mov	sl, r0
 80066e0:	468b      	mov	fp, r1
 80066e2:	f034 040f 	bics.w	r4, r4, #15
 80066e6:	d073      	beq.n	80067d0 <_strtod_l+0x518>
 80066e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80066ec:	dd48      	ble.n	8006780 <_strtod_l+0x4c8>
 80066ee:	2400      	movs	r4, #0
 80066f0:	46a0      	mov	r8, r4
 80066f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80066f4:	46a1      	mov	r9, r4
 80066f6:	9a05      	ldr	r2, [sp, #20]
 80066f8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006850 <_strtod_l+0x598>
 80066fc:	2322      	movs	r3, #34	@ 0x22
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	f04f 0a00 	mov.w	sl, #0
 8006704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006706:	2b00      	cmp	r3, #0
 8006708:	f43f ae0f 	beq.w	800632a <_strtod_l+0x72>
 800670c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800670e:	9805      	ldr	r0, [sp, #20]
 8006710:	f002 feaa 	bl	8009468 <_Bfree>
 8006714:	9805      	ldr	r0, [sp, #20]
 8006716:	4649      	mov	r1, r9
 8006718:	f002 fea6 	bl	8009468 <_Bfree>
 800671c:	9805      	ldr	r0, [sp, #20]
 800671e:	4641      	mov	r1, r8
 8006720:	f002 fea2 	bl	8009468 <_Bfree>
 8006724:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006726:	9805      	ldr	r0, [sp, #20]
 8006728:	f002 fe9e 	bl	8009468 <_Bfree>
 800672c:	9805      	ldr	r0, [sp, #20]
 800672e:	4621      	mov	r1, r4
 8006730:	f002 fe9a 	bl	8009468 <_Bfree>
 8006734:	e5f9      	b.n	800632a <_strtod_l+0x72>
 8006736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006738:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800673c:	4293      	cmp	r3, r2
 800673e:	dbbc      	blt.n	80066ba <_strtod_l+0x402>
 8006740:	4c41      	ldr	r4, [pc, #260]	@ (8006848 <_strtod_l+0x590>)
 8006742:	f1c5 050f 	rsb	r5, r5, #15
 8006746:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800674a:	4652      	mov	r2, sl
 800674c:	465b      	mov	r3, fp
 800674e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006752:	f7f9 ff61 	bl	8000618 <__aeabi_dmul>
 8006756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006758:	1b5d      	subs	r5, r3, r5
 800675a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800675e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006762:	e78f      	b.n	8006684 <_strtod_l+0x3cc>
 8006764:	3316      	adds	r3, #22
 8006766:	dba8      	blt.n	80066ba <_strtod_l+0x402>
 8006768:	4b37      	ldr	r3, [pc, #220]	@ (8006848 <_strtod_l+0x590>)
 800676a:	eba9 0808 	sub.w	r8, r9, r8
 800676e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006772:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006776:	4650      	mov	r0, sl
 8006778:	4659      	mov	r1, fp
 800677a:	f7fa f877 	bl	800086c <__aeabi_ddiv>
 800677e:	e783      	b.n	8006688 <_strtod_l+0x3d0>
 8006780:	4b32      	ldr	r3, [pc, #200]	@ (800684c <_strtod_l+0x594>)
 8006782:	9308      	str	r3, [sp, #32]
 8006784:	2300      	movs	r3, #0
 8006786:	1124      	asrs	r4, r4, #4
 8006788:	4650      	mov	r0, sl
 800678a:	4659      	mov	r1, fp
 800678c:	461e      	mov	r6, r3
 800678e:	2c01      	cmp	r4, #1
 8006790:	dc21      	bgt.n	80067d6 <_strtod_l+0x51e>
 8006792:	b10b      	cbz	r3, 8006798 <_strtod_l+0x4e0>
 8006794:	4682      	mov	sl, r0
 8006796:	468b      	mov	fp, r1
 8006798:	492c      	ldr	r1, [pc, #176]	@ (800684c <_strtod_l+0x594>)
 800679a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800679e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80067a2:	4652      	mov	r2, sl
 80067a4:	465b      	mov	r3, fp
 80067a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067aa:	f7f9 ff35 	bl	8000618 <__aeabi_dmul>
 80067ae:	4b28      	ldr	r3, [pc, #160]	@ (8006850 <_strtod_l+0x598>)
 80067b0:	460a      	mov	r2, r1
 80067b2:	400b      	ands	r3, r1
 80067b4:	4927      	ldr	r1, [pc, #156]	@ (8006854 <_strtod_l+0x59c>)
 80067b6:	428b      	cmp	r3, r1
 80067b8:	4682      	mov	sl, r0
 80067ba:	d898      	bhi.n	80066ee <_strtod_l+0x436>
 80067bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80067c0:	428b      	cmp	r3, r1
 80067c2:	bf86      	itte	hi
 80067c4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006858 <_strtod_l+0x5a0>
 80067c8:	f04f 3aff 	movhi.w	sl, #4294967295
 80067cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80067d0:	2300      	movs	r3, #0
 80067d2:	9308      	str	r3, [sp, #32]
 80067d4:	e07a      	b.n	80068cc <_strtod_l+0x614>
 80067d6:	07e2      	lsls	r2, r4, #31
 80067d8:	d505      	bpl.n	80067e6 <_strtod_l+0x52e>
 80067da:	9b08      	ldr	r3, [sp, #32]
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	f7f9 ff1a 	bl	8000618 <__aeabi_dmul>
 80067e4:	2301      	movs	r3, #1
 80067e6:	9a08      	ldr	r2, [sp, #32]
 80067e8:	3208      	adds	r2, #8
 80067ea:	3601      	adds	r6, #1
 80067ec:	1064      	asrs	r4, r4, #1
 80067ee:	9208      	str	r2, [sp, #32]
 80067f0:	e7cd      	b.n	800678e <_strtod_l+0x4d6>
 80067f2:	d0ed      	beq.n	80067d0 <_strtod_l+0x518>
 80067f4:	4264      	negs	r4, r4
 80067f6:	f014 020f 	ands.w	r2, r4, #15
 80067fa:	d00a      	beq.n	8006812 <_strtod_l+0x55a>
 80067fc:	4b12      	ldr	r3, [pc, #72]	@ (8006848 <_strtod_l+0x590>)
 80067fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006802:	4650      	mov	r0, sl
 8006804:	4659      	mov	r1, fp
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	f7fa f82f 	bl	800086c <__aeabi_ddiv>
 800680e:	4682      	mov	sl, r0
 8006810:	468b      	mov	fp, r1
 8006812:	1124      	asrs	r4, r4, #4
 8006814:	d0dc      	beq.n	80067d0 <_strtod_l+0x518>
 8006816:	2c1f      	cmp	r4, #31
 8006818:	dd20      	ble.n	800685c <_strtod_l+0x5a4>
 800681a:	2400      	movs	r4, #0
 800681c:	46a0      	mov	r8, r4
 800681e:	940a      	str	r4, [sp, #40]	@ 0x28
 8006820:	46a1      	mov	r9, r4
 8006822:	9a05      	ldr	r2, [sp, #20]
 8006824:	2322      	movs	r3, #34	@ 0x22
 8006826:	f04f 0a00 	mov.w	sl, #0
 800682a:	f04f 0b00 	mov.w	fp, #0
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	e768      	b.n	8006704 <_strtod_l+0x44c>
 8006832:	bf00      	nop
 8006834:	0800a6ee 	.word	0x0800a6ee
 8006838:	0800a590 	.word	0x0800a590
 800683c:	0800a6e6 	.word	0x0800a6e6
 8006840:	0800a7cd 	.word	0x0800a7cd
 8006844:	0800a7c9 	.word	0x0800a7c9
 8006848:	0800a930 	.word	0x0800a930
 800684c:	0800a908 	.word	0x0800a908
 8006850:	7ff00000 	.word	0x7ff00000
 8006854:	7ca00000 	.word	0x7ca00000
 8006858:	7fefffff 	.word	0x7fefffff
 800685c:	f014 0310 	ands.w	r3, r4, #16
 8006860:	bf18      	it	ne
 8006862:	236a      	movne	r3, #106	@ 0x6a
 8006864:	4ea9      	ldr	r6, [pc, #676]	@ (8006b0c <_strtod_l+0x854>)
 8006866:	9308      	str	r3, [sp, #32]
 8006868:	4650      	mov	r0, sl
 800686a:	4659      	mov	r1, fp
 800686c:	2300      	movs	r3, #0
 800686e:	07e2      	lsls	r2, r4, #31
 8006870:	d504      	bpl.n	800687c <_strtod_l+0x5c4>
 8006872:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006876:	f7f9 fecf 	bl	8000618 <__aeabi_dmul>
 800687a:	2301      	movs	r3, #1
 800687c:	1064      	asrs	r4, r4, #1
 800687e:	f106 0608 	add.w	r6, r6, #8
 8006882:	d1f4      	bne.n	800686e <_strtod_l+0x5b6>
 8006884:	b10b      	cbz	r3, 800688a <_strtod_l+0x5d2>
 8006886:	4682      	mov	sl, r0
 8006888:	468b      	mov	fp, r1
 800688a:	9b08      	ldr	r3, [sp, #32]
 800688c:	b1b3      	cbz	r3, 80068bc <_strtod_l+0x604>
 800688e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006892:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006896:	2b00      	cmp	r3, #0
 8006898:	4659      	mov	r1, fp
 800689a:	dd0f      	ble.n	80068bc <_strtod_l+0x604>
 800689c:	2b1f      	cmp	r3, #31
 800689e:	dd55      	ble.n	800694c <_strtod_l+0x694>
 80068a0:	2b34      	cmp	r3, #52	@ 0x34
 80068a2:	bfde      	ittt	le
 80068a4:	f04f 33ff 	movle.w	r3, #4294967295
 80068a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80068ac:	4093      	lslle	r3, r2
 80068ae:	f04f 0a00 	mov.w	sl, #0
 80068b2:	bfcc      	ite	gt
 80068b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80068b8:	ea03 0b01 	andle.w	fp, r3, r1
 80068bc:	2200      	movs	r2, #0
 80068be:	2300      	movs	r3, #0
 80068c0:	4650      	mov	r0, sl
 80068c2:	4659      	mov	r1, fp
 80068c4:	f7fa f910 	bl	8000ae8 <__aeabi_dcmpeq>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d1a6      	bne.n	800681a <_strtod_l+0x562>
 80068cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80068d2:	9805      	ldr	r0, [sp, #20]
 80068d4:	462b      	mov	r3, r5
 80068d6:	463a      	mov	r2, r7
 80068d8:	f002 fe2e 	bl	8009538 <__s2b>
 80068dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80068de:	2800      	cmp	r0, #0
 80068e0:	f43f af05 	beq.w	80066ee <_strtod_l+0x436>
 80068e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068e6:	2a00      	cmp	r2, #0
 80068e8:	eba9 0308 	sub.w	r3, r9, r8
 80068ec:	bfa8      	it	ge
 80068ee:	2300      	movge	r3, #0
 80068f0:	9312      	str	r3, [sp, #72]	@ 0x48
 80068f2:	2400      	movs	r4, #0
 80068f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80068f8:	9316      	str	r3, [sp, #88]	@ 0x58
 80068fa:	46a0      	mov	r8, r4
 80068fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068fe:	9805      	ldr	r0, [sp, #20]
 8006900:	6859      	ldr	r1, [r3, #4]
 8006902:	f002 fd71 	bl	80093e8 <_Balloc>
 8006906:	4681      	mov	r9, r0
 8006908:	2800      	cmp	r0, #0
 800690a:	f43f aef4 	beq.w	80066f6 <_strtod_l+0x43e>
 800690e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	3202      	adds	r2, #2
 8006914:	f103 010c 	add.w	r1, r3, #12
 8006918:	0092      	lsls	r2, r2, #2
 800691a:	300c      	adds	r0, #12
 800691c:	f001 fa93 	bl	8007e46 <memcpy>
 8006920:	ec4b ab10 	vmov	d0, sl, fp
 8006924:	9805      	ldr	r0, [sp, #20]
 8006926:	aa1c      	add	r2, sp, #112	@ 0x70
 8006928:	a91b      	add	r1, sp, #108	@ 0x6c
 800692a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800692e:	f003 f93f 	bl	8009bb0 <__d2b>
 8006932:	901a      	str	r0, [sp, #104]	@ 0x68
 8006934:	2800      	cmp	r0, #0
 8006936:	f43f aede 	beq.w	80066f6 <_strtod_l+0x43e>
 800693a:	9805      	ldr	r0, [sp, #20]
 800693c:	2101      	movs	r1, #1
 800693e:	f002 fe91 	bl	8009664 <__i2b>
 8006942:	4680      	mov	r8, r0
 8006944:	b948      	cbnz	r0, 800695a <_strtod_l+0x6a2>
 8006946:	f04f 0800 	mov.w	r8, #0
 800694a:	e6d4      	b.n	80066f6 <_strtod_l+0x43e>
 800694c:	f04f 32ff 	mov.w	r2, #4294967295
 8006950:	fa02 f303 	lsl.w	r3, r2, r3
 8006954:	ea03 0a0a 	and.w	sl, r3, sl
 8006958:	e7b0      	b.n	80068bc <_strtod_l+0x604>
 800695a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800695c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800695e:	2d00      	cmp	r5, #0
 8006960:	bfab      	itete	ge
 8006962:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006964:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006966:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006968:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800696a:	bfac      	ite	ge
 800696c:	18ef      	addge	r7, r5, r3
 800696e:	1b5e      	sublt	r6, r3, r5
 8006970:	9b08      	ldr	r3, [sp, #32]
 8006972:	1aed      	subs	r5, r5, r3
 8006974:	4415      	add	r5, r2
 8006976:	4b66      	ldr	r3, [pc, #408]	@ (8006b10 <_strtod_l+0x858>)
 8006978:	3d01      	subs	r5, #1
 800697a:	429d      	cmp	r5, r3
 800697c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006980:	da50      	bge.n	8006a24 <_strtod_l+0x76c>
 8006982:	1b5b      	subs	r3, r3, r5
 8006984:	2b1f      	cmp	r3, #31
 8006986:	eba2 0203 	sub.w	r2, r2, r3
 800698a:	f04f 0101 	mov.w	r1, #1
 800698e:	dc3d      	bgt.n	8006a0c <_strtod_l+0x754>
 8006990:	fa01 f303 	lsl.w	r3, r1, r3
 8006994:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006996:	2300      	movs	r3, #0
 8006998:	9310      	str	r3, [sp, #64]	@ 0x40
 800699a:	18bd      	adds	r5, r7, r2
 800699c:	9b08      	ldr	r3, [sp, #32]
 800699e:	42af      	cmp	r7, r5
 80069a0:	4416      	add	r6, r2
 80069a2:	441e      	add	r6, r3
 80069a4:	463b      	mov	r3, r7
 80069a6:	bfa8      	it	ge
 80069a8:	462b      	movge	r3, r5
 80069aa:	42b3      	cmp	r3, r6
 80069ac:	bfa8      	it	ge
 80069ae:	4633      	movge	r3, r6
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bfc2      	ittt	gt
 80069b4:	1aed      	subgt	r5, r5, r3
 80069b6:	1af6      	subgt	r6, r6, r3
 80069b8:	1aff      	subgt	r7, r7, r3
 80069ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dd16      	ble.n	80069ee <_strtod_l+0x736>
 80069c0:	4641      	mov	r1, r8
 80069c2:	9805      	ldr	r0, [sp, #20]
 80069c4:	461a      	mov	r2, r3
 80069c6:	f002 ff0d 	bl	80097e4 <__pow5mult>
 80069ca:	4680      	mov	r8, r0
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d0ba      	beq.n	8006946 <_strtod_l+0x68e>
 80069d0:	4601      	mov	r1, r0
 80069d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80069d4:	9805      	ldr	r0, [sp, #20]
 80069d6:	f002 fe5b 	bl	8009690 <__multiply>
 80069da:	900e      	str	r0, [sp, #56]	@ 0x38
 80069dc:	2800      	cmp	r0, #0
 80069de:	f43f ae8a 	beq.w	80066f6 <_strtod_l+0x43e>
 80069e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069e4:	9805      	ldr	r0, [sp, #20]
 80069e6:	f002 fd3f 	bl	8009468 <_Bfree>
 80069ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80069ee:	2d00      	cmp	r5, #0
 80069f0:	dc1d      	bgt.n	8006a2e <_strtod_l+0x776>
 80069f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dd23      	ble.n	8006a40 <_strtod_l+0x788>
 80069f8:	4649      	mov	r1, r9
 80069fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80069fc:	9805      	ldr	r0, [sp, #20]
 80069fe:	f002 fef1 	bl	80097e4 <__pow5mult>
 8006a02:	4681      	mov	r9, r0
 8006a04:	b9e0      	cbnz	r0, 8006a40 <_strtod_l+0x788>
 8006a06:	f04f 0900 	mov.w	r9, #0
 8006a0a:	e674      	b.n	80066f6 <_strtod_l+0x43e>
 8006a0c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006a10:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006a14:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006a18:	35e2      	adds	r5, #226	@ 0xe2
 8006a1a:	fa01 f305 	lsl.w	r3, r1, r5
 8006a1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a20:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006a22:	e7ba      	b.n	800699a <_strtod_l+0x6e2>
 8006a24:	2300      	movs	r3, #0
 8006a26:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a28:	2301      	movs	r3, #1
 8006a2a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a2c:	e7b5      	b.n	800699a <_strtod_l+0x6e2>
 8006a2e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a30:	9805      	ldr	r0, [sp, #20]
 8006a32:	462a      	mov	r2, r5
 8006a34:	f002 ff30 	bl	8009898 <__lshift>
 8006a38:	901a      	str	r0, [sp, #104]	@ 0x68
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d1d9      	bne.n	80069f2 <_strtod_l+0x73a>
 8006a3e:	e65a      	b.n	80066f6 <_strtod_l+0x43e>
 8006a40:	2e00      	cmp	r6, #0
 8006a42:	dd07      	ble.n	8006a54 <_strtod_l+0x79c>
 8006a44:	4649      	mov	r1, r9
 8006a46:	9805      	ldr	r0, [sp, #20]
 8006a48:	4632      	mov	r2, r6
 8006a4a:	f002 ff25 	bl	8009898 <__lshift>
 8006a4e:	4681      	mov	r9, r0
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d0d8      	beq.n	8006a06 <_strtod_l+0x74e>
 8006a54:	2f00      	cmp	r7, #0
 8006a56:	dd08      	ble.n	8006a6a <_strtod_l+0x7b2>
 8006a58:	4641      	mov	r1, r8
 8006a5a:	9805      	ldr	r0, [sp, #20]
 8006a5c:	463a      	mov	r2, r7
 8006a5e:	f002 ff1b 	bl	8009898 <__lshift>
 8006a62:	4680      	mov	r8, r0
 8006a64:	2800      	cmp	r0, #0
 8006a66:	f43f ae46 	beq.w	80066f6 <_strtod_l+0x43e>
 8006a6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a6c:	9805      	ldr	r0, [sp, #20]
 8006a6e:	464a      	mov	r2, r9
 8006a70:	f002 ff9a 	bl	80099a8 <__mdiff>
 8006a74:	4604      	mov	r4, r0
 8006a76:	2800      	cmp	r0, #0
 8006a78:	f43f ae3d 	beq.w	80066f6 <_strtod_l+0x43e>
 8006a7c:	68c3      	ldr	r3, [r0, #12]
 8006a7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a80:	2300      	movs	r3, #0
 8006a82:	60c3      	str	r3, [r0, #12]
 8006a84:	4641      	mov	r1, r8
 8006a86:	f002 ff73 	bl	8009970 <__mcmp>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	da46      	bge.n	8006b1c <_strtod_l+0x864>
 8006a8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a90:	ea53 030a 	orrs.w	r3, r3, sl
 8006a94:	d16c      	bne.n	8006b70 <_strtod_l+0x8b8>
 8006a96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d168      	bne.n	8006b70 <_strtod_l+0x8b8>
 8006a9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006aa2:	0d1b      	lsrs	r3, r3, #20
 8006aa4:	051b      	lsls	r3, r3, #20
 8006aa6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006aaa:	d961      	bls.n	8006b70 <_strtod_l+0x8b8>
 8006aac:	6963      	ldr	r3, [r4, #20]
 8006aae:	b913      	cbnz	r3, 8006ab6 <_strtod_l+0x7fe>
 8006ab0:	6923      	ldr	r3, [r4, #16]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	dd5c      	ble.n	8006b70 <_strtod_l+0x8b8>
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	2201      	movs	r2, #1
 8006aba:	9805      	ldr	r0, [sp, #20]
 8006abc:	f002 feec 	bl	8009898 <__lshift>
 8006ac0:	4641      	mov	r1, r8
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	f002 ff54 	bl	8009970 <__mcmp>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	dd51      	ble.n	8006b70 <_strtod_l+0x8b8>
 8006acc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ad0:	9a08      	ldr	r2, [sp, #32]
 8006ad2:	0d1b      	lsrs	r3, r3, #20
 8006ad4:	051b      	lsls	r3, r3, #20
 8006ad6:	2a00      	cmp	r2, #0
 8006ad8:	d06b      	beq.n	8006bb2 <_strtod_l+0x8fa>
 8006ada:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006ade:	d868      	bhi.n	8006bb2 <_strtod_l+0x8fa>
 8006ae0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006ae4:	f67f ae9d 	bls.w	8006822 <_strtod_l+0x56a>
 8006ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8006b14 <_strtod_l+0x85c>)
 8006aea:	4650      	mov	r0, sl
 8006aec:	4659      	mov	r1, fp
 8006aee:	2200      	movs	r2, #0
 8006af0:	f7f9 fd92 	bl	8000618 <__aeabi_dmul>
 8006af4:	4b08      	ldr	r3, [pc, #32]	@ (8006b18 <_strtod_l+0x860>)
 8006af6:	400b      	ands	r3, r1
 8006af8:	4682      	mov	sl, r0
 8006afa:	468b      	mov	fp, r1
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f47f ae05 	bne.w	800670c <_strtod_l+0x454>
 8006b02:	9a05      	ldr	r2, [sp, #20]
 8006b04:	2322      	movs	r3, #34	@ 0x22
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	e600      	b.n	800670c <_strtod_l+0x454>
 8006b0a:	bf00      	nop
 8006b0c:	0800a5b8 	.word	0x0800a5b8
 8006b10:	fffffc02 	.word	0xfffffc02
 8006b14:	39500000 	.word	0x39500000
 8006b18:	7ff00000 	.word	0x7ff00000
 8006b1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006b20:	d165      	bne.n	8006bee <_strtod_l+0x936>
 8006b22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006b24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b28:	b35a      	cbz	r2, 8006b82 <_strtod_l+0x8ca>
 8006b2a:	4a9f      	ldr	r2, [pc, #636]	@ (8006da8 <_strtod_l+0xaf0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d12b      	bne.n	8006b88 <_strtod_l+0x8d0>
 8006b30:	9b08      	ldr	r3, [sp, #32]
 8006b32:	4651      	mov	r1, sl
 8006b34:	b303      	cbz	r3, 8006b78 <_strtod_l+0x8c0>
 8006b36:	4b9d      	ldr	r3, [pc, #628]	@ (8006dac <_strtod_l+0xaf4>)
 8006b38:	465a      	mov	r2, fp
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006b40:	f04f 32ff 	mov.w	r2, #4294967295
 8006b44:	d81b      	bhi.n	8006b7e <_strtod_l+0x8c6>
 8006b46:	0d1b      	lsrs	r3, r3, #20
 8006b48:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	4299      	cmp	r1, r3
 8006b52:	d119      	bne.n	8006b88 <_strtod_l+0x8d0>
 8006b54:	4b96      	ldr	r3, [pc, #600]	@ (8006db0 <_strtod_l+0xaf8>)
 8006b56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d102      	bne.n	8006b62 <_strtod_l+0x8aa>
 8006b5c:	3101      	adds	r1, #1
 8006b5e:	f43f adca 	beq.w	80066f6 <_strtod_l+0x43e>
 8006b62:	4b92      	ldr	r3, [pc, #584]	@ (8006dac <_strtod_l+0xaf4>)
 8006b64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b66:	401a      	ands	r2, r3
 8006b68:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006b6c:	f04f 0a00 	mov.w	sl, #0
 8006b70:	9b08      	ldr	r3, [sp, #32]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1b8      	bne.n	8006ae8 <_strtod_l+0x830>
 8006b76:	e5c9      	b.n	800670c <_strtod_l+0x454>
 8006b78:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7c:	e7e8      	b.n	8006b50 <_strtod_l+0x898>
 8006b7e:	4613      	mov	r3, r2
 8006b80:	e7e6      	b.n	8006b50 <_strtod_l+0x898>
 8006b82:	ea53 030a 	orrs.w	r3, r3, sl
 8006b86:	d0a1      	beq.n	8006acc <_strtod_l+0x814>
 8006b88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b8a:	b1db      	cbz	r3, 8006bc4 <_strtod_l+0x90c>
 8006b8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b8e:	4213      	tst	r3, r2
 8006b90:	d0ee      	beq.n	8006b70 <_strtod_l+0x8b8>
 8006b92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b94:	9a08      	ldr	r2, [sp, #32]
 8006b96:	4650      	mov	r0, sl
 8006b98:	4659      	mov	r1, fp
 8006b9a:	b1bb      	cbz	r3, 8006bcc <_strtod_l+0x914>
 8006b9c:	f7ff fb6d 	bl	800627a <sulp>
 8006ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ba4:	ec53 2b10 	vmov	r2, r3, d0
 8006ba8:	f7f9 fb80 	bl	80002ac <__adddf3>
 8006bac:	4682      	mov	sl, r0
 8006bae:	468b      	mov	fp, r1
 8006bb0:	e7de      	b.n	8006b70 <_strtod_l+0x8b8>
 8006bb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006bb6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006bba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006bbe:	f04f 3aff 	mov.w	sl, #4294967295
 8006bc2:	e7d5      	b.n	8006b70 <_strtod_l+0x8b8>
 8006bc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006bc6:	ea13 0f0a 	tst.w	r3, sl
 8006bca:	e7e1      	b.n	8006b90 <_strtod_l+0x8d8>
 8006bcc:	f7ff fb55 	bl	800627a <sulp>
 8006bd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bd4:	ec53 2b10 	vmov	r2, r3, d0
 8006bd8:	f7f9 fb66 	bl	80002a8 <__aeabi_dsub>
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2300      	movs	r3, #0
 8006be0:	4682      	mov	sl, r0
 8006be2:	468b      	mov	fp, r1
 8006be4:	f7f9 ff80 	bl	8000ae8 <__aeabi_dcmpeq>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d0c1      	beq.n	8006b70 <_strtod_l+0x8b8>
 8006bec:	e619      	b.n	8006822 <_strtod_l+0x56a>
 8006bee:	4641      	mov	r1, r8
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f003 f835 	bl	8009c60 <__ratio>
 8006bf6:	ec57 6b10 	vmov	r6, r7, d0
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006c00:	4630      	mov	r0, r6
 8006c02:	4639      	mov	r1, r7
 8006c04:	f7f9 ff84 	bl	8000b10 <__aeabi_dcmple>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d06f      	beq.n	8006cec <_strtod_l+0xa34>
 8006c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d17a      	bne.n	8006d08 <_strtod_l+0xa50>
 8006c12:	f1ba 0f00 	cmp.w	sl, #0
 8006c16:	d158      	bne.n	8006cca <_strtod_l+0xa12>
 8006c18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d15a      	bne.n	8006cd8 <_strtod_l+0xa20>
 8006c22:	4b64      	ldr	r3, [pc, #400]	@ (8006db4 <_strtod_l+0xafc>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	4630      	mov	r0, r6
 8006c28:	4639      	mov	r1, r7
 8006c2a:	f7f9 ff67 	bl	8000afc <__aeabi_dcmplt>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d159      	bne.n	8006ce6 <_strtod_l+0xa2e>
 8006c32:	4630      	mov	r0, r6
 8006c34:	4639      	mov	r1, r7
 8006c36:	4b60      	ldr	r3, [pc, #384]	@ (8006db8 <_strtod_l+0xb00>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f7f9 fced 	bl	8000618 <__aeabi_dmul>
 8006c3e:	4606      	mov	r6, r0
 8006c40:	460f      	mov	r7, r1
 8006c42:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006c46:	9606      	str	r6, [sp, #24]
 8006c48:	9307      	str	r3, [sp, #28]
 8006c4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c4e:	4d57      	ldr	r5, [pc, #348]	@ (8006dac <_strtod_l+0xaf4>)
 8006c50:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006c54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c56:	401d      	ands	r5, r3
 8006c58:	4b58      	ldr	r3, [pc, #352]	@ (8006dbc <_strtod_l+0xb04>)
 8006c5a:	429d      	cmp	r5, r3
 8006c5c:	f040 80b2 	bne.w	8006dc4 <_strtod_l+0xb0c>
 8006c60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c62:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006c66:	ec4b ab10 	vmov	d0, sl, fp
 8006c6a:	f002 ff31 	bl	8009ad0 <__ulp>
 8006c6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c72:	ec51 0b10 	vmov	r0, r1, d0
 8006c76:	f7f9 fccf 	bl	8000618 <__aeabi_dmul>
 8006c7a:	4652      	mov	r2, sl
 8006c7c:	465b      	mov	r3, fp
 8006c7e:	f7f9 fb15 	bl	80002ac <__adddf3>
 8006c82:	460b      	mov	r3, r1
 8006c84:	4949      	ldr	r1, [pc, #292]	@ (8006dac <_strtod_l+0xaf4>)
 8006c86:	4a4e      	ldr	r2, [pc, #312]	@ (8006dc0 <_strtod_l+0xb08>)
 8006c88:	4019      	ands	r1, r3
 8006c8a:	4291      	cmp	r1, r2
 8006c8c:	4682      	mov	sl, r0
 8006c8e:	d942      	bls.n	8006d16 <_strtod_l+0xa5e>
 8006c90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006c92:	4b47      	ldr	r3, [pc, #284]	@ (8006db0 <_strtod_l+0xaf8>)
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d103      	bne.n	8006ca0 <_strtod_l+0x9e8>
 8006c98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	f43f ad2b 	beq.w	80066f6 <_strtod_l+0x43e>
 8006ca0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006db0 <_strtod_l+0xaf8>
 8006ca4:	f04f 3aff 	mov.w	sl, #4294967295
 8006ca8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006caa:	9805      	ldr	r0, [sp, #20]
 8006cac:	f002 fbdc 	bl	8009468 <_Bfree>
 8006cb0:	9805      	ldr	r0, [sp, #20]
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	f002 fbd8 	bl	8009468 <_Bfree>
 8006cb8:	9805      	ldr	r0, [sp, #20]
 8006cba:	4641      	mov	r1, r8
 8006cbc:	f002 fbd4 	bl	8009468 <_Bfree>
 8006cc0:	9805      	ldr	r0, [sp, #20]
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	f002 fbd0 	bl	8009468 <_Bfree>
 8006cc8:	e618      	b.n	80068fc <_strtod_l+0x644>
 8006cca:	f1ba 0f01 	cmp.w	sl, #1
 8006cce:	d103      	bne.n	8006cd8 <_strtod_l+0xa20>
 8006cd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f43f ada5 	beq.w	8006822 <_strtod_l+0x56a>
 8006cd8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006d88 <_strtod_l+0xad0>
 8006cdc:	4f35      	ldr	r7, [pc, #212]	@ (8006db4 <_strtod_l+0xafc>)
 8006cde:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006ce2:	2600      	movs	r6, #0
 8006ce4:	e7b1      	b.n	8006c4a <_strtod_l+0x992>
 8006ce6:	4f34      	ldr	r7, [pc, #208]	@ (8006db8 <_strtod_l+0xb00>)
 8006ce8:	2600      	movs	r6, #0
 8006cea:	e7aa      	b.n	8006c42 <_strtod_l+0x98a>
 8006cec:	4b32      	ldr	r3, [pc, #200]	@ (8006db8 <_strtod_l+0xb00>)
 8006cee:	4630      	mov	r0, r6
 8006cf0:	4639      	mov	r1, r7
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f7f9 fc90 	bl	8000618 <__aeabi_dmul>
 8006cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	460f      	mov	r7, r1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d09f      	beq.n	8006c42 <_strtod_l+0x98a>
 8006d02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006d06:	e7a0      	b.n	8006c4a <_strtod_l+0x992>
 8006d08:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006d90 <_strtod_l+0xad8>
 8006d0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006d10:	ec57 6b17 	vmov	r6, r7, d7
 8006d14:	e799      	b.n	8006c4a <_strtod_l+0x992>
 8006d16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1c1      	bne.n	8006ca8 <_strtod_l+0x9f0>
 8006d24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d28:	0d1b      	lsrs	r3, r3, #20
 8006d2a:	051b      	lsls	r3, r3, #20
 8006d2c:	429d      	cmp	r5, r3
 8006d2e:	d1bb      	bne.n	8006ca8 <_strtod_l+0x9f0>
 8006d30:	4630      	mov	r0, r6
 8006d32:	4639      	mov	r1, r7
 8006d34:	f7f9 ffd0 	bl	8000cd8 <__aeabi_d2lz>
 8006d38:	f7f9 fc40 	bl	80005bc <__aeabi_l2d>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4630      	mov	r0, r6
 8006d42:	4639      	mov	r1, r7
 8006d44:	f7f9 fab0 	bl	80002a8 <__aeabi_dsub>
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006d50:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d56:	ea46 060a 	orr.w	r6, r6, sl
 8006d5a:	431e      	orrs	r6, r3
 8006d5c:	d06f      	beq.n	8006e3e <_strtod_l+0xb86>
 8006d5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006d98 <_strtod_l+0xae0>)
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f7f9 feca 	bl	8000afc <__aeabi_dcmplt>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	f47f accf 	bne.w	800670c <_strtod_l+0x454>
 8006d6e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006da0 <_strtod_l+0xae8>)
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d78:	f7f9 fede 	bl	8000b38 <__aeabi_dcmpgt>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d093      	beq.n	8006ca8 <_strtod_l+0x9f0>
 8006d80:	e4c4      	b.n	800670c <_strtod_l+0x454>
 8006d82:	bf00      	nop
 8006d84:	f3af 8000 	nop.w
 8006d88:	00000000 	.word	0x00000000
 8006d8c:	bff00000 	.word	0xbff00000
 8006d90:	00000000 	.word	0x00000000
 8006d94:	3ff00000 	.word	0x3ff00000
 8006d98:	94a03595 	.word	0x94a03595
 8006d9c:	3fdfffff 	.word	0x3fdfffff
 8006da0:	35afe535 	.word	0x35afe535
 8006da4:	3fe00000 	.word	0x3fe00000
 8006da8:	000fffff 	.word	0x000fffff
 8006dac:	7ff00000 	.word	0x7ff00000
 8006db0:	7fefffff 	.word	0x7fefffff
 8006db4:	3ff00000 	.word	0x3ff00000
 8006db8:	3fe00000 	.word	0x3fe00000
 8006dbc:	7fe00000 	.word	0x7fe00000
 8006dc0:	7c9fffff 	.word	0x7c9fffff
 8006dc4:	9b08      	ldr	r3, [sp, #32]
 8006dc6:	b323      	cbz	r3, 8006e12 <_strtod_l+0xb5a>
 8006dc8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006dcc:	d821      	bhi.n	8006e12 <_strtod_l+0xb5a>
 8006dce:	a328      	add	r3, pc, #160	@ (adr r3, 8006e70 <_strtod_l+0xbb8>)
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	f7f9 fe9a 	bl	8000b10 <__aeabi_dcmple>
 8006ddc:	b1a0      	cbz	r0, 8006e08 <_strtod_l+0xb50>
 8006dde:	4639      	mov	r1, r7
 8006de0:	4630      	mov	r0, r6
 8006de2:	f7f9 fef1 	bl	8000bc8 <__aeabi_d2uiz>
 8006de6:	2801      	cmp	r0, #1
 8006de8:	bf38      	it	cc
 8006dea:	2001      	movcc	r0, #1
 8006dec:	f7f9 fb9a 	bl	8000524 <__aeabi_ui2d>
 8006df0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006df2:	4606      	mov	r6, r0
 8006df4:	460f      	mov	r7, r1
 8006df6:	b9fb      	cbnz	r3, 8006e38 <_strtod_l+0xb80>
 8006df8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006dfc:	9014      	str	r0, [sp, #80]	@ 0x50
 8006dfe:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006e04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006e08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006e0e:	1b5b      	subs	r3, r3, r5
 8006e10:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006e16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006e1a:	f002 fe59 	bl	8009ad0 <__ulp>
 8006e1e:	4650      	mov	r0, sl
 8006e20:	ec53 2b10 	vmov	r2, r3, d0
 8006e24:	4659      	mov	r1, fp
 8006e26:	f7f9 fbf7 	bl	8000618 <__aeabi_dmul>
 8006e2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006e2e:	f7f9 fa3d 	bl	80002ac <__adddf3>
 8006e32:	4682      	mov	sl, r0
 8006e34:	468b      	mov	fp, r1
 8006e36:	e770      	b.n	8006d1a <_strtod_l+0xa62>
 8006e38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006e3c:	e7e0      	b.n	8006e00 <_strtod_l+0xb48>
 8006e3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006e78 <_strtod_l+0xbc0>)
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	f7f9 fe5a 	bl	8000afc <__aeabi_dcmplt>
 8006e48:	e798      	b.n	8006d7c <_strtod_l+0xac4>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e4e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006e50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	f7ff ba6d 	b.w	8006332 <_strtod_l+0x7a>
 8006e58:	2a65      	cmp	r2, #101	@ 0x65
 8006e5a:	f43f ab66 	beq.w	800652a <_strtod_l+0x272>
 8006e5e:	2a45      	cmp	r2, #69	@ 0x45
 8006e60:	f43f ab63 	beq.w	800652a <_strtod_l+0x272>
 8006e64:	2301      	movs	r3, #1
 8006e66:	f7ff bb9e 	b.w	80065a6 <_strtod_l+0x2ee>
 8006e6a:	bf00      	nop
 8006e6c:	f3af 8000 	nop.w
 8006e70:	ffc00000 	.word	0xffc00000
 8006e74:	41dfffff 	.word	0x41dfffff
 8006e78:	94a03595 	.word	0x94a03595
 8006e7c:	3fcfffff 	.word	0x3fcfffff

08006e80 <strtod>:
 8006e80:	460a      	mov	r2, r1
 8006e82:	4601      	mov	r1, r0
 8006e84:	4802      	ldr	r0, [pc, #8]	@ (8006e90 <strtod+0x10>)
 8006e86:	4b03      	ldr	r3, [pc, #12]	@ (8006e94 <strtod+0x14>)
 8006e88:	6800      	ldr	r0, [r0, #0]
 8006e8a:	f7ff ba15 	b.w	80062b8 <_strtod_l>
 8006e8e:	bf00      	nop
 8006e90:	20000184 	.word	0x20000184
 8006e94:	20000018 	.word	0x20000018

08006e98 <_strtol_l.constprop.0>:
 8006e98:	2b24      	cmp	r3, #36	@ 0x24
 8006e9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e9e:	4686      	mov	lr, r0
 8006ea0:	4690      	mov	r8, r2
 8006ea2:	d801      	bhi.n	8006ea8 <_strtol_l.constprop.0+0x10>
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d106      	bne.n	8006eb6 <_strtol_l.constprop.0+0x1e>
 8006ea8:	f000 ff98 	bl	8007ddc <__errno>
 8006eac:	2316      	movs	r3, #22
 8006eae:	6003      	str	r3, [r0, #0]
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb6:	4834      	ldr	r0, [pc, #208]	@ (8006f88 <_strtol_l.constprop.0+0xf0>)
 8006eb8:	460d      	mov	r5, r1
 8006eba:	462a      	mov	r2, r5
 8006ebc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ec0:	5d06      	ldrb	r6, [r0, r4]
 8006ec2:	f016 0608 	ands.w	r6, r6, #8
 8006ec6:	d1f8      	bne.n	8006eba <_strtol_l.constprop.0+0x22>
 8006ec8:	2c2d      	cmp	r4, #45	@ 0x2d
 8006eca:	d12d      	bne.n	8006f28 <_strtol_l.constprop.0+0x90>
 8006ecc:	782c      	ldrb	r4, [r5, #0]
 8006ece:	2601      	movs	r6, #1
 8006ed0:	1c95      	adds	r5, r2, #2
 8006ed2:	f033 0210 	bics.w	r2, r3, #16
 8006ed6:	d109      	bne.n	8006eec <_strtol_l.constprop.0+0x54>
 8006ed8:	2c30      	cmp	r4, #48	@ 0x30
 8006eda:	d12a      	bne.n	8006f32 <_strtol_l.constprop.0+0x9a>
 8006edc:	782a      	ldrb	r2, [r5, #0]
 8006ede:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006ee2:	2a58      	cmp	r2, #88	@ 0x58
 8006ee4:	d125      	bne.n	8006f32 <_strtol_l.constprop.0+0x9a>
 8006ee6:	786c      	ldrb	r4, [r5, #1]
 8006ee8:	2310      	movs	r3, #16
 8006eea:	3502      	adds	r5, #2
 8006eec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006ef0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	fbbc f9f3 	udiv	r9, ip, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	fb03 ca19 	mls	sl, r3, r9, ip
 8006f00:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006f04:	2f09      	cmp	r7, #9
 8006f06:	d81b      	bhi.n	8006f40 <_strtol_l.constprop.0+0xa8>
 8006f08:	463c      	mov	r4, r7
 8006f0a:	42a3      	cmp	r3, r4
 8006f0c:	dd27      	ble.n	8006f5e <_strtol_l.constprop.0+0xc6>
 8006f0e:	1c57      	adds	r7, r2, #1
 8006f10:	d007      	beq.n	8006f22 <_strtol_l.constprop.0+0x8a>
 8006f12:	4581      	cmp	r9, r0
 8006f14:	d320      	bcc.n	8006f58 <_strtol_l.constprop.0+0xc0>
 8006f16:	d101      	bne.n	8006f1c <_strtol_l.constprop.0+0x84>
 8006f18:	45a2      	cmp	sl, r4
 8006f1a:	db1d      	blt.n	8006f58 <_strtol_l.constprop.0+0xc0>
 8006f1c:	fb00 4003 	mla	r0, r0, r3, r4
 8006f20:	2201      	movs	r2, #1
 8006f22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f26:	e7eb      	b.n	8006f00 <_strtol_l.constprop.0+0x68>
 8006f28:	2c2b      	cmp	r4, #43	@ 0x2b
 8006f2a:	bf04      	itt	eq
 8006f2c:	782c      	ldrbeq	r4, [r5, #0]
 8006f2e:	1c95      	addeq	r5, r2, #2
 8006f30:	e7cf      	b.n	8006ed2 <_strtol_l.constprop.0+0x3a>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1da      	bne.n	8006eec <_strtol_l.constprop.0+0x54>
 8006f36:	2c30      	cmp	r4, #48	@ 0x30
 8006f38:	bf0c      	ite	eq
 8006f3a:	2308      	moveq	r3, #8
 8006f3c:	230a      	movne	r3, #10
 8006f3e:	e7d5      	b.n	8006eec <_strtol_l.constprop.0+0x54>
 8006f40:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006f44:	2f19      	cmp	r7, #25
 8006f46:	d801      	bhi.n	8006f4c <_strtol_l.constprop.0+0xb4>
 8006f48:	3c37      	subs	r4, #55	@ 0x37
 8006f4a:	e7de      	b.n	8006f0a <_strtol_l.constprop.0+0x72>
 8006f4c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006f50:	2f19      	cmp	r7, #25
 8006f52:	d804      	bhi.n	8006f5e <_strtol_l.constprop.0+0xc6>
 8006f54:	3c57      	subs	r4, #87	@ 0x57
 8006f56:	e7d8      	b.n	8006f0a <_strtol_l.constprop.0+0x72>
 8006f58:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5c:	e7e1      	b.n	8006f22 <_strtol_l.constprop.0+0x8a>
 8006f5e:	1c53      	adds	r3, r2, #1
 8006f60:	d108      	bne.n	8006f74 <_strtol_l.constprop.0+0xdc>
 8006f62:	2322      	movs	r3, #34	@ 0x22
 8006f64:	f8ce 3000 	str.w	r3, [lr]
 8006f68:	4660      	mov	r0, ip
 8006f6a:	f1b8 0f00 	cmp.w	r8, #0
 8006f6e:	d0a0      	beq.n	8006eb2 <_strtol_l.constprop.0+0x1a>
 8006f70:	1e69      	subs	r1, r5, #1
 8006f72:	e006      	b.n	8006f82 <_strtol_l.constprop.0+0xea>
 8006f74:	b106      	cbz	r6, 8006f78 <_strtol_l.constprop.0+0xe0>
 8006f76:	4240      	negs	r0, r0
 8006f78:	f1b8 0f00 	cmp.w	r8, #0
 8006f7c:	d099      	beq.n	8006eb2 <_strtol_l.constprop.0+0x1a>
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	d1f6      	bne.n	8006f70 <_strtol_l.constprop.0+0xd8>
 8006f82:	f8c8 1000 	str.w	r1, [r8]
 8006f86:	e794      	b.n	8006eb2 <_strtol_l.constprop.0+0x1a>
 8006f88:	0800a5e1 	.word	0x0800a5e1

08006f8c <strtol>:
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	460a      	mov	r2, r1
 8006f90:	4601      	mov	r1, r0
 8006f92:	4802      	ldr	r0, [pc, #8]	@ (8006f9c <strtol+0x10>)
 8006f94:	6800      	ldr	r0, [r0, #0]
 8006f96:	f7ff bf7f 	b.w	8006e98 <_strtol_l.constprop.0>
 8006f9a:	bf00      	nop
 8006f9c:	20000184 	.word	0x20000184

08006fa0 <__cvt>:
 8006fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa4:	ec57 6b10 	vmov	r6, r7, d0
 8006fa8:	2f00      	cmp	r7, #0
 8006faa:	460c      	mov	r4, r1
 8006fac:	4619      	mov	r1, r3
 8006fae:	463b      	mov	r3, r7
 8006fb0:	bfbb      	ittet	lt
 8006fb2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006fb6:	461f      	movlt	r7, r3
 8006fb8:	2300      	movge	r3, #0
 8006fba:	232d      	movlt	r3, #45	@ 0x2d
 8006fbc:	700b      	strb	r3, [r1, #0]
 8006fbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fc0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006fc4:	4691      	mov	r9, r2
 8006fc6:	f023 0820 	bic.w	r8, r3, #32
 8006fca:	bfbc      	itt	lt
 8006fcc:	4632      	movlt	r2, r6
 8006fce:	4616      	movlt	r6, r2
 8006fd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fd4:	d005      	beq.n	8006fe2 <__cvt+0x42>
 8006fd6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006fda:	d100      	bne.n	8006fde <__cvt+0x3e>
 8006fdc:	3401      	adds	r4, #1
 8006fde:	2102      	movs	r1, #2
 8006fe0:	e000      	b.n	8006fe4 <__cvt+0x44>
 8006fe2:	2103      	movs	r1, #3
 8006fe4:	ab03      	add	r3, sp, #12
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	ab02      	add	r3, sp, #8
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	ec47 6b10 	vmov	d0, r6, r7
 8006ff0:	4653      	mov	r3, sl
 8006ff2:	4622      	mov	r2, r4
 8006ff4:	f000 ffe8 	bl	8007fc8 <_dtoa_r>
 8006ff8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	d119      	bne.n	8007034 <__cvt+0x94>
 8007000:	f019 0f01 	tst.w	r9, #1
 8007004:	d00e      	beq.n	8007024 <__cvt+0x84>
 8007006:	eb00 0904 	add.w	r9, r0, r4
 800700a:	2200      	movs	r2, #0
 800700c:	2300      	movs	r3, #0
 800700e:	4630      	mov	r0, r6
 8007010:	4639      	mov	r1, r7
 8007012:	f7f9 fd69 	bl	8000ae8 <__aeabi_dcmpeq>
 8007016:	b108      	cbz	r0, 800701c <__cvt+0x7c>
 8007018:	f8cd 900c 	str.w	r9, [sp, #12]
 800701c:	2230      	movs	r2, #48	@ 0x30
 800701e:	9b03      	ldr	r3, [sp, #12]
 8007020:	454b      	cmp	r3, r9
 8007022:	d31e      	bcc.n	8007062 <__cvt+0xc2>
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007028:	1b5b      	subs	r3, r3, r5
 800702a:	4628      	mov	r0, r5
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	b004      	add	sp, #16
 8007030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007034:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007038:	eb00 0904 	add.w	r9, r0, r4
 800703c:	d1e5      	bne.n	800700a <__cvt+0x6a>
 800703e:	7803      	ldrb	r3, [r0, #0]
 8007040:	2b30      	cmp	r3, #48	@ 0x30
 8007042:	d10a      	bne.n	800705a <__cvt+0xba>
 8007044:	2200      	movs	r2, #0
 8007046:	2300      	movs	r3, #0
 8007048:	4630      	mov	r0, r6
 800704a:	4639      	mov	r1, r7
 800704c:	f7f9 fd4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8007050:	b918      	cbnz	r0, 800705a <__cvt+0xba>
 8007052:	f1c4 0401 	rsb	r4, r4, #1
 8007056:	f8ca 4000 	str.w	r4, [sl]
 800705a:	f8da 3000 	ldr.w	r3, [sl]
 800705e:	4499      	add	r9, r3
 8007060:	e7d3      	b.n	800700a <__cvt+0x6a>
 8007062:	1c59      	adds	r1, r3, #1
 8007064:	9103      	str	r1, [sp, #12]
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	e7d9      	b.n	800701e <__cvt+0x7e>

0800706a <__exponent>:
 800706a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800706c:	2900      	cmp	r1, #0
 800706e:	bfba      	itte	lt
 8007070:	4249      	neglt	r1, r1
 8007072:	232d      	movlt	r3, #45	@ 0x2d
 8007074:	232b      	movge	r3, #43	@ 0x2b
 8007076:	2909      	cmp	r1, #9
 8007078:	7002      	strb	r2, [r0, #0]
 800707a:	7043      	strb	r3, [r0, #1]
 800707c:	dd29      	ble.n	80070d2 <__exponent+0x68>
 800707e:	f10d 0307 	add.w	r3, sp, #7
 8007082:	461d      	mov	r5, r3
 8007084:	270a      	movs	r7, #10
 8007086:	461a      	mov	r2, r3
 8007088:	fbb1 f6f7 	udiv	r6, r1, r7
 800708c:	fb07 1416 	mls	r4, r7, r6, r1
 8007090:	3430      	adds	r4, #48	@ 0x30
 8007092:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007096:	460c      	mov	r4, r1
 8007098:	2c63      	cmp	r4, #99	@ 0x63
 800709a:	f103 33ff 	add.w	r3, r3, #4294967295
 800709e:	4631      	mov	r1, r6
 80070a0:	dcf1      	bgt.n	8007086 <__exponent+0x1c>
 80070a2:	3130      	adds	r1, #48	@ 0x30
 80070a4:	1e94      	subs	r4, r2, #2
 80070a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80070aa:	1c41      	adds	r1, r0, #1
 80070ac:	4623      	mov	r3, r4
 80070ae:	42ab      	cmp	r3, r5
 80070b0:	d30a      	bcc.n	80070c8 <__exponent+0x5e>
 80070b2:	f10d 0309 	add.w	r3, sp, #9
 80070b6:	1a9b      	subs	r3, r3, r2
 80070b8:	42ac      	cmp	r4, r5
 80070ba:	bf88      	it	hi
 80070bc:	2300      	movhi	r3, #0
 80070be:	3302      	adds	r3, #2
 80070c0:	4403      	add	r3, r0
 80070c2:	1a18      	subs	r0, r3, r0
 80070c4:	b003      	add	sp, #12
 80070c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80070cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80070d0:	e7ed      	b.n	80070ae <__exponent+0x44>
 80070d2:	2330      	movs	r3, #48	@ 0x30
 80070d4:	3130      	adds	r1, #48	@ 0x30
 80070d6:	7083      	strb	r3, [r0, #2]
 80070d8:	70c1      	strb	r1, [r0, #3]
 80070da:	1d03      	adds	r3, r0, #4
 80070dc:	e7f1      	b.n	80070c2 <__exponent+0x58>
	...

080070e0 <_printf_float>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	b08d      	sub	sp, #52	@ 0x34
 80070e6:	460c      	mov	r4, r1
 80070e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80070ec:	4616      	mov	r6, r2
 80070ee:	461f      	mov	r7, r3
 80070f0:	4605      	mov	r5, r0
 80070f2:	f000 fe29 	bl	8007d48 <_localeconv_r>
 80070f6:	6803      	ldr	r3, [r0, #0]
 80070f8:	9304      	str	r3, [sp, #16]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7f9 f8c8 	bl	8000290 <strlen>
 8007100:	2300      	movs	r3, #0
 8007102:	930a      	str	r3, [sp, #40]	@ 0x28
 8007104:	f8d8 3000 	ldr.w	r3, [r8]
 8007108:	9005      	str	r0, [sp, #20]
 800710a:	3307      	adds	r3, #7
 800710c:	f023 0307 	bic.w	r3, r3, #7
 8007110:	f103 0208 	add.w	r2, r3, #8
 8007114:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007118:	f8d4 b000 	ldr.w	fp, [r4]
 800711c:	f8c8 2000 	str.w	r2, [r8]
 8007120:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007124:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007128:	9307      	str	r3, [sp, #28]
 800712a:	f8cd 8018 	str.w	r8, [sp, #24]
 800712e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007132:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007136:	4b9c      	ldr	r3, [pc, #624]	@ (80073a8 <_printf_float+0x2c8>)
 8007138:	f04f 32ff 	mov.w	r2, #4294967295
 800713c:	f7f9 fd06 	bl	8000b4c <__aeabi_dcmpun>
 8007140:	bb70      	cbnz	r0, 80071a0 <_printf_float+0xc0>
 8007142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007146:	4b98      	ldr	r3, [pc, #608]	@ (80073a8 <_printf_float+0x2c8>)
 8007148:	f04f 32ff 	mov.w	r2, #4294967295
 800714c:	f7f9 fce0 	bl	8000b10 <__aeabi_dcmple>
 8007150:	bb30      	cbnz	r0, 80071a0 <_printf_float+0xc0>
 8007152:	2200      	movs	r2, #0
 8007154:	2300      	movs	r3, #0
 8007156:	4640      	mov	r0, r8
 8007158:	4649      	mov	r1, r9
 800715a:	f7f9 fccf 	bl	8000afc <__aeabi_dcmplt>
 800715e:	b110      	cbz	r0, 8007166 <_printf_float+0x86>
 8007160:	232d      	movs	r3, #45	@ 0x2d
 8007162:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007166:	4a91      	ldr	r2, [pc, #580]	@ (80073ac <_printf_float+0x2cc>)
 8007168:	4b91      	ldr	r3, [pc, #580]	@ (80073b0 <_printf_float+0x2d0>)
 800716a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800716e:	bf94      	ite	ls
 8007170:	4690      	movls	r8, r2
 8007172:	4698      	movhi	r8, r3
 8007174:	2303      	movs	r3, #3
 8007176:	6123      	str	r3, [r4, #16]
 8007178:	f02b 0304 	bic.w	r3, fp, #4
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	f04f 0900 	mov.w	r9, #0
 8007182:	9700      	str	r7, [sp, #0]
 8007184:	4633      	mov	r3, r6
 8007186:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007188:	4621      	mov	r1, r4
 800718a:	4628      	mov	r0, r5
 800718c:	f000 f9d2 	bl	8007534 <_printf_common>
 8007190:	3001      	adds	r0, #1
 8007192:	f040 808d 	bne.w	80072b0 <_printf_float+0x1d0>
 8007196:	f04f 30ff 	mov.w	r0, #4294967295
 800719a:	b00d      	add	sp, #52	@ 0x34
 800719c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a0:	4642      	mov	r2, r8
 80071a2:	464b      	mov	r3, r9
 80071a4:	4640      	mov	r0, r8
 80071a6:	4649      	mov	r1, r9
 80071a8:	f7f9 fcd0 	bl	8000b4c <__aeabi_dcmpun>
 80071ac:	b140      	cbz	r0, 80071c0 <_printf_float+0xe0>
 80071ae:	464b      	mov	r3, r9
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	bfbc      	itt	lt
 80071b4:	232d      	movlt	r3, #45	@ 0x2d
 80071b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80071ba:	4a7e      	ldr	r2, [pc, #504]	@ (80073b4 <_printf_float+0x2d4>)
 80071bc:	4b7e      	ldr	r3, [pc, #504]	@ (80073b8 <_printf_float+0x2d8>)
 80071be:	e7d4      	b.n	800716a <_printf_float+0x8a>
 80071c0:	6863      	ldr	r3, [r4, #4]
 80071c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80071c6:	9206      	str	r2, [sp, #24]
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	d13b      	bne.n	8007244 <_printf_float+0x164>
 80071cc:	2306      	movs	r3, #6
 80071ce:	6063      	str	r3, [r4, #4]
 80071d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80071d4:	2300      	movs	r3, #0
 80071d6:	6022      	str	r2, [r4, #0]
 80071d8:	9303      	str	r3, [sp, #12]
 80071da:	ab0a      	add	r3, sp, #40	@ 0x28
 80071dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80071e0:	ab09      	add	r3, sp, #36	@ 0x24
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	6861      	ldr	r1, [r4, #4]
 80071e6:	ec49 8b10 	vmov	d0, r8, r9
 80071ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80071ee:	4628      	mov	r0, r5
 80071f0:	f7ff fed6 	bl	8006fa0 <__cvt>
 80071f4:	9b06      	ldr	r3, [sp, #24]
 80071f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071f8:	2b47      	cmp	r3, #71	@ 0x47
 80071fa:	4680      	mov	r8, r0
 80071fc:	d129      	bne.n	8007252 <_printf_float+0x172>
 80071fe:	1cc8      	adds	r0, r1, #3
 8007200:	db02      	blt.n	8007208 <_printf_float+0x128>
 8007202:	6863      	ldr	r3, [r4, #4]
 8007204:	4299      	cmp	r1, r3
 8007206:	dd41      	ble.n	800728c <_printf_float+0x1ac>
 8007208:	f1aa 0a02 	sub.w	sl, sl, #2
 800720c:	fa5f fa8a 	uxtb.w	sl, sl
 8007210:	3901      	subs	r1, #1
 8007212:	4652      	mov	r2, sl
 8007214:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007218:	9109      	str	r1, [sp, #36]	@ 0x24
 800721a:	f7ff ff26 	bl	800706a <__exponent>
 800721e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007220:	1813      	adds	r3, r2, r0
 8007222:	2a01      	cmp	r2, #1
 8007224:	4681      	mov	r9, r0
 8007226:	6123      	str	r3, [r4, #16]
 8007228:	dc02      	bgt.n	8007230 <_printf_float+0x150>
 800722a:	6822      	ldr	r2, [r4, #0]
 800722c:	07d2      	lsls	r2, r2, #31
 800722e:	d501      	bpl.n	8007234 <_printf_float+0x154>
 8007230:	3301      	adds	r3, #1
 8007232:	6123      	str	r3, [r4, #16]
 8007234:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007238:	2b00      	cmp	r3, #0
 800723a:	d0a2      	beq.n	8007182 <_printf_float+0xa2>
 800723c:	232d      	movs	r3, #45	@ 0x2d
 800723e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007242:	e79e      	b.n	8007182 <_printf_float+0xa2>
 8007244:	9a06      	ldr	r2, [sp, #24]
 8007246:	2a47      	cmp	r2, #71	@ 0x47
 8007248:	d1c2      	bne.n	80071d0 <_printf_float+0xf0>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1c0      	bne.n	80071d0 <_printf_float+0xf0>
 800724e:	2301      	movs	r3, #1
 8007250:	e7bd      	b.n	80071ce <_printf_float+0xee>
 8007252:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007256:	d9db      	bls.n	8007210 <_printf_float+0x130>
 8007258:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800725c:	d118      	bne.n	8007290 <_printf_float+0x1b0>
 800725e:	2900      	cmp	r1, #0
 8007260:	6863      	ldr	r3, [r4, #4]
 8007262:	dd0b      	ble.n	800727c <_printf_float+0x19c>
 8007264:	6121      	str	r1, [r4, #16]
 8007266:	b913      	cbnz	r3, 800726e <_printf_float+0x18e>
 8007268:	6822      	ldr	r2, [r4, #0]
 800726a:	07d0      	lsls	r0, r2, #31
 800726c:	d502      	bpl.n	8007274 <_printf_float+0x194>
 800726e:	3301      	adds	r3, #1
 8007270:	440b      	add	r3, r1
 8007272:	6123      	str	r3, [r4, #16]
 8007274:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007276:	f04f 0900 	mov.w	r9, #0
 800727a:	e7db      	b.n	8007234 <_printf_float+0x154>
 800727c:	b913      	cbnz	r3, 8007284 <_printf_float+0x1a4>
 800727e:	6822      	ldr	r2, [r4, #0]
 8007280:	07d2      	lsls	r2, r2, #31
 8007282:	d501      	bpl.n	8007288 <_printf_float+0x1a8>
 8007284:	3302      	adds	r3, #2
 8007286:	e7f4      	b.n	8007272 <_printf_float+0x192>
 8007288:	2301      	movs	r3, #1
 800728a:	e7f2      	b.n	8007272 <_printf_float+0x192>
 800728c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007292:	4299      	cmp	r1, r3
 8007294:	db05      	blt.n	80072a2 <_printf_float+0x1c2>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	6121      	str	r1, [r4, #16]
 800729a:	07d8      	lsls	r0, r3, #31
 800729c:	d5ea      	bpl.n	8007274 <_printf_float+0x194>
 800729e:	1c4b      	adds	r3, r1, #1
 80072a0:	e7e7      	b.n	8007272 <_printf_float+0x192>
 80072a2:	2900      	cmp	r1, #0
 80072a4:	bfd4      	ite	le
 80072a6:	f1c1 0202 	rsble	r2, r1, #2
 80072aa:	2201      	movgt	r2, #1
 80072ac:	4413      	add	r3, r2
 80072ae:	e7e0      	b.n	8007272 <_printf_float+0x192>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	055a      	lsls	r2, r3, #21
 80072b4:	d407      	bmi.n	80072c6 <_printf_float+0x1e6>
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	4642      	mov	r2, r8
 80072ba:	4631      	mov	r1, r6
 80072bc:	4628      	mov	r0, r5
 80072be:	47b8      	blx	r7
 80072c0:	3001      	adds	r0, #1
 80072c2:	d12b      	bne.n	800731c <_printf_float+0x23c>
 80072c4:	e767      	b.n	8007196 <_printf_float+0xb6>
 80072c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072ca:	f240 80dd 	bls.w	8007488 <_printf_float+0x3a8>
 80072ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072d2:	2200      	movs	r2, #0
 80072d4:	2300      	movs	r3, #0
 80072d6:	f7f9 fc07 	bl	8000ae8 <__aeabi_dcmpeq>
 80072da:	2800      	cmp	r0, #0
 80072dc:	d033      	beq.n	8007346 <_printf_float+0x266>
 80072de:	4a37      	ldr	r2, [pc, #220]	@ (80073bc <_printf_float+0x2dc>)
 80072e0:	2301      	movs	r3, #1
 80072e2:	4631      	mov	r1, r6
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b8      	blx	r7
 80072e8:	3001      	adds	r0, #1
 80072ea:	f43f af54 	beq.w	8007196 <_printf_float+0xb6>
 80072ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80072f2:	4543      	cmp	r3, r8
 80072f4:	db02      	blt.n	80072fc <_printf_float+0x21c>
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	07d8      	lsls	r0, r3, #31
 80072fa:	d50f      	bpl.n	800731c <_printf_float+0x23c>
 80072fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007300:	4631      	mov	r1, r6
 8007302:	4628      	mov	r0, r5
 8007304:	47b8      	blx	r7
 8007306:	3001      	adds	r0, #1
 8007308:	f43f af45 	beq.w	8007196 <_printf_float+0xb6>
 800730c:	f04f 0900 	mov.w	r9, #0
 8007310:	f108 38ff 	add.w	r8, r8, #4294967295
 8007314:	f104 0a1a 	add.w	sl, r4, #26
 8007318:	45c8      	cmp	r8, r9
 800731a:	dc09      	bgt.n	8007330 <_printf_float+0x250>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	079b      	lsls	r3, r3, #30
 8007320:	f100 8103 	bmi.w	800752a <_printf_float+0x44a>
 8007324:	68e0      	ldr	r0, [r4, #12]
 8007326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007328:	4298      	cmp	r0, r3
 800732a:	bfb8      	it	lt
 800732c:	4618      	movlt	r0, r3
 800732e:	e734      	b.n	800719a <_printf_float+0xba>
 8007330:	2301      	movs	r3, #1
 8007332:	4652      	mov	r2, sl
 8007334:	4631      	mov	r1, r6
 8007336:	4628      	mov	r0, r5
 8007338:	47b8      	blx	r7
 800733a:	3001      	adds	r0, #1
 800733c:	f43f af2b 	beq.w	8007196 <_printf_float+0xb6>
 8007340:	f109 0901 	add.w	r9, r9, #1
 8007344:	e7e8      	b.n	8007318 <_printf_float+0x238>
 8007346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007348:	2b00      	cmp	r3, #0
 800734a:	dc39      	bgt.n	80073c0 <_printf_float+0x2e0>
 800734c:	4a1b      	ldr	r2, [pc, #108]	@ (80073bc <_printf_float+0x2dc>)
 800734e:	2301      	movs	r3, #1
 8007350:	4631      	mov	r1, r6
 8007352:	4628      	mov	r0, r5
 8007354:	47b8      	blx	r7
 8007356:	3001      	adds	r0, #1
 8007358:	f43f af1d 	beq.w	8007196 <_printf_float+0xb6>
 800735c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007360:	ea59 0303 	orrs.w	r3, r9, r3
 8007364:	d102      	bne.n	800736c <_printf_float+0x28c>
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	07d9      	lsls	r1, r3, #31
 800736a:	d5d7      	bpl.n	800731c <_printf_float+0x23c>
 800736c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007370:	4631      	mov	r1, r6
 8007372:	4628      	mov	r0, r5
 8007374:	47b8      	blx	r7
 8007376:	3001      	adds	r0, #1
 8007378:	f43f af0d 	beq.w	8007196 <_printf_float+0xb6>
 800737c:	f04f 0a00 	mov.w	sl, #0
 8007380:	f104 0b1a 	add.w	fp, r4, #26
 8007384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007386:	425b      	negs	r3, r3
 8007388:	4553      	cmp	r3, sl
 800738a:	dc01      	bgt.n	8007390 <_printf_float+0x2b0>
 800738c:	464b      	mov	r3, r9
 800738e:	e793      	b.n	80072b8 <_printf_float+0x1d8>
 8007390:	2301      	movs	r3, #1
 8007392:	465a      	mov	r2, fp
 8007394:	4631      	mov	r1, r6
 8007396:	4628      	mov	r0, r5
 8007398:	47b8      	blx	r7
 800739a:	3001      	adds	r0, #1
 800739c:	f43f aefb 	beq.w	8007196 <_printf_float+0xb6>
 80073a0:	f10a 0a01 	add.w	sl, sl, #1
 80073a4:	e7ee      	b.n	8007384 <_printf_float+0x2a4>
 80073a6:	bf00      	nop
 80073a8:	7fefffff 	.word	0x7fefffff
 80073ac:	0800a6e1 	.word	0x0800a6e1
 80073b0:	0800a6e5 	.word	0x0800a6e5
 80073b4:	0800a6e9 	.word	0x0800a6e9
 80073b8:	0800a6ed 	.word	0x0800a6ed
 80073bc:	0800a6f1 	.word	0x0800a6f1
 80073c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80073c6:	4553      	cmp	r3, sl
 80073c8:	bfa8      	it	ge
 80073ca:	4653      	movge	r3, sl
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	4699      	mov	r9, r3
 80073d0:	dc36      	bgt.n	8007440 <_printf_float+0x360>
 80073d2:	f04f 0b00 	mov.w	fp, #0
 80073d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073da:	f104 021a 	add.w	r2, r4, #26
 80073de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073e0:	9306      	str	r3, [sp, #24]
 80073e2:	eba3 0309 	sub.w	r3, r3, r9
 80073e6:	455b      	cmp	r3, fp
 80073e8:	dc31      	bgt.n	800744e <_printf_float+0x36e>
 80073ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ec:	459a      	cmp	sl, r3
 80073ee:	dc3a      	bgt.n	8007466 <_printf_float+0x386>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	07da      	lsls	r2, r3, #31
 80073f4:	d437      	bmi.n	8007466 <_printf_float+0x386>
 80073f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f8:	ebaa 0903 	sub.w	r9, sl, r3
 80073fc:	9b06      	ldr	r3, [sp, #24]
 80073fe:	ebaa 0303 	sub.w	r3, sl, r3
 8007402:	4599      	cmp	r9, r3
 8007404:	bfa8      	it	ge
 8007406:	4699      	movge	r9, r3
 8007408:	f1b9 0f00 	cmp.w	r9, #0
 800740c:	dc33      	bgt.n	8007476 <_printf_float+0x396>
 800740e:	f04f 0800 	mov.w	r8, #0
 8007412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007416:	f104 0b1a 	add.w	fp, r4, #26
 800741a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800741c:	ebaa 0303 	sub.w	r3, sl, r3
 8007420:	eba3 0309 	sub.w	r3, r3, r9
 8007424:	4543      	cmp	r3, r8
 8007426:	f77f af79 	ble.w	800731c <_printf_float+0x23c>
 800742a:	2301      	movs	r3, #1
 800742c:	465a      	mov	r2, fp
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	f43f aeae 	beq.w	8007196 <_printf_float+0xb6>
 800743a:	f108 0801 	add.w	r8, r8, #1
 800743e:	e7ec      	b.n	800741a <_printf_float+0x33a>
 8007440:	4642      	mov	r2, r8
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	d1c2      	bne.n	80073d2 <_printf_float+0x2f2>
 800744c:	e6a3      	b.n	8007196 <_printf_float+0xb6>
 800744e:	2301      	movs	r3, #1
 8007450:	4631      	mov	r1, r6
 8007452:	4628      	mov	r0, r5
 8007454:	9206      	str	r2, [sp, #24]
 8007456:	47b8      	blx	r7
 8007458:	3001      	adds	r0, #1
 800745a:	f43f ae9c 	beq.w	8007196 <_printf_float+0xb6>
 800745e:	9a06      	ldr	r2, [sp, #24]
 8007460:	f10b 0b01 	add.w	fp, fp, #1
 8007464:	e7bb      	b.n	80073de <_printf_float+0x2fe>
 8007466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800746a:	4631      	mov	r1, r6
 800746c:	4628      	mov	r0, r5
 800746e:	47b8      	blx	r7
 8007470:	3001      	adds	r0, #1
 8007472:	d1c0      	bne.n	80073f6 <_printf_float+0x316>
 8007474:	e68f      	b.n	8007196 <_printf_float+0xb6>
 8007476:	9a06      	ldr	r2, [sp, #24]
 8007478:	464b      	mov	r3, r9
 800747a:	4442      	add	r2, r8
 800747c:	4631      	mov	r1, r6
 800747e:	4628      	mov	r0, r5
 8007480:	47b8      	blx	r7
 8007482:	3001      	adds	r0, #1
 8007484:	d1c3      	bne.n	800740e <_printf_float+0x32e>
 8007486:	e686      	b.n	8007196 <_printf_float+0xb6>
 8007488:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800748c:	f1ba 0f01 	cmp.w	sl, #1
 8007490:	dc01      	bgt.n	8007496 <_printf_float+0x3b6>
 8007492:	07db      	lsls	r3, r3, #31
 8007494:	d536      	bpl.n	8007504 <_printf_float+0x424>
 8007496:	2301      	movs	r3, #1
 8007498:	4642      	mov	r2, r8
 800749a:	4631      	mov	r1, r6
 800749c:	4628      	mov	r0, r5
 800749e:	47b8      	blx	r7
 80074a0:	3001      	adds	r0, #1
 80074a2:	f43f ae78 	beq.w	8007196 <_printf_float+0xb6>
 80074a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074aa:	4631      	mov	r1, r6
 80074ac:	4628      	mov	r0, r5
 80074ae:	47b8      	blx	r7
 80074b0:	3001      	adds	r0, #1
 80074b2:	f43f ae70 	beq.w	8007196 <_printf_float+0xb6>
 80074b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80074ba:	2200      	movs	r2, #0
 80074bc:	2300      	movs	r3, #0
 80074be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074c2:	f7f9 fb11 	bl	8000ae8 <__aeabi_dcmpeq>
 80074c6:	b9c0      	cbnz	r0, 80074fa <_printf_float+0x41a>
 80074c8:	4653      	mov	r3, sl
 80074ca:	f108 0201 	add.w	r2, r8, #1
 80074ce:	4631      	mov	r1, r6
 80074d0:	4628      	mov	r0, r5
 80074d2:	47b8      	blx	r7
 80074d4:	3001      	adds	r0, #1
 80074d6:	d10c      	bne.n	80074f2 <_printf_float+0x412>
 80074d8:	e65d      	b.n	8007196 <_printf_float+0xb6>
 80074da:	2301      	movs	r3, #1
 80074dc:	465a      	mov	r2, fp
 80074de:	4631      	mov	r1, r6
 80074e0:	4628      	mov	r0, r5
 80074e2:	47b8      	blx	r7
 80074e4:	3001      	adds	r0, #1
 80074e6:	f43f ae56 	beq.w	8007196 <_printf_float+0xb6>
 80074ea:	f108 0801 	add.w	r8, r8, #1
 80074ee:	45d0      	cmp	r8, sl
 80074f0:	dbf3      	blt.n	80074da <_printf_float+0x3fa>
 80074f2:	464b      	mov	r3, r9
 80074f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80074f8:	e6df      	b.n	80072ba <_printf_float+0x1da>
 80074fa:	f04f 0800 	mov.w	r8, #0
 80074fe:	f104 0b1a 	add.w	fp, r4, #26
 8007502:	e7f4      	b.n	80074ee <_printf_float+0x40e>
 8007504:	2301      	movs	r3, #1
 8007506:	4642      	mov	r2, r8
 8007508:	e7e1      	b.n	80074ce <_printf_float+0x3ee>
 800750a:	2301      	movs	r3, #1
 800750c:	464a      	mov	r2, r9
 800750e:	4631      	mov	r1, r6
 8007510:	4628      	mov	r0, r5
 8007512:	47b8      	blx	r7
 8007514:	3001      	adds	r0, #1
 8007516:	f43f ae3e 	beq.w	8007196 <_printf_float+0xb6>
 800751a:	f108 0801 	add.w	r8, r8, #1
 800751e:	68e3      	ldr	r3, [r4, #12]
 8007520:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007522:	1a5b      	subs	r3, r3, r1
 8007524:	4543      	cmp	r3, r8
 8007526:	dcf0      	bgt.n	800750a <_printf_float+0x42a>
 8007528:	e6fc      	b.n	8007324 <_printf_float+0x244>
 800752a:	f04f 0800 	mov.w	r8, #0
 800752e:	f104 0919 	add.w	r9, r4, #25
 8007532:	e7f4      	b.n	800751e <_printf_float+0x43e>

08007534 <_printf_common>:
 8007534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007538:	4616      	mov	r6, r2
 800753a:	4698      	mov	r8, r3
 800753c:	688a      	ldr	r2, [r1, #8]
 800753e:	690b      	ldr	r3, [r1, #16]
 8007540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007544:	4293      	cmp	r3, r2
 8007546:	bfb8      	it	lt
 8007548:	4613      	movlt	r3, r2
 800754a:	6033      	str	r3, [r6, #0]
 800754c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007550:	4607      	mov	r7, r0
 8007552:	460c      	mov	r4, r1
 8007554:	b10a      	cbz	r2, 800755a <_printf_common+0x26>
 8007556:	3301      	adds	r3, #1
 8007558:	6033      	str	r3, [r6, #0]
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	0699      	lsls	r1, r3, #26
 800755e:	bf42      	ittt	mi
 8007560:	6833      	ldrmi	r3, [r6, #0]
 8007562:	3302      	addmi	r3, #2
 8007564:	6033      	strmi	r3, [r6, #0]
 8007566:	6825      	ldr	r5, [r4, #0]
 8007568:	f015 0506 	ands.w	r5, r5, #6
 800756c:	d106      	bne.n	800757c <_printf_common+0x48>
 800756e:	f104 0a19 	add.w	sl, r4, #25
 8007572:	68e3      	ldr	r3, [r4, #12]
 8007574:	6832      	ldr	r2, [r6, #0]
 8007576:	1a9b      	subs	r3, r3, r2
 8007578:	42ab      	cmp	r3, r5
 800757a:	dc26      	bgt.n	80075ca <_printf_common+0x96>
 800757c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	3b00      	subs	r3, #0
 8007584:	bf18      	it	ne
 8007586:	2301      	movne	r3, #1
 8007588:	0692      	lsls	r2, r2, #26
 800758a:	d42b      	bmi.n	80075e4 <_printf_common+0xb0>
 800758c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007590:	4641      	mov	r1, r8
 8007592:	4638      	mov	r0, r7
 8007594:	47c8      	blx	r9
 8007596:	3001      	adds	r0, #1
 8007598:	d01e      	beq.n	80075d8 <_printf_common+0xa4>
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	6922      	ldr	r2, [r4, #16]
 800759e:	f003 0306 	and.w	r3, r3, #6
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	bf02      	ittt	eq
 80075a6:	68e5      	ldreq	r5, [r4, #12]
 80075a8:	6833      	ldreq	r3, [r6, #0]
 80075aa:	1aed      	subeq	r5, r5, r3
 80075ac:	68a3      	ldr	r3, [r4, #8]
 80075ae:	bf0c      	ite	eq
 80075b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075b4:	2500      	movne	r5, #0
 80075b6:	4293      	cmp	r3, r2
 80075b8:	bfc4      	itt	gt
 80075ba:	1a9b      	subgt	r3, r3, r2
 80075bc:	18ed      	addgt	r5, r5, r3
 80075be:	2600      	movs	r6, #0
 80075c0:	341a      	adds	r4, #26
 80075c2:	42b5      	cmp	r5, r6
 80075c4:	d11a      	bne.n	80075fc <_printf_common+0xc8>
 80075c6:	2000      	movs	r0, #0
 80075c8:	e008      	b.n	80075dc <_printf_common+0xa8>
 80075ca:	2301      	movs	r3, #1
 80075cc:	4652      	mov	r2, sl
 80075ce:	4641      	mov	r1, r8
 80075d0:	4638      	mov	r0, r7
 80075d2:	47c8      	blx	r9
 80075d4:	3001      	adds	r0, #1
 80075d6:	d103      	bne.n	80075e0 <_printf_common+0xac>
 80075d8:	f04f 30ff 	mov.w	r0, #4294967295
 80075dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e0:	3501      	adds	r5, #1
 80075e2:	e7c6      	b.n	8007572 <_printf_common+0x3e>
 80075e4:	18e1      	adds	r1, r4, r3
 80075e6:	1c5a      	adds	r2, r3, #1
 80075e8:	2030      	movs	r0, #48	@ 0x30
 80075ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075ee:	4422      	add	r2, r4
 80075f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075f8:	3302      	adds	r3, #2
 80075fa:	e7c7      	b.n	800758c <_printf_common+0x58>
 80075fc:	2301      	movs	r3, #1
 80075fe:	4622      	mov	r2, r4
 8007600:	4641      	mov	r1, r8
 8007602:	4638      	mov	r0, r7
 8007604:	47c8      	blx	r9
 8007606:	3001      	adds	r0, #1
 8007608:	d0e6      	beq.n	80075d8 <_printf_common+0xa4>
 800760a:	3601      	adds	r6, #1
 800760c:	e7d9      	b.n	80075c2 <_printf_common+0x8e>
	...

08007610 <_printf_i>:
 8007610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007614:	7e0f      	ldrb	r7, [r1, #24]
 8007616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007618:	2f78      	cmp	r7, #120	@ 0x78
 800761a:	4691      	mov	r9, r2
 800761c:	4680      	mov	r8, r0
 800761e:	460c      	mov	r4, r1
 8007620:	469a      	mov	sl, r3
 8007622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007626:	d807      	bhi.n	8007638 <_printf_i+0x28>
 8007628:	2f62      	cmp	r7, #98	@ 0x62
 800762a:	d80a      	bhi.n	8007642 <_printf_i+0x32>
 800762c:	2f00      	cmp	r7, #0
 800762e:	f000 80d2 	beq.w	80077d6 <_printf_i+0x1c6>
 8007632:	2f58      	cmp	r7, #88	@ 0x58
 8007634:	f000 80b9 	beq.w	80077aa <_printf_i+0x19a>
 8007638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800763c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007640:	e03a      	b.n	80076b8 <_printf_i+0xa8>
 8007642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007646:	2b15      	cmp	r3, #21
 8007648:	d8f6      	bhi.n	8007638 <_printf_i+0x28>
 800764a:	a101      	add	r1, pc, #4	@ (adr r1, 8007650 <_printf_i+0x40>)
 800764c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007650:	080076a9 	.word	0x080076a9
 8007654:	080076bd 	.word	0x080076bd
 8007658:	08007639 	.word	0x08007639
 800765c:	08007639 	.word	0x08007639
 8007660:	08007639 	.word	0x08007639
 8007664:	08007639 	.word	0x08007639
 8007668:	080076bd 	.word	0x080076bd
 800766c:	08007639 	.word	0x08007639
 8007670:	08007639 	.word	0x08007639
 8007674:	08007639 	.word	0x08007639
 8007678:	08007639 	.word	0x08007639
 800767c:	080077bd 	.word	0x080077bd
 8007680:	080076e7 	.word	0x080076e7
 8007684:	08007777 	.word	0x08007777
 8007688:	08007639 	.word	0x08007639
 800768c:	08007639 	.word	0x08007639
 8007690:	080077df 	.word	0x080077df
 8007694:	08007639 	.word	0x08007639
 8007698:	080076e7 	.word	0x080076e7
 800769c:	08007639 	.word	0x08007639
 80076a0:	08007639 	.word	0x08007639
 80076a4:	0800777f 	.word	0x0800777f
 80076a8:	6833      	ldr	r3, [r6, #0]
 80076aa:	1d1a      	adds	r2, r3, #4
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6032      	str	r2, [r6, #0]
 80076b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076b8:	2301      	movs	r3, #1
 80076ba:	e09d      	b.n	80077f8 <_printf_i+0x1e8>
 80076bc:	6833      	ldr	r3, [r6, #0]
 80076be:	6820      	ldr	r0, [r4, #0]
 80076c0:	1d19      	adds	r1, r3, #4
 80076c2:	6031      	str	r1, [r6, #0]
 80076c4:	0606      	lsls	r6, r0, #24
 80076c6:	d501      	bpl.n	80076cc <_printf_i+0xbc>
 80076c8:	681d      	ldr	r5, [r3, #0]
 80076ca:	e003      	b.n	80076d4 <_printf_i+0xc4>
 80076cc:	0645      	lsls	r5, r0, #25
 80076ce:	d5fb      	bpl.n	80076c8 <_printf_i+0xb8>
 80076d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076d4:	2d00      	cmp	r5, #0
 80076d6:	da03      	bge.n	80076e0 <_printf_i+0xd0>
 80076d8:	232d      	movs	r3, #45	@ 0x2d
 80076da:	426d      	negs	r5, r5
 80076dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076e0:	4859      	ldr	r0, [pc, #356]	@ (8007848 <_printf_i+0x238>)
 80076e2:	230a      	movs	r3, #10
 80076e4:	e011      	b.n	800770a <_printf_i+0xfa>
 80076e6:	6821      	ldr	r1, [r4, #0]
 80076e8:	6833      	ldr	r3, [r6, #0]
 80076ea:	0608      	lsls	r0, r1, #24
 80076ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80076f0:	d402      	bmi.n	80076f8 <_printf_i+0xe8>
 80076f2:	0649      	lsls	r1, r1, #25
 80076f4:	bf48      	it	mi
 80076f6:	b2ad      	uxthmi	r5, r5
 80076f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80076fa:	4853      	ldr	r0, [pc, #332]	@ (8007848 <_printf_i+0x238>)
 80076fc:	6033      	str	r3, [r6, #0]
 80076fe:	bf14      	ite	ne
 8007700:	230a      	movne	r3, #10
 8007702:	2308      	moveq	r3, #8
 8007704:	2100      	movs	r1, #0
 8007706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800770a:	6866      	ldr	r6, [r4, #4]
 800770c:	60a6      	str	r6, [r4, #8]
 800770e:	2e00      	cmp	r6, #0
 8007710:	bfa2      	ittt	ge
 8007712:	6821      	ldrge	r1, [r4, #0]
 8007714:	f021 0104 	bicge.w	r1, r1, #4
 8007718:	6021      	strge	r1, [r4, #0]
 800771a:	b90d      	cbnz	r5, 8007720 <_printf_i+0x110>
 800771c:	2e00      	cmp	r6, #0
 800771e:	d04b      	beq.n	80077b8 <_printf_i+0x1a8>
 8007720:	4616      	mov	r6, r2
 8007722:	fbb5 f1f3 	udiv	r1, r5, r3
 8007726:	fb03 5711 	mls	r7, r3, r1, r5
 800772a:	5dc7      	ldrb	r7, [r0, r7]
 800772c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007730:	462f      	mov	r7, r5
 8007732:	42bb      	cmp	r3, r7
 8007734:	460d      	mov	r5, r1
 8007736:	d9f4      	bls.n	8007722 <_printf_i+0x112>
 8007738:	2b08      	cmp	r3, #8
 800773a:	d10b      	bne.n	8007754 <_printf_i+0x144>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	07df      	lsls	r7, r3, #31
 8007740:	d508      	bpl.n	8007754 <_printf_i+0x144>
 8007742:	6923      	ldr	r3, [r4, #16]
 8007744:	6861      	ldr	r1, [r4, #4]
 8007746:	4299      	cmp	r1, r3
 8007748:	bfde      	ittt	le
 800774a:	2330      	movle	r3, #48	@ 0x30
 800774c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007750:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007754:	1b92      	subs	r2, r2, r6
 8007756:	6122      	str	r2, [r4, #16]
 8007758:	f8cd a000 	str.w	sl, [sp]
 800775c:	464b      	mov	r3, r9
 800775e:	aa03      	add	r2, sp, #12
 8007760:	4621      	mov	r1, r4
 8007762:	4640      	mov	r0, r8
 8007764:	f7ff fee6 	bl	8007534 <_printf_common>
 8007768:	3001      	adds	r0, #1
 800776a:	d14a      	bne.n	8007802 <_printf_i+0x1f2>
 800776c:	f04f 30ff 	mov.w	r0, #4294967295
 8007770:	b004      	add	sp, #16
 8007772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	f043 0320 	orr.w	r3, r3, #32
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	4833      	ldr	r0, [pc, #204]	@ (800784c <_printf_i+0x23c>)
 8007780:	2778      	movs	r7, #120	@ 0x78
 8007782:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	6831      	ldr	r1, [r6, #0]
 800778a:	061f      	lsls	r7, r3, #24
 800778c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007790:	d402      	bmi.n	8007798 <_printf_i+0x188>
 8007792:	065f      	lsls	r7, r3, #25
 8007794:	bf48      	it	mi
 8007796:	b2ad      	uxthmi	r5, r5
 8007798:	6031      	str	r1, [r6, #0]
 800779a:	07d9      	lsls	r1, r3, #31
 800779c:	bf44      	itt	mi
 800779e:	f043 0320 	orrmi.w	r3, r3, #32
 80077a2:	6023      	strmi	r3, [r4, #0]
 80077a4:	b11d      	cbz	r5, 80077ae <_printf_i+0x19e>
 80077a6:	2310      	movs	r3, #16
 80077a8:	e7ac      	b.n	8007704 <_printf_i+0xf4>
 80077aa:	4827      	ldr	r0, [pc, #156]	@ (8007848 <_printf_i+0x238>)
 80077ac:	e7e9      	b.n	8007782 <_printf_i+0x172>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	f023 0320 	bic.w	r3, r3, #32
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	e7f6      	b.n	80077a6 <_printf_i+0x196>
 80077b8:	4616      	mov	r6, r2
 80077ba:	e7bd      	b.n	8007738 <_printf_i+0x128>
 80077bc:	6833      	ldr	r3, [r6, #0]
 80077be:	6825      	ldr	r5, [r4, #0]
 80077c0:	6961      	ldr	r1, [r4, #20]
 80077c2:	1d18      	adds	r0, r3, #4
 80077c4:	6030      	str	r0, [r6, #0]
 80077c6:	062e      	lsls	r6, r5, #24
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	d501      	bpl.n	80077d0 <_printf_i+0x1c0>
 80077cc:	6019      	str	r1, [r3, #0]
 80077ce:	e002      	b.n	80077d6 <_printf_i+0x1c6>
 80077d0:	0668      	lsls	r0, r5, #25
 80077d2:	d5fb      	bpl.n	80077cc <_printf_i+0x1bc>
 80077d4:	8019      	strh	r1, [r3, #0]
 80077d6:	2300      	movs	r3, #0
 80077d8:	6123      	str	r3, [r4, #16]
 80077da:	4616      	mov	r6, r2
 80077dc:	e7bc      	b.n	8007758 <_printf_i+0x148>
 80077de:	6833      	ldr	r3, [r6, #0]
 80077e0:	1d1a      	adds	r2, r3, #4
 80077e2:	6032      	str	r2, [r6, #0]
 80077e4:	681e      	ldr	r6, [r3, #0]
 80077e6:	6862      	ldr	r2, [r4, #4]
 80077e8:	2100      	movs	r1, #0
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7f8 fd00 	bl	80001f0 <memchr>
 80077f0:	b108      	cbz	r0, 80077f6 <_printf_i+0x1e6>
 80077f2:	1b80      	subs	r0, r0, r6
 80077f4:	6060      	str	r0, [r4, #4]
 80077f6:	6863      	ldr	r3, [r4, #4]
 80077f8:	6123      	str	r3, [r4, #16]
 80077fa:	2300      	movs	r3, #0
 80077fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007800:	e7aa      	b.n	8007758 <_printf_i+0x148>
 8007802:	6923      	ldr	r3, [r4, #16]
 8007804:	4632      	mov	r2, r6
 8007806:	4649      	mov	r1, r9
 8007808:	4640      	mov	r0, r8
 800780a:	47d0      	blx	sl
 800780c:	3001      	adds	r0, #1
 800780e:	d0ad      	beq.n	800776c <_printf_i+0x15c>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	079b      	lsls	r3, r3, #30
 8007814:	d413      	bmi.n	800783e <_printf_i+0x22e>
 8007816:	68e0      	ldr	r0, [r4, #12]
 8007818:	9b03      	ldr	r3, [sp, #12]
 800781a:	4298      	cmp	r0, r3
 800781c:	bfb8      	it	lt
 800781e:	4618      	movlt	r0, r3
 8007820:	e7a6      	b.n	8007770 <_printf_i+0x160>
 8007822:	2301      	movs	r3, #1
 8007824:	4632      	mov	r2, r6
 8007826:	4649      	mov	r1, r9
 8007828:	4640      	mov	r0, r8
 800782a:	47d0      	blx	sl
 800782c:	3001      	adds	r0, #1
 800782e:	d09d      	beq.n	800776c <_printf_i+0x15c>
 8007830:	3501      	adds	r5, #1
 8007832:	68e3      	ldr	r3, [r4, #12]
 8007834:	9903      	ldr	r1, [sp, #12]
 8007836:	1a5b      	subs	r3, r3, r1
 8007838:	42ab      	cmp	r3, r5
 800783a:	dcf2      	bgt.n	8007822 <_printf_i+0x212>
 800783c:	e7eb      	b.n	8007816 <_printf_i+0x206>
 800783e:	2500      	movs	r5, #0
 8007840:	f104 0619 	add.w	r6, r4, #25
 8007844:	e7f5      	b.n	8007832 <_printf_i+0x222>
 8007846:	bf00      	nop
 8007848:	0800a6f3 	.word	0x0800a6f3
 800784c:	0800a704 	.word	0x0800a704

08007850 <std>:
 8007850:	2300      	movs	r3, #0
 8007852:	b510      	push	{r4, lr}
 8007854:	4604      	mov	r4, r0
 8007856:	e9c0 3300 	strd	r3, r3, [r0]
 800785a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800785e:	6083      	str	r3, [r0, #8]
 8007860:	8181      	strh	r1, [r0, #12]
 8007862:	6643      	str	r3, [r0, #100]	@ 0x64
 8007864:	81c2      	strh	r2, [r0, #14]
 8007866:	6183      	str	r3, [r0, #24]
 8007868:	4619      	mov	r1, r3
 800786a:	2208      	movs	r2, #8
 800786c:	305c      	adds	r0, #92	@ 0x5c
 800786e:	f000 f9e7 	bl	8007c40 <memset>
 8007872:	4b0d      	ldr	r3, [pc, #52]	@ (80078a8 <std+0x58>)
 8007874:	6263      	str	r3, [r4, #36]	@ 0x24
 8007876:	4b0d      	ldr	r3, [pc, #52]	@ (80078ac <std+0x5c>)
 8007878:	62a3      	str	r3, [r4, #40]	@ 0x28
 800787a:	4b0d      	ldr	r3, [pc, #52]	@ (80078b0 <std+0x60>)
 800787c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800787e:	4b0d      	ldr	r3, [pc, #52]	@ (80078b4 <std+0x64>)
 8007880:	6323      	str	r3, [r4, #48]	@ 0x30
 8007882:	4b0d      	ldr	r3, [pc, #52]	@ (80078b8 <std+0x68>)
 8007884:	6224      	str	r4, [r4, #32]
 8007886:	429c      	cmp	r4, r3
 8007888:	d006      	beq.n	8007898 <std+0x48>
 800788a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800788e:	4294      	cmp	r4, r2
 8007890:	d002      	beq.n	8007898 <std+0x48>
 8007892:	33d0      	adds	r3, #208	@ 0xd0
 8007894:	429c      	cmp	r4, r3
 8007896:	d105      	bne.n	80078a4 <std+0x54>
 8007898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800789c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078a0:	f000 bac6 	b.w	8007e30 <__retarget_lock_init_recursive>
 80078a4:	bd10      	pop	{r4, pc}
 80078a6:	bf00      	nop
 80078a8:	08007a91 	.word	0x08007a91
 80078ac:	08007ab3 	.word	0x08007ab3
 80078b0:	08007aeb 	.word	0x08007aeb
 80078b4:	08007b0f 	.word	0x08007b0f
 80078b8:	200007c0 	.word	0x200007c0

080078bc <stdio_exit_handler>:
 80078bc:	4a02      	ldr	r2, [pc, #8]	@ (80078c8 <stdio_exit_handler+0xc>)
 80078be:	4903      	ldr	r1, [pc, #12]	@ (80078cc <stdio_exit_handler+0x10>)
 80078c0:	4803      	ldr	r0, [pc, #12]	@ (80078d0 <stdio_exit_handler+0x14>)
 80078c2:	f000 b869 	b.w	8007998 <_fwalk_sglue>
 80078c6:	bf00      	nop
 80078c8:	2000000c 	.word	0x2000000c
 80078cc:	08009e71 	.word	0x08009e71
 80078d0:	20000188 	.word	0x20000188

080078d4 <cleanup_stdio>:
 80078d4:	6841      	ldr	r1, [r0, #4]
 80078d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007908 <cleanup_stdio+0x34>)
 80078d8:	4299      	cmp	r1, r3
 80078da:	b510      	push	{r4, lr}
 80078dc:	4604      	mov	r4, r0
 80078de:	d001      	beq.n	80078e4 <cleanup_stdio+0x10>
 80078e0:	f002 fac6 	bl	8009e70 <_fflush_r>
 80078e4:	68a1      	ldr	r1, [r4, #8]
 80078e6:	4b09      	ldr	r3, [pc, #36]	@ (800790c <cleanup_stdio+0x38>)
 80078e8:	4299      	cmp	r1, r3
 80078ea:	d002      	beq.n	80078f2 <cleanup_stdio+0x1e>
 80078ec:	4620      	mov	r0, r4
 80078ee:	f002 fabf 	bl	8009e70 <_fflush_r>
 80078f2:	68e1      	ldr	r1, [r4, #12]
 80078f4:	4b06      	ldr	r3, [pc, #24]	@ (8007910 <cleanup_stdio+0x3c>)
 80078f6:	4299      	cmp	r1, r3
 80078f8:	d004      	beq.n	8007904 <cleanup_stdio+0x30>
 80078fa:	4620      	mov	r0, r4
 80078fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007900:	f002 bab6 	b.w	8009e70 <_fflush_r>
 8007904:	bd10      	pop	{r4, pc}
 8007906:	bf00      	nop
 8007908:	200007c0 	.word	0x200007c0
 800790c:	20000828 	.word	0x20000828
 8007910:	20000890 	.word	0x20000890

08007914 <global_stdio_init.part.0>:
 8007914:	b510      	push	{r4, lr}
 8007916:	4b0b      	ldr	r3, [pc, #44]	@ (8007944 <global_stdio_init.part.0+0x30>)
 8007918:	4c0b      	ldr	r4, [pc, #44]	@ (8007948 <global_stdio_init.part.0+0x34>)
 800791a:	4a0c      	ldr	r2, [pc, #48]	@ (800794c <global_stdio_init.part.0+0x38>)
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	4620      	mov	r0, r4
 8007920:	2200      	movs	r2, #0
 8007922:	2104      	movs	r1, #4
 8007924:	f7ff ff94 	bl	8007850 <std>
 8007928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800792c:	2201      	movs	r2, #1
 800792e:	2109      	movs	r1, #9
 8007930:	f7ff ff8e 	bl	8007850 <std>
 8007934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007938:	2202      	movs	r2, #2
 800793a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800793e:	2112      	movs	r1, #18
 8007940:	f7ff bf86 	b.w	8007850 <std>
 8007944:	200008f8 	.word	0x200008f8
 8007948:	200007c0 	.word	0x200007c0
 800794c:	080078bd 	.word	0x080078bd

08007950 <__sfp_lock_acquire>:
 8007950:	4801      	ldr	r0, [pc, #4]	@ (8007958 <__sfp_lock_acquire+0x8>)
 8007952:	f000 ba6e 	b.w	8007e32 <__retarget_lock_acquire_recursive>
 8007956:	bf00      	nop
 8007958:	20000901 	.word	0x20000901

0800795c <__sfp_lock_release>:
 800795c:	4801      	ldr	r0, [pc, #4]	@ (8007964 <__sfp_lock_release+0x8>)
 800795e:	f000 ba69 	b.w	8007e34 <__retarget_lock_release_recursive>
 8007962:	bf00      	nop
 8007964:	20000901 	.word	0x20000901

08007968 <__sinit>:
 8007968:	b510      	push	{r4, lr}
 800796a:	4604      	mov	r4, r0
 800796c:	f7ff fff0 	bl	8007950 <__sfp_lock_acquire>
 8007970:	6a23      	ldr	r3, [r4, #32]
 8007972:	b11b      	cbz	r3, 800797c <__sinit+0x14>
 8007974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007978:	f7ff bff0 	b.w	800795c <__sfp_lock_release>
 800797c:	4b04      	ldr	r3, [pc, #16]	@ (8007990 <__sinit+0x28>)
 800797e:	6223      	str	r3, [r4, #32]
 8007980:	4b04      	ldr	r3, [pc, #16]	@ (8007994 <__sinit+0x2c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1f5      	bne.n	8007974 <__sinit+0xc>
 8007988:	f7ff ffc4 	bl	8007914 <global_stdio_init.part.0>
 800798c:	e7f2      	b.n	8007974 <__sinit+0xc>
 800798e:	bf00      	nop
 8007990:	080078d5 	.word	0x080078d5
 8007994:	200008f8 	.word	0x200008f8

08007998 <_fwalk_sglue>:
 8007998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800799c:	4607      	mov	r7, r0
 800799e:	4688      	mov	r8, r1
 80079a0:	4614      	mov	r4, r2
 80079a2:	2600      	movs	r6, #0
 80079a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079a8:	f1b9 0901 	subs.w	r9, r9, #1
 80079ac:	d505      	bpl.n	80079ba <_fwalk_sglue+0x22>
 80079ae:	6824      	ldr	r4, [r4, #0]
 80079b0:	2c00      	cmp	r4, #0
 80079b2:	d1f7      	bne.n	80079a4 <_fwalk_sglue+0xc>
 80079b4:	4630      	mov	r0, r6
 80079b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ba:	89ab      	ldrh	r3, [r5, #12]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d907      	bls.n	80079d0 <_fwalk_sglue+0x38>
 80079c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079c4:	3301      	adds	r3, #1
 80079c6:	d003      	beq.n	80079d0 <_fwalk_sglue+0x38>
 80079c8:	4629      	mov	r1, r5
 80079ca:	4638      	mov	r0, r7
 80079cc:	47c0      	blx	r8
 80079ce:	4306      	orrs	r6, r0
 80079d0:	3568      	adds	r5, #104	@ 0x68
 80079d2:	e7e9      	b.n	80079a8 <_fwalk_sglue+0x10>

080079d4 <_puts_r>:
 80079d4:	6a03      	ldr	r3, [r0, #32]
 80079d6:	b570      	push	{r4, r5, r6, lr}
 80079d8:	6884      	ldr	r4, [r0, #8]
 80079da:	4605      	mov	r5, r0
 80079dc:	460e      	mov	r6, r1
 80079de:	b90b      	cbnz	r3, 80079e4 <_puts_r+0x10>
 80079e0:	f7ff ffc2 	bl	8007968 <__sinit>
 80079e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079e6:	07db      	lsls	r3, r3, #31
 80079e8:	d405      	bmi.n	80079f6 <_puts_r+0x22>
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	0598      	lsls	r0, r3, #22
 80079ee:	d402      	bmi.n	80079f6 <_puts_r+0x22>
 80079f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079f2:	f000 fa1e 	bl	8007e32 <__retarget_lock_acquire_recursive>
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	0719      	lsls	r1, r3, #28
 80079fa:	d502      	bpl.n	8007a02 <_puts_r+0x2e>
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d135      	bne.n	8007a6e <_puts_r+0x9a>
 8007a02:	4621      	mov	r1, r4
 8007a04:	4628      	mov	r0, r5
 8007a06:	f000 f8c5 	bl	8007b94 <__swsetup_r>
 8007a0a:	b380      	cbz	r0, 8007a6e <_puts_r+0x9a>
 8007a0c:	f04f 35ff 	mov.w	r5, #4294967295
 8007a10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a12:	07da      	lsls	r2, r3, #31
 8007a14:	d405      	bmi.n	8007a22 <_puts_r+0x4e>
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	059b      	lsls	r3, r3, #22
 8007a1a:	d402      	bmi.n	8007a22 <_puts_r+0x4e>
 8007a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a1e:	f000 fa09 	bl	8007e34 <__retarget_lock_release_recursive>
 8007a22:	4628      	mov	r0, r5
 8007a24:	bd70      	pop	{r4, r5, r6, pc}
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	da04      	bge.n	8007a34 <_puts_r+0x60>
 8007a2a:	69a2      	ldr	r2, [r4, #24]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	dc17      	bgt.n	8007a60 <_puts_r+0x8c>
 8007a30:	290a      	cmp	r1, #10
 8007a32:	d015      	beq.n	8007a60 <_puts_r+0x8c>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	6022      	str	r2, [r4, #0]
 8007a3a:	7019      	strb	r1, [r3, #0]
 8007a3c:	68a3      	ldr	r3, [r4, #8]
 8007a3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a42:	3b01      	subs	r3, #1
 8007a44:	60a3      	str	r3, [r4, #8]
 8007a46:	2900      	cmp	r1, #0
 8007a48:	d1ed      	bne.n	8007a26 <_puts_r+0x52>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	da11      	bge.n	8007a72 <_puts_r+0x9e>
 8007a4e:	4622      	mov	r2, r4
 8007a50:	210a      	movs	r1, #10
 8007a52:	4628      	mov	r0, r5
 8007a54:	f000 f85f 	bl	8007b16 <__swbuf_r>
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d0d7      	beq.n	8007a0c <_puts_r+0x38>
 8007a5c:	250a      	movs	r5, #10
 8007a5e:	e7d7      	b.n	8007a10 <_puts_r+0x3c>
 8007a60:	4622      	mov	r2, r4
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 f857 	bl	8007b16 <__swbuf_r>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d1e7      	bne.n	8007a3c <_puts_r+0x68>
 8007a6c:	e7ce      	b.n	8007a0c <_puts_r+0x38>
 8007a6e:	3e01      	subs	r6, #1
 8007a70:	e7e4      	b.n	8007a3c <_puts_r+0x68>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	6022      	str	r2, [r4, #0]
 8007a78:	220a      	movs	r2, #10
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	e7ee      	b.n	8007a5c <_puts_r+0x88>
	...

08007a80 <puts>:
 8007a80:	4b02      	ldr	r3, [pc, #8]	@ (8007a8c <puts+0xc>)
 8007a82:	4601      	mov	r1, r0
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	f7ff bfa5 	b.w	80079d4 <_puts_r>
 8007a8a:	bf00      	nop
 8007a8c:	20000184 	.word	0x20000184

08007a90 <__sread>:
 8007a90:	b510      	push	{r4, lr}
 8007a92:	460c      	mov	r4, r1
 8007a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a98:	f000 f97c 	bl	8007d94 <_read_r>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	bfab      	itete	ge
 8007aa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8007aa4:	181b      	addge	r3, r3, r0
 8007aa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007aaa:	bfac      	ite	ge
 8007aac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007aae:	81a3      	strhlt	r3, [r4, #12]
 8007ab0:	bd10      	pop	{r4, pc}

08007ab2 <__swrite>:
 8007ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab6:	461f      	mov	r7, r3
 8007ab8:	898b      	ldrh	r3, [r1, #12]
 8007aba:	05db      	lsls	r3, r3, #23
 8007abc:	4605      	mov	r5, r0
 8007abe:	460c      	mov	r4, r1
 8007ac0:	4616      	mov	r6, r2
 8007ac2:	d505      	bpl.n	8007ad0 <__swrite+0x1e>
 8007ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac8:	2302      	movs	r3, #2
 8007aca:	2200      	movs	r2, #0
 8007acc:	f000 f950 	bl	8007d70 <_lseek_r>
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ada:	81a3      	strh	r3, [r4, #12]
 8007adc:	4632      	mov	r2, r6
 8007ade:	463b      	mov	r3, r7
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae6:	f000 b967 	b.w	8007db8 <_write_r>

08007aea <__sseek>:
 8007aea:	b510      	push	{r4, lr}
 8007aec:	460c      	mov	r4, r1
 8007aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af2:	f000 f93d 	bl	8007d70 <_lseek_r>
 8007af6:	1c43      	adds	r3, r0, #1
 8007af8:	89a3      	ldrh	r3, [r4, #12]
 8007afa:	bf15      	itete	ne
 8007afc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007afe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b06:	81a3      	strheq	r3, [r4, #12]
 8007b08:	bf18      	it	ne
 8007b0a:	81a3      	strhne	r3, [r4, #12]
 8007b0c:	bd10      	pop	{r4, pc}

08007b0e <__sclose>:
 8007b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b12:	f000 b91d 	b.w	8007d50 <_close_r>

08007b16 <__swbuf_r>:
 8007b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b18:	460e      	mov	r6, r1
 8007b1a:	4614      	mov	r4, r2
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	b118      	cbz	r0, 8007b28 <__swbuf_r+0x12>
 8007b20:	6a03      	ldr	r3, [r0, #32]
 8007b22:	b90b      	cbnz	r3, 8007b28 <__swbuf_r+0x12>
 8007b24:	f7ff ff20 	bl	8007968 <__sinit>
 8007b28:	69a3      	ldr	r3, [r4, #24]
 8007b2a:	60a3      	str	r3, [r4, #8]
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	071a      	lsls	r2, r3, #28
 8007b30:	d501      	bpl.n	8007b36 <__swbuf_r+0x20>
 8007b32:	6923      	ldr	r3, [r4, #16]
 8007b34:	b943      	cbnz	r3, 8007b48 <__swbuf_r+0x32>
 8007b36:	4621      	mov	r1, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f000 f82b 	bl	8007b94 <__swsetup_r>
 8007b3e:	b118      	cbz	r0, 8007b48 <__swbuf_r+0x32>
 8007b40:	f04f 37ff 	mov.w	r7, #4294967295
 8007b44:	4638      	mov	r0, r7
 8007b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	6922      	ldr	r2, [r4, #16]
 8007b4c:	1a98      	subs	r0, r3, r2
 8007b4e:	6963      	ldr	r3, [r4, #20]
 8007b50:	b2f6      	uxtb	r6, r6
 8007b52:	4283      	cmp	r3, r0
 8007b54:	4637      	mov	r7, r6
 8007b56:	dc05      	bgt.n	8007b64 <__swbuf_r+0x4e>
 8007b58:	4621      	mov	r1, r4
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f002 f988 	bl	8009e70 <_fflush_r>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d1ed      	bne.n	8007b40 <__swbuf_r+0x2a>
 8007b64:	68a3      	ldr	r3, [r4, #8]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	60a3      	str	r3, [r4, #8]
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	6022      	str	r2, [r4, #0]
 8007b70:	701e      	strb	r6, [r3, #0]
 8007b72:	6962      	ldr	r2, [r4, #20]
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d004      	beq.n	8007b84 <__swbuf_r+0x6e>
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	07db      	lsls	r3, r3, #31
 8007b7e:	d5e1      	bpl.n	8007b44 <__swbuf_r+0x2e>
 8007b80:	2e0a      	cmp	r6, #10
 8007b82:	d1df      	bne.n	8007b44 <__swbuf_r+0x2e>
 8007b84:	4621      	mov	r1, r4
 8007b86:	4628      	mov	r0, r5
 8007b88:	f002 f972 	bl	8009e70 <_fflush_r>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d0d9      	beq.n	8007b44 <__swbuf_r+0x2e>
 8007b90:	e7d6      	b.n	8007b40 <__swbuf_r+0x2a>
	...

08007b94 <__swsetup_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4b29      	ldr	r3, [pc, #164]	@ (8007c3c <__swsetup_r+0xa8>)
 8007b98:	4605      	mov	r5, r0
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	b118      	cbz	r0, 8007ba8 <__swsetup_r+0x14>
 8007ba0:	6a03      	ldr	r3, [r0, #32]
 8007ba2:	b90b      	cbnz	r3, 8007ba8 <__swsetup_r+0x14>
 8007ba4:	f7ff fee0 	bl	8007968 <__sinit>
 8007ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bac:	0719      	lsls	r1, r3, #28
 8007bae:	d422      	bmi.n	8007bf6 <__swsetup_r+0x62>
 8007bb0:	06da      	lsls	r2, r3, #27
 8007bb2:	d407      	bmi.n	8007bc4 <__swsetup_r+0x30>
 8007bb4:	2209      	movs	r2, #9
 8007bb6:	602a      	str	r2, [r5, #0]
 8007bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bbc:	81a3      	strh	r3, [r4, #12]
 8007bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc2:	e033      	b.n	8007c2c <__swsetup_r+0x98>
 8007bc4:	0758      	lsls	r0, r3, #29
 8007bc6:	d512      	bpl.n	8007bee <__swsetup_r+0x5a>
 8007bc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bca:	b141      	cbz	r1, 8007bde <__swsetup_r+0x4a>
 8007bcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bd0:	4299      	cmp	r1, r3
 8007bd2:	d002      	beq.n	8007bda <__swsetup_r+0x46>
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f000 ffbb 	bl	8008b50 <_free_r>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007be4:	81a3      	strh	r3, [r4, #12]
 8007be6:	2300      	movs	r3, #0
 8007be8:	6063      	str	r3, [r4, #4]
 8007bea:	6923      	ldr	r3, [r4, #16]
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	f043 0308 	orr.w	r3, r3, #8
 8007bf4:	81a3      	strh	r3, [r4, #12]
 8007bf6:	6923      	ldr	r3, [r4, #16]
 8007bf8:	b94b      	cbnz	r3, 8007c0e <__swsetup_r+0x7a>
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c04:	d003      	beq.n	8007c0e <__swsetup_r+0x7a>
 8007c06:	4621      	mov	r1, r4
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f002 f991 	bl	8009f30 <__smakebuf_r>
 8007c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c12:	f013 0201 	ands.w	r2, r3, #1
 8007c16:	d00a      	beq.n	8007c2e <__swsetup_r+0x9a>
 8007c18:	2200      	movs	r2, #0
 8007c1a:	60a2      	str	r2, [r4, #8]
 8007c1c:	6962      	ldr	r2, [r4, #20]
 8007c1e:	4252      	negs	r2, r2
 8007c20:	61a2      	str	r2, [r4, #24]
 8007c22:	6922      	ldr	r2, [r4, #16]
 8007c24:	b942      	cbnz	r2, 8007c38 <__swsetup_r+0xa4>
 8007c26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c2a:	d1c5      	bne.n	8007bb8 <__swsetup_r+0x24>
 8007c2c:	bd38      	pop	{r3, r4, r5, pc}
 8007c2e:	0799      	lsls	r1, r3, #30
 8007c30:	bf58      	it	pl
 8007c32:	6962      	ldrpl	r2, [r4, #20]
 8007c34:	60a2      	str	r2, [r4, #8]
 8007c36:	e7f4      	b.n	8007c22 <__swsetup_r+0x8e>
 8007c38:	2000      	movs	r0, #0
 8007c3a:	e7f7      	b.n	8007c2c <__swsetup_r+0x98>
 8007c3c:	20000184 	.word	0x20000184

08007c40 <memset>:
 8007c40:	4402      	add	r2, r0
 8007c42:	4603      	mov	r3, r0
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d100      	bne.n	8007c4a <memset+0xa>
 8007c48:	4770      	bx	lr
 8007c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c4e:	e7f9      	b.n	8007c44 <memset+0x4>

08007c50 <strchr>:
 8007c50:	b2c9      	uxtb	r1, r1
 8007c52:	4603      	mov	r3, r0
 8007c54:	4618      	mov	r0, r3
 8007c56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c5a:	b112      	cbz	r2, 8007c62 <strchr+0x12>
 8007c5c:	428a      	cmp	r2, r1
 8007c5e:	d1f9      	bne.n	8007c54 <strchr+0x4>
 8007c60:	4770      	bx	lr
 8007c62:	2900      	cmp	r1, #0
 8007c64:	bf18      	it	ne
 8007c66:	2000      	movne	r0, #0
 8007c68:	4770      	bx	lr

08007c6a <strncmp>:
 8007c6a:	b510      	push	{r4, lr}
 8007c6c:	b16a      	cbz	r2, 8007c8a <strncmp+0x20>
 8007c6e:	3901      	subs	r1, #1
 8007c70:	1884      	adds	r4, r0, r2
 8007c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d103      	bne.n	8007c86 <strncmp+0x1c>
 8007c7e:	42a0      	cmp	r0, r4
 8007c80:	d001      	beq.n	8007c86 <strncmp+0x1c>
 8007c82:	2a00      	cmp	r2, #0
 8007c84:	d1f5      	bne.n	8007c72 <strncmp+0x8>
 8007c86:	1ad0      	subs	r0, r2, r3
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	e7fc      	b.n	8007c88 <strncmp+0x1e>
	...

08007c90 <strtok>:
 8007c90:	4b16      	ldr	r3, [pc, #88]	@ (8007cec <strtok+0x5c>)
 8007c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c96:	681f      	ldr	r7, [r3, #0]
 8007c98:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	460e      	mov	r6, r1
 8007c9e:	b9ec      	cbnz	r4, 8007cdc <strtok+0x4c>
 8007ca0:	2050      	movs	r0, #80	@ 0x50
 8007ca2:	f001 fad9 	bl	8009258 <malloc>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	6478      	str	r0, [r7, #68]	@ 0x44
 8007caa:	b920      	cbnz	r0, 8007cb6 <strtok+0x26>
 8007cac:	4b10      	ldr	r3, [pc, #64]	@ (8007cf0 <strtok+0x60>)
 8007cae:	4811      	ldr	r0, [pc, #68]	@ (8007cf4 <strtok+0x64>)
 8007cb0:	215b      	movs	r1, #91	@ 0x5b
 8007cb2:	f000 f8e1 	bl	8007e78 <__assert_func>
 8007cb6:	e9c0 4400 	strd	r4, r4, [r0]
 8007cba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007cbe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007cc2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007cc6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007cca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007cce:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007cd2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007cd6:	6184      	str	r4, [r0, #24]
 8007cd8:	7704      	strb	r4, [r0, #28]
 8007cda:	6244      	str	r4, [r0, #36]	@ 0x24
 8007cdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce8:	f000 b806 	b.w	8007cf8 <__strtok_r>
 8007cec:	20000184 	.word	0x20000184
 8007cf0:	0800a715 	.word	0x0800a715
 8007cf4:	0800a72c 	.word	0x0800a72c

08007cf8 <__strtok_r>:
 8007cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	b908      	cbnz	r0, 8007d02 <__strtok_r+0xa>
 8007cfe:	6814      	ldr	r4, [r2, #0]
 8007d00:	b144      	cbz	r4, 8007d14 <__strtok_r+0x1c>
 8007d02:	4620      	mov	r0, r4
 8007d04:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007d08:	460f      	mov	r7, r1
 8007d0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007d0e:	b91e      	cbnz	r6, 8007d18 <__strtok_r+0x20>
 8007d10:	b965      	cbnz	r5, 8007d2c <__strtok_r+0x34>
 8007d12:	6015      	str	r5, [r2, #0]
 8007d14:	2000      	movs	r0, #0
 8007d16:	e005      	b.n	8007d24 <__strtok_r+0x2c>
 8007d18:	42b5      	cmp	r5, r6
 8007d1a:	d1f6      	bne.n	8007d0a <__strtok_r+0x12>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1f0      	bne.n	8007d02 <__strtok_r+0xa>
 8007d20:	6014      	str	r4, [r2, #0]
 8007d22:	7003      	strb	r3, [r0, #0]
 8007d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d26:	461c      	mov	r4, r3
 8007d28:	e00c      	b.n	8007d44 <__strtok_r+0x4c>
 8007d2a:	b915      	cbnz	r5, 8007d32 <__strtok_r+0x3a>
 8007d2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d30:	460e      	mov	r6, r1
 8007d32:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007d36:	42ab      	cmp	r3, r5
 8007d38:	d1f7      	bne.n	8007d2a <__strtok_r+0x32>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0f3      	beq.n	8007d26 <__strtok_r+0x2e>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007d44:	6014      	str	r4, [r2, #0]
 8007d46:	e7ed      	b.n	8007d24 <__strtok_r+0x2c>

08007d48 <_localeconv_r>:
 8007d48:	4800      	ldr	r0, [pc, #0]	@ (8007d4c <_localeconv_r+0x4>)
 8007d4a:	4770      	bx	lr
 8007d4c:	20000108 	.word	0x20000108

08007d50 <_close_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d06      	ldr	r5, [pc, #24]	@ (8007d6c <_close_r+0x1c>)
 8007d54:	2300      	movs	r3, #0
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	602b      	str	r3, [r5, #0]
 8007d5c:	f7fa ff82 	bl	8002c64 <_close>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d102      	bne.n	8007d6a <_close_r+0x1a>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	b103      	cbz	r3, 8007d6a <_close_r+0x1a>
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	200008fc 	.word	0x200008fc

08007d70 <_lseek_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4d07      	ldr	r5, [pc, #28]	@ (8007d90 <_lseek_r+0x20>)
 8007d74:	4604      	mov	r4, r0
 8007d76:	4608      	mov	r0, r1
 8007d78:	4611      	mov	r1, r2
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	602a      	str	r2, [r5, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f7fa ff97 	bl	8002cb2 <_lseek>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d102      	bne.n	8007d8e <_lseek_r+0x1e>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	b103      	cbz	r3, 8007d8e <_lseek_r+0x1e>
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	200008fc 	.word	0x200008fc

08007d94 <_read_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4d07      	ldr	r5, [pc, #28]	@ (8007db4 <_read_r+0x20>)
 8007d98:	4604      	mov	r4, r0
 8007d9a:	4608      	mov	r0, r1
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	2200      	movs	r2, #0
 8007da0:	602a      	str	r2, [r5, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	f7fa ff25 	bl	8002bf2 <_read>
 8007da8:	1c43      	adds	r3, r0, #1
 8007daa:	d102      	bne.n	8007db2 <_read_r+0x1e>
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	b103      	cbz	r3, 8007db2 <_read_r+0x1e>
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	200008fc 	.word	0x200008fc

08007db8 <_write_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4d07      	ldr	r5, [pc, #28]	@ (8007dd8 <_write_r+0x20>)
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	4608      	mov	r0, r1
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	602a      	str	r2, [r5, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f7fa ff30 	bl	8002c2c <_write>
 8007dcc:	1c43      	adds	r3, r0, #1
 8007dce:	d102      	bne.n	8007dd6 <_write_r+0x1e>
 8007dd0:	682b      	ldr	r3, [r5, #0]
 8007dd2:	b103      	cbz	r3, 8007dd6 <_write_r+0x1e>
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	bd38      	pop	{r3, r4, r5, pc}
 8007dd8:	200008fc 	.word	0x200008fc

08007ddc <__errno>:
 8007ddc:	4b01      	ldr	r3, [pc, #4]	@ (8007de4 <__errno+0x8>)
 8007dde:	6818      	ldr	r0, [r3, #0]
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20000184 	.word	0x20000184

08007de8 <__libc_init_array>:
 8007de8:	b570      	push	{r4, r5, r6, lr}
 8007dea:	4d0d      	ldr	r5, [pc, #52]	@ (8007e20 <__libc_init_array+0x38>)
 8007dec:	4c0d      	ldr	r4, [pc, #52]	@ (8007e24 <__libc_init_array+0x3c>)
 8007dee:	1b64      	subs	r4, r4, r5
 8007df0:	10a4      	asrs	r4, r4, #2
 8007df2:	2600      	movs	r6, #0
 8007df4:	42a6      	cmp	r6, r4
 8007df6:	d109      	bne.n	8007e0c <__libc_init_array+0x24>
 8007df8:	4d0b      	ldr	r5, [pc, #44]	@ (8007e28 <__libc_init_array+0x40>)
 8007dfa:	4c0c      	ldr	r4, [pc, #48]	@ (8007e2c <__libc_init_array+0x44>)
 8007dfc:	f002 faa6 	bl	800a34c <_init>
 8007e00:	1b64      	subs	r4, r4, r5
 8007e02:	10a4      	asrs	r4, r4, #2
 8007e04:	2600      	movs	r6, #0
 8007e06:	42a6      	cmp	r6, r4
 8007e08:	d105      	bne.n	8007e16 <__libc_init_array+0x2e>
 8007e0a:	bd70      	pop	{r4, r5, r6, pc}
 8007e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e10:	4798      	blx	r3
 8007e12:	3601      	adds	r6, #1
 8007e14:	e7ee      	b.n	8007df4 <__libc_init_array+0xc>
 8007e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e1a:	4798      	blx	r3
 8007e1c:	3601      	adds	r6, #1
 8007e1e:	e7f2      	b.n	8007e06 <__libc_init_array+0x1e>
 8007e20:	0800aa14 	.word	0x0800aa14
 8007e24:	0800aa14 	.word	0x0800aa14
 8007e28:	0800aa14 	.word	0x0800aa14
 8007e2c:	0800aa18 	.word	0x0800aa18

08007e30 <__retarget_lock_init_recursive>:
 8007e30:	4770      	bx	lr

08007e32 <__retarget_lock_acquire_recursive>:
 8007e32:	4770      	bx	lr

08007e34 <__retarget_lock_release_recursive>:
 8007e34:	4770      	bx	lr

08007e36 <strcpy>:
 8007e36:	4603      	mov	r3, r0
 8007e38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e3c:	f803 2b01 	strb.w	r2, [r3], #1
 8007e40:	2a00      	cmp	r2, #0
 8007e42:	d1f9      	bne.n	8007e38 <strcpy+0x2>
 8007e44:	4770      	bx	lr

08007e46 <memcpy>:
 8007e46:	440a      	add	r2, r1
 8007e48:	4291      	cmp	r1, r2
 8007e4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e4e:	d100      	bne.n	8007e52 <memcpy+0xc>
 8007e50:	4770      	bx	lr
 8007e52:	b510      	push	{r4, lr}
 8007e54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e5c:	4291      	cmp	r1, r2
 8007e5e:	d1f9      	bne.n	8007e54 <memcpy+0xe>
 8007e60:	bd10      	pop	{r4, pc}
 8007e62:	0000      	movs	r0, r0
 8007e64:	0000      	movs	r0, r0
	...

08007e68 <nan>:
 8007e68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007e70 <nan+0x8>
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	00000000 	.word	0x00000000
 8007e74:	7ff80000 	.word	0x7ff80000

08007e78 <__assert_func>:
 8007e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e7a:	4614      	mov	r4, r2
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	4b09      	ldr	r3, [pc, #36]	@ (8007ea4 <__assert_func+0x2c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4605      	mov	r5, r0
 8007e84:	68d8      	ldr	r0, [r3, #12]
 8007e86:	b954      	cbnz	r4, 8007e9e <__assert_func+0x26>
 8007e88:	4b07      	ldr	r3, [pc, #28]	@ (8007ea8 <__assert_func+0x30>)
 8007e8a:	461c      	mov	r4, r3
 8007e8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e90:	9100      	str	r1, [sp, #0]
 8007e92:	462b      	mov	r3, r5
 8007e94:	4905      	ldr	r1, [pc, #20]	@ (8007eac <__assert_func+0x34>)
 8007e96:	f002 f813 	bl	8009ec0 <fiprintf>
 8007e9a:	f002 f8b7 	bl	800a00c <abort>
 8007e9e:	4b04      	ldr	r3, [pc, #16]	@ (8007eb0 <__assert_func+0x38>)
 8007ea0:	e7f4      	b.n	8007e8c <__assert_func+0x14>
 8007ea2:	bf00      	nop
 8007ea4:	20000184 	.word	0x20000184
 8007ea8:	0800a7c9 	.word	0x0800a7c9
 8007eac:	0800a79b 	.word	0x0800a79b
 8007eb0:	0800a78e 	.word	0x0800a78e

08007eb4 <quorem>:
 8007eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb8:	6903      	ldr	r3, [r0, #16]
 8007eba:	690c      	ldr	r4, [r1, #16]
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	4607      	mov	r7, r0
 8007ec0:	db7e      	blt.n	8007fc0 <quorem+0x10c>
 8007ec2:	3c01      	subs	r4, #1
 8007ec4:	f101 0814 	add.w	r8, r1, #20
 8007ec8:	00a3      	lsls	r3, r4, #2
 8007eca:	f100 0514 	add.w	r5, r0, #20
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007eda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ee6:	fbb2 f6f3 	udiv	r6, r2, r3
 8007eea:	d32e      	bcc.n	8007f4a <quorem+0x96>
 8007eec:	f04f 0a00 	mov.w	sl, #0
 8007ef0:	46c4      	mov	ip, r8
 8007ef2:	46ae      	mov	lr, r5
 8007ef4:	46d3      	mov	fp, sl
 8007ef6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007efa:	b298      	uxth	r0, r3
 8007efc:	fb06 a000 	mla	r0, r6, r0, sl
 8007f00:	0c02      	lsrs	r2, r0, #16
 8007f02:	0c1b      	lsrs	r3, r3, #16
 8007f04:	fb06 2303 	mla	r3, r6, r3, r2
 8007f08:	f8de 2000 	ldr.w	r2, [lr]
 8007f0c:	b280      	uxth	r0, r0
 8007f0e:	b292      	uxth	r2, r2
 8007f10:	1a12      	subs	r2, r2, r0
 8007f12:	445a      	add	r2, fp
 8007f14:	f8de 0000 	ldr.w	r0, [lr]
 8007f18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007f22:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007f26:	b292      	uxth	r2, r2
 8007f28:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007f2c:	45e1      	cmp	r9, ip
 8007f2e:	f84e 2b04 	str.w	r2, [lr], #4
 8007f32:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007f36:	d2de      	bcs.n	8007ef6 <quorem+0x42>
 8007f38:	9b00      	ldr	r3, [sp, #0]
 8007f3a:	58eb      	ldr	r3, [r5, r3]
 8007f3c:	b92b      	cbnz	r3, 8007f4a <quorem+0x96>
 8007f3e:	9b01      	ldr	r3, [sp, #4]
 8007f40:	3b04      	subs	r3, #4
 8007f42:	429d      	cmp	r5, r3
 8007f44:	461a      	mov	r2, r3
 8007f46:	d32f      	bcc.n	8007fa8 <quorem+0xf4>
 8007f48:	613c      	str	r4, [r7, #16]
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	f001 fd10 	bl	8009970 <__mcmp>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	db25      	blt.n	8007fa0 <quorem+0xec>
 8007f54:	4629      	mov	r1, r5
 8007f56:	2000      	movs	r0, #0
 8007f58:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f5c:	f8d1 c000 	ldr.w	ip, [r1]
 8007f60:	fa1f fe82 	uxth.w	lr, r2
 8007f64:	fa1f f38c 	uxth.w	r3, ip
 8007f68:	eba3 030e 	sub.w	r3, r3, lr
 8007f6c:	4403      	add	r3, r0
 8007f6e:	0c12      	lsrs	r2, r2, #16
 8007f70:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007f74:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f7e:	45c1      	cmp	r9, r8
 8007f80:	f841 3b04 	str.w	r3, [r1], #4
 8007f84:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f88:	d2e6      	bcs.n	8007f58 <quorem+0xa4>
 8007f8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f92:	b922      	cbnz	r2, 8007f9e <quorem+0xea>
 8007f94:	3b04      	subs	r3, #4
 8007f96:	429d      	cmp	r5, r3
 8007f98:	461a      	mov	r2, r3
 8007f9a:	d30b      	bcc.n	8007fb4 <quorem+0x100>
 8007f9c:	613c      	str	r4, [r7, #16]
 8007f9e:	3601      	adds	r6, #1
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	b003      	add	sp, #12
 8007fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	3b04      	subs	r3, #4
 8007fac:	2a00      	cmp	r2, #0
 8007fae:	d1cb      	bne.n	8007f48 <quorem+0x94>
 8007fb0:	3c01      	subs	r4, #1
 8007fb2:	e7c6      	b.n	8007f42 <quorem+0x8e>
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	3b04      	subs	r3, #4
 8007fb8:	2a00      	cmp	r2, #0
 8007fba:	d1ef      	bne.n	8007f9c <quorem+0xe8>
 8007fbc:	3c01      	subs	r4, #1
 8007fbe:	e7ea      	b.n	8007f96 <quorem+0xe2>
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	e7ee      	b.n	8007fa2 <quorem+0xee>
 8007fc4:	0000      	movs	r0, r0
	...

08007fc8 <_dtoa_r>:
 8007fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fcc:	69c7      	ldr	r7, [r0, #28]
 8007fce:	b099      	sub	sp, #100	@ 0x64
 8007fd0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007fd4:	ec55 4b10 	vmov	r4, r5, d0
 8007fd8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007fda:	9109      	str	r1, [sp, #36]	@ 0x24
 8007fdc:	4683      	mov	fp, r0
 8007fde:	920e      	str	r2, [sp, #56]	@ 0x38
 8007fe0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fe2:	b97f      	cbnz	r7, 8008004 <_dtoa_r+0x3c>
 8007fe4:	2010      	movs	r0, #16
 8007fe6:	f001 f937 	bl	8009258 <malloc>
 8007fea:	4602      	mov	r2, r0
 8007fec:	f8cb 001c 	str.w	r0, [fp, #28]
 8007ff0:	b920      	cbnz	r0, 8007ffc <_dtoa_r+0x34>
 8007ff2:	4ba7      	ldr	r3, [pc, #668]	@ (8008290 <_dtoa_r+0x2c8>)
 8007ff4:	21ef      	movs	r1, #239	@ 0xef
 8007ff6:	48a7      	ldr	r0, [pc, #668]	@ (8008294 <_dtoa_r+0x2cc>)
 8007ff8:	f7ff ff3e 	bl	8007e78 <__assert_func>
 8007ffc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008000:	6007      	str	r7, [r0, #0]
 8008002:	60c7      	str	r7, [r0, #12]
 8008004:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008008:	6819      	ldr	r1, [r3, #0]
 800800a:	b159      	cbz	r1, 8008024 <_dtoa_r+0x5c>
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	604a      	str	r2, [r1, #4]
 8008010:	2301      	movs	r3, #1
 8008012:	4093      	lsls	r3, r2
 8008014:	608b      	str	r3, [r1, #8]
 8008016:	4658      	mov	r0, fp
 8008018:	f001 fa26 	bl	8009468 <_Bfree>
 800801c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008020:	2200      	movs	r2, #0
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	1e2b      	subs	r3, r5, #0
 8008026:	bfb9      	ittee	lt
 8008028:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800802c:	9303      	strlt	r3, [sp, #12]
 800802e:	2300      	movge	r3, #0
 8008030:	6033      	strge	r3, [r6, #0]
 8008032:	9f03      	ldr	r7, [sp, #12]
 8008034:	4b98      	ldr	r3, [pc, #608]	@ (8008298 <_dtoa_r+0x2d0>)
 8008036:	bfbc      	itt	lt
 8008038:	2201      	movlt	r2, #1
 800803a:	6032      	strlt	r2, [r6, #0]
 800803c:	43bb      	bics	r3, r7
 800803e:	d112      	bne.n	8008066 <_dtoa_r+0x9e>
 8008040:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008042:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800804c:	4323      	orrs	r3, r4
 800804e:	f000 854d 	beq.w	8008aec <_dtoa_r+0xb24>
 8008052:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008054:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80082ac <_dtoa_r+0x2e4>
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 854f 	beq.w	8008afc <_dtoa_r+0xb34>
 800805e:	f10a 0303 	add.w	r3, sl, #3
 8008062:	f000 bd49 	b.w	8008af8 <_dtoa_r+0xb30>
 8008066:	ed9d 7b02 	vldr	d7, [sp, #8]
 800806a:	2200      	movs	r2, #0
 800806c:	ec51 0b17 	vmov	r0, r1, d7
 8008070:	2300      	movs	r3, #0
 8008072:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008076:	f7f8 fd37 	bl	8000ae8 <__aeabi_dcmpeq>
 800807a:	4680      	mov	r8, r0
 800807c:	b158      	cbz	r0, 8008096 <_dtoa_r+0xce>
 800807e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008080:	2301      	movs	r3, #1
 8008082:	6013      	str	r3, [r2, #0]
 8008084:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008086:	b113      	cbz	r3, 800808e <_dtoa_r+0xc6>
 8008088:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800808a:	4b84      	ldr	r3, [pc, #528]	@ (800829c <_dtoa_r+0x2d4>)
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80082b0 <_dtoa_r+0x2e8>
 8008092:	f000 bd33 	b.w	8008afc <_dtoa_r+0xb34>
 8008096:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800809a:	aa16      	add	r2, sp, #88	@ 0x58
 800809c:	a917      	add	r1, sp, #92	@ 0x5c
 800809e:	4658      	mov	r0, fp
 80080a0:	f001 fd86 	bl	8009bb0 <__d2b>
 80080a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80080a8:	4681      	mov	r9, r0
 80080aa:	2e00      	cmp	r6, #0
 80080ac:	d077      	beq.n	800819e <_dtoa_r+0x1d6>
 80080ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80080b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80080c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80080c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80080c8:	4619      	mov	r1, r3
 80080ca:	2200      	movs	r2, #0
 80080cc:	4b74      	ldr	r3, [pc, #464]	@ (80082a0 <_dtoa_r+0x2d8>)
 80080ce:	f7f8 f8eb 	bl	80002a8 <__aeabi_dsub>
 80080d2:	a369      	add	r3, pc, #420	@ (adr r3, 8008278 <_dtoa_r+0x2b0>)
 80080d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d8:	f7f8 fa9e 	bl	8000618 <__aeabi_dmul>
 80080dc:	a368      	add	r3, pc, #416	@ (adr r3, 8008280 <_dtoa_r+0x2b8>)
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	f7f8 f8e3 	bl	80002ac <__adddf3>
 80080e6:	4604      	mov	r4, r0
 80080e8:	4630      	mov	r0, r6
 80080ea:	460d      	mov	r5, r1
 80080ec:	f7f8 fa2a 	bl	8000544 <__aeabi_i2d>
 80080f0:	a365      	add	r3, pc, #404	@ (adr r3, 8008288 <_dtoa_r+0x2c0>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	f7f8 fa8f 	bl	8000618 <__aeabi_dmul>
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	4620      	mov	r0, r4
 8008100:	4629      	mov	r1, r5
 8008102:	f7f8 f8d3 	bl	80002ac <__adddf3>
 8008106:	4604      	mov	r4, r0
 8008108:	460d      	mov	r5, r1
 800810a:	f7f8 fd35 	bl	8000b78 <__aeabi_d2iz>
 800810e:	2200      	movs	r2, #0
 8008110:	4607      	mov	r7, r0
 8008112:	2300      	movs	r3, #0
 8008114:	4620      	mov	r0, r4
 8008116:	4629      	mov	r1, r5
 8008118:	f7f8 fcf0 	bl	8000afc <__aeabi_dcmplt>
 800811c:	b140      	cbz	r0, 8008130 <_dtoa_r+0x168>
 800811e:	4638      	mov	r0, r7
 8008120:	f7f8 fa10 	bl	8000544 <__aeabi_i2d>
 8008124:	4622      	mov	r2, r4
 8008126:	462b      	mov	r3, r5
 8008128:	f7f8 fcde 	bl	8000ae8 <__aeabi_dcmpeq>
 800812c:	b900      	cbnz	r0, 8008130 <_dtoa_r+0x168>
 800812e:	3f01      	subs	r7, #1
 8008130:	2f16      	cmp	r7, #22
 8008132:	d851      	bhi.n	80081d8 <_dtoa_r+0x210>
 8008134:	4b5b      	ldr	r3, [pc, #364]	@ (80082a4 <_dtoa_r+0x2dc>)
 8008136:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008142:	f7f8 fcdb 	bl	8000afc <__aeabi_dcmplt>
 8008146:	2800      	cmp	r0, #0
 8008148:	d048      	beq.n	80081dc <_dtoa_r+0x214>
 800814a:	3f01      	subs	r7, #1
 800814c:	2300      	movs	r3, #0
 800814e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008150:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008152:	1b9b      	subs	r3, r3, r6
 8008154:	1e5a      	subs	r2, r3, #1
 8008156:	bf44      	itt	mi
 8008158:	f1c3 0801 	rsbmi	r8, r3, #1
 800815c:	2300      	movmi	r3, #0
 800815e:	9208      	str	r2, [sp, #32]
 8008160:	bf54      	ite	pl
 8008162:	f04f 0800 	movpl.w	r8, #0
 8008166:	9308      	strmi	r3, [sp, #32]
 8008168:	2f00      	cmp	r7, #0
 800816a:	db39      	blt.n	80081e0 <_dtoa_r+0x218>
 800816c:	9b08      	ldr	r3, [sp, #32]
 800816e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008170:	443b      	add	r3, r7
 8008172:	9308      	str	r3, [sp, #32]
 8008174:	2300      	movs	r3, #0
 8008176:	930a      	str	r3, [sp, #40]	@ 0x28
 8008178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817a:	2b09      	cmp	r3, #9
 800817c:	d864      	bhi.n	8008248 <_dtoa_r+0x280>
 800817e:	2b05      	cmp	r3, #5
 8008180:	bfc4      	itt	gt
 8008182:	3b04      	subgt	r3, #4
 8008184:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008188:	f1a3 0302 	sub.w	r3, r3, #2
 800818c:	bfcc      	ite	gt
 800818e:	2400      	movgt	r4, #0
 8008190:	2401      	movle	r4, #1
 8008192:	2b03      	cmp	r3, #3
 8008194:	d863      	bhi.n	800825e <_dtoa_r+0x296>
 8008196:	e8df f003 	tbb	[pc, r3]
 800819a:	372a      	.short	0x372a
 800819c:	5535      	.short	0x5535
 800819e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80081a2:	441e      	add	r6, r3
 80081a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	bfc1      	itttt	gt
 80081ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80081b0:	409f      	lslgt	r7, r3
 80081b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80081b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80081ba:	bfd6      	itet	le
 80081bc:	f1c3 0320 	rsble	r3, r3, #32
 80081c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80081c4:	fa04 f003 	lslle.w	r0, r4, r3
 80081c8:	f7f8 f9ac 	bl	8000524 <__aeabi_ui2d>
 80081cc:	2201      	movs	r2, #1
 80081ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80081d2:	3e01      	subs	r6, #1
 80081d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80081d6:	e777      	b.n	80080c8 <_dtoa_r+0x100>
 80081d8:	2301      	movs	r3, #1
 80081da:	e7b8      	b.n	800814e <_dtoa_r+0x186>
 80081dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80081de:	e7b7      	b.n	8008150 <_dtoa_r+0x188>
 80081e0:	427b      	negs	r3, r7
 80081e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80081e4:	2300      	movs	r3, #0
 80081e6:	eba8 0807 	sub.w	r8, r8, r7
 80081ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081ec:	e7c4      	b.n	8008178 <_dtoa_r+0x1b0>
 80081ee:	2300      	movs	r3, #0
 80081f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	dc35      	bgt.n	8008264 <_dtoa_r+0x29c>
 80081f8:	2301      	movs	r3, #1
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	9307      	str	r3, [sp, #28]
 80081fe:	461a      	mov	r2, r3
 8008200:	920e      	str	r2, [sp, #56]	@ 0x38
 8008202:	e00b      	b.n	800821c <_dtoa_r+0x254>
 8008204:	2301      	movs	r3, #1
 8008206:	e7f3      	b.n	80081f0 <_dtoa_r+0x228>
 8008208:	2300      	movs	r3, #0
 800820a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800820c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800820e:	18fb      	adds	r3, r7, r3
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	3301      	adds	r3, #1
 8008214:	2b01      	cmp	r3, #1
 8008216:	9307      	str	r3, [sp, #28]
 8008218:	bfb8      	it	lt
 800821a:	2301      	movlt	r3, #1
 800821c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008220:	2100      	movs	r1, #0
 8008222:	2204      	movs	r2, #4
 8008224:	f102 0514 	add.w	r5, r2, #20
 8008228:	429d      	cmp	r5, r3
 800822a:	d91f      	bls.n	800826c <_dtoa_r+0x2a4>
 800822c:	6041      	str	r1, [r0, #4]
 800822e:	4658      	mov	r0, fp
 8008230:	f001 f8da 	bl	80093e8 <_Balloc>
 8008234:	4682      	mov	sl, r0
 8008236:	2800      	cmp	r0, #0
 8008238:	d13c      	bne.n	80082b4 <_dtoa_r+0x2ec>
 800823a:	4b1b      	ldr	r3, [pc, #108]	@ (80082a8 <_dtoa_r+0x2e0>)
 800823c:	4602      	mov	r2, r0
 800823e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008242:	e6d8      	b.n	8007ff6 <_dtoa_r+0x2e>
 8008244:	2301      	movs	r3, #1
 8008246:	e7e0      	b.n	800820a <_dtoa_r+0x242>
 8008248:	2401      	movs	r4, #1
 800824a:	2300      	movs	r3, #0
 800824c:	9309      	str	r3, [sp, #36]	@ 0x24
 800824e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008250:	f04f 33ff 	mov.w	r3, #4294967295
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	9307      	str	r3, [sp, #28]
 8008258:	2200      	movs	r2, #0
 800825a:	2312      	movs	r3, #18
 800825c:	e7d0      	b.n	8008200 <_dtoa_r+0x238>
 800825e:	2301      	movs	r3, #1
 8008260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008262:	e7f5      	b.n	8008250 <_dtoa_r+0x288>
 8008264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	9307      	str	r3, [sp, #28]
 800826a:	e7d7      	b.n	800821c <_dtoa_r+0x254>
 800826c:	3101      	adds	r1, #1
 800826e:	0052      	lsls	r2, r2, #1
 8008270:	e7d8      	b.n	8008224 <_dtoa_r+0x25c>
 8008272:	bf00      	nop
 8008274:	f3af 8000 	nop.w
 8008278:	636f4361 	.word	0x636f4361
 800827c:	3fd287a7 	.word	0x3fd287a7
 8008280:	8b60c8b3 	.word	0x8b60c8b3
 8008284:	3fc68a28 	.word	0x3fc68a28
 8008288:	509f79fb 	.word	0x509f79fb
 800828c:	3fd34413 	.word	0x3fd34413
 8008290:	0800a715 	.word	0x0800a715
 8008294:	0800a7d7 	.word	0x0800a7d7
 8008298:	7ff00000 	.word	0x7ff00000
 800829c:	0800a6f2 	.word	0x0800a6f2
 80082a0:	3ff80000 	.word	0x3ff80000
 80082a4:	0800a930 	.word	0x0800a930
 80082a8:	0800a82f 	.word	0x0800a82f
 80082ac:	0800a7d3 	.word	0x0800a7d3
 80082b0:	0800a6f1 	.word	0x0800a6f1
 80082b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80082b8:	6018      	str	r0, [r3, #0]
 80082ba:	9b07      	ldr	r3, [sp, #28]
 80082bc:	2b0e      	cmp	r3, #14
 80082be:	f200 80a4 	bhi.w	800840a <_dtoa_r+0x442>
 80082c2:	2c00      	cmp	r4, #0
 80082c4:	f000 80a1 	beq.w	800840a <_dtoa_r+0x442>
 80082c8:	2f00      	cmp	r7, #0
 80082ca:	dd33      	ble.n	8008334 <_dtoa_r+0x36c>
 80082cc:	4bad      	ldr	r3, [pc, #692]	@ (8008584 <_dtoa_r+0x5bc>)
 80082ce:	f007 020f 	and.w	r2, r7, #15
 80082d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082d6:	ed93 7b00 	vldr	d7, [r3]
 80082da:	05f8      	lsls	r0, r7, #23
 80082dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80082e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80082e4:	d516      	bpl.n	8008314 <_dtoa_r+0x34c>
 80082e6:	4ba8      	ldr	r3, [pc, #672]	@ (8008588 <_dtoa_r+0x5c0>)
 80082e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082f0:	f7f8 fabc 	bl	800086c <__aeabi_ddiv>
 80082f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082f8:	f004 040f 	and.w	r4, r4, #15
 80082fc:	2603      	movs	r6, #3
 80082fe:	4da2      	ldr	r5, [pc, #648]	@ (8008588 <_dtoa_r+0x5c0>)
 8008300:	b954      	cbnz	r4, 8008318 <_dtoa_r+0x350>
 8008302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800830a:	f7f8 faaf 	bl	800086c <__aeabi_ddiv>
 800830e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008312:	e028      	b.n	8008366 <_dtoa_r+0x39e>
 8008314:	2602      	movs	r6, #2
 8008316:	e7f2      	b.n	80082fe <_dtoa_r+0x336>
 8008318:	07e1      	lsls	r1, r4, #31
 800831a:	d508      	bpl.n	800832e <_dtoa_r+0x366>
 800831c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008320:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008324:	f7f8 f978 	bl	8000618 <__aeabi_dmul>
 8008328:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800832c:	3601      	adds	r6, #1
 800832e:	1064      	asrs	r4, r4, #1
 8008330:	3508      	adds	r5, #8
 8008332:	e7e5      	b.n	8008300 <_dtoa_r+0x338>
 8008334:	f000 80d2 	beq.w	80084dc <_dtoa_r+0x514>
 8008338:	427c      	negs	r4, r7
 800833a:	4b92      	ldr	r3, [pc, #584]	@ (8008584 <_dtoa_r+0x5bc>)
 800833c:	4d92      	ldr	r5, [pc, #584]	@ (8008588 <_dtoa_r+0x5c0>)
 800833e:	f004 020f 	and.w	r2, r4, #15
 8008342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800834e:	f7f8 f963 	bl	8000618 <__aeabi_dmul>
 8008352:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008356:	1124      	asrs	r4, r4, #4
 8008358:	2300      	movs	r3, #0
 800835a:	2602      	movs	r6, #2
 800835c:	2c00      	cmp	r4, #0
 800835e:	f040 80b2 	bne.w	80084c6 <_dtoa_r+0x4fe>
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1d3      	bne.n	800830e <_dtoa_r+0x346>
 8008366:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008368:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 80b7 	beq.w	80084e0 <_dtoa_r+0x518>
 8008372:	4b86      	ldr	r3, [pc, #536]	@ (800858c <_dtoa_r+0x5c4>)
 8008374:	2200      	movs	r2, #0
 8008376:	4620      	mov	r0, r4
 8008378:	4629      	mov	r1, r5
 800837a:	f7f8 fbbf 	bl	8000afc <__aeabi_dcmplt>
 800837e:	2800      	cmp	r0, #0
 8008380:	f000 80ae 	beq.w	80084e0 <_dtoa_r+0x518>
 8008384:	9b07      	ldr	r3, [sp, #28]
 8008386:	2b00      	cmp	r3, #0
 8008388:	f000 80aa 	beq.w	80084e0 <_dtoa_r+0x518>
 800838c:	9b00      	ldr	r3, [sp, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	dd37      	ble.n	8008402 <_dtoa_r+0x43a>
 8008392:	1e7b      	subs	r3, r7, #1
 8008394:	9304      	str	r3, [sp, #16]
 8008396:	4620      	mov	r0, r4
 8008398:	4b7d      	ldr	r3, [pc, #500]	@ (8008590 <_dtoa_r+0x5c8>)
 800839a:	2200      	movs	r2, #0
 800839c:	4629      	mov	r1, r5
 800839e:	f7f8 f93b 	bl	8000618 <__aeabi_dmul>
 80083a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083a6:	9c00      	ldr	r4, [sp, #0]
 80083a8:	3601      	adds	r6, #1
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7f8 f8ca 	bl	8000544 <__aeabi_i2d>
 80083b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083b4:	f7f8 f930 	bl	8000618 <__aeabi_dmul>
 80083b8:	4b76      	ldr	r3, [pc, #472]	@ (8008594 <_dtoa_r+0x5cc>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	f7f7 ff76 	bl	80002ac <__adddf3>
 80083c0:	4605      	mov	r5, r0
 80083c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80083c6:	2c00      	cmp	r4, #0
 80083c8:	f040 808d 	bne.w	80084e6 <_dtoa_r+0x51e>
 80083cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083d0:	4b71      	ldr	r3, [pc, #452]	@ (8008598 <_dtoa_r+0x5d0>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	f7f7 ff68 	bl	80002a8 <__aeabi_dsub>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083e0:	462a      	mov	r2, r5
 80083e2:	4633      	mov	r3, r6
 80083e4:	f7f8 fba8 	bl	8000b38 <__aeabi_dcmpgt>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	f040 828b 	bne.w	8008904 <_dtoa_r+0x93c>
 80083ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083f2:	462a      	mov	r2, r5
 80083f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80083f8:	f7f8 fb80 	bl	8000afc <__aeabi_dcmplt>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	f040 8128 	bne.w	8008652 <_dtoa_r+0x68a>
 8008402:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008406:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800840a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800840c:	2b00      	cmp	r3, #0
 800840e:	f2c0 815a 	blt.w	80086c6 <_dtoa_r+0x6fe>
 8008412:	2f0e      	cmp	r7, #14
 8008414:	f300 8157 	bgt.w	80086c6 <_dtoa_r+0x6fe>
 8008418:	4b5a      	ldr	r3, [pc, #360]	@ (8008584 <_dtoa_r+0x5bc>)
 800841a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800841e:	ed93 7b00 	vldr	d7, [r3]
 8008422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008424:	2b00      	cmp	r3, #0
 8008426:	ed8d 7b00 	vstr	d7, [sp]
 800842a:	da03      	bge.n	8008434 <_dtoa_r+0x46c>
 800842c:	9b07      	ldr	r3, [sp, #28]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f340 8101 	ble.w	8008636 <_dtoa_r+0x66e>
 8008434:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008438:	4656      	mov	r6, sl
 800843a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800843e:	4620      	mov	r0, r4
 8008440:	4629      	mov	r1, r5
 8008442:	f7f8 fa13 	bl	800086c <__aeabi_ddiv>
 8008446:	f7f8 fb97 	bl	8000b78 <__aeabi_d2iz>
 800844a:	4680      	mov	r8, r0
 800844c:	f7f8 f87a 	bl	8000544 <__aeabi_i2d>
 8008450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008454:	f7f8 f8e0 	bl	8000618 <__aeabi_dmul>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	4620      	mov	r0, r4
 800845e:	4629      	mov	r1, r5
 8008460:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008464:	f7f7 ff20 	bl	80002a8 <__aeabi_dsub>
 8008468:	f806 4b01 	strb.w	r4, [r6], #1
 800846c:	9d07      	ldr	r5, [sp, #28]
 800846e:	eba6 040a 	sub.w	r4, r6, sl
 8008472:	42a5      	cmp	r5, r4
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	f040 8117 	bne.w	80086aa <_dtoa_r+0x6e2>
 800847c:	f7f7 ff16 	bl	80002ac <__adddf3>
 8008480:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008484:	4604      	mov	r4, r0
 8008486:	460d      	mov	r5, r1
 8008488:	f7f8 fb56 	bl	8000b38 <__aeabi_dcmpgt>
 800848c:	2800      	cmp	r0, #0
 800848e:	f040 80f9 	bne.w	8008684 <_dtoa_r+0x6bc>
 8008492:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008496:	4620      	mov	r0, r4
 8008498:	4629      	mov	r1, r5
 800849a:	f7f8 fb25 	bl	8000ae8 <__aeabi_dcmpeq>
 800849e:	b118      	cbz	r0, 80084a8 <_dtoa_r+0x4e0>
 80084a0:	f018 0f01 	tst.w	r8, #1
 80084a4:	f040 80ee 	bne.w	8008684 <_dtoa_r+0x6bc>
 80084a8:	4649      	mov	r1, r9
 80084aa:	4658      	mov	r0, fp
 80084ac:	f000 ffdc 	bl	8009468 <_Bfree>
 80084b0:	2300      	movs	r3, #0
 80084b2:	7033      	strb	r3, [r6, #0]
 80084b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084b6:	3701      	adds	r7, #1
 80084b8:	601f      	str	r7, [r3, #0]
 80084ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 831d 	beq.w	8008afc <_dtoa_r+0xb34>
 80084c2:	601e      	str	r6, [r3, #0]
 80084c4:	e31a      	b.n	8008afc <_dtoa_r+0xb34>
 80084c6:	07e2      	lsls	r2, r4, #31
 80084c8:	d505      	bpl.n	80084d6 <_dtoa_r+0x50e>
 80084ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084ce:	f7f8 f8a3 	bl	8000618 <__aeabi_dmul>
 80084d2:	3601      	adds	r6, #1
 80084d4:	2301      	movs	r3, #1
 80084d6:	1064      	asrs	r4, r4, #1
 80084d8:	3508      	adds	r5, #8
 80084da:	e73f      	b.n	800835c <_dtoa_r+0x394>
 80084dc:	2602      	movs	r6, #2
 80084de:	e742      	b.n	8008366 <_dtoa_r+0x39e>
 80084e0:	9c07      	ldr	r4, [sp, #28]
 80084e2:	9704      	str	r7, [sp, #16]
 80084e4:	e761      	b.n	80083aa <_dtoa_r+0x3e2>
 80084e6:	4b27      	ldr	r3, [pc, #156]	@ (8008584 <_dtoa_r+0x5bc>)
 80084e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084f2:	4454      	add	r4, sl
 80084f4:	2900      	cmp	r1, #0
 80084f6:	d053      	beq.n	80085a0 <_dtoa_r+0x5d8>
 80084f8:	4928      	ldr	r1, [pc, #160]	@ (800859c <_dtoa_r+0x5d4>)
 80084fa:	2000      	movs	r0, #0
 80084fc:	f7f8 f9b6 	bl	800086c <__aeabi_ddiv>
 8008500:	4633      	mov	r3, r6
 8008502:	462a      	mov	r2, r5
 8008504:	f7f7 fed0 	bl	80002a8 <__aeabi_dsub>
 8008508:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800850c:	4656      	mov	r6, sl
 800850e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008512:	f7f8 fb31 	bl	8000b78 <__aeabi_d2iz>
 8008516:	4605      	mov	r5, r0
 8008518:	f7f8 f814 	bl	8000544 <__aeabi_i2d>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008524:	f7f7 fec0 	bl	80002a8 <__aeabi_dsub>
 8008528:	3530      	adds	r5, #48	@ 0x30
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008532:	f806 5b01 	strb.w	r5, [r6], #1
 8008536:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800853a:	f7f8 fadf 	bl	8000afc <__aeabi_dcmplt>
 800853e:	2800      	cmp	r0, #0
 8008540:	d171      	bne.n	8008626 <_dtoa_r+0x65e>
 8008542:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008546:	4911      	ldr	r1, [pc, #68]	@ (800858c <_dtoa_r+0x5c4>)
 8008548:	2000      	movs	r0, #0
 800854a:	f7f7 fead 	bl	80002a8 <__aeabi_dsub>
 800854e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008552:	f7f8 fad3 	bl	8000afc <__aeabi_dcmplt>
 8008556:	2800      	cmp	r0, #0
 8008558:	f040 8095 	bne.w	8008686 <_dtoa_r+0x6be>
 800855c:	42a6      	cmp	r6, r4
 800855e:	f43f af50 	beq.w	8008402 <_dtoa_r+0x43a>
 8008562:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008566:	4b0a      	ldr	r3, [pc, #40]	@ (8008590 <_dtoa_r+0x5c8>)
 8008568:	2200      	movs	r2, #0
 800856a:	f7f8 f855 	bl	8000618 <__aeabi_dmul>
 800856e:	4b08      	ldr	r3, [pc, #32]	@ (8008590 <_dtoa_r+0x5c8>)
 8008570:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008574:	2200      	movs	r2, #0
 8008576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800857a:	f7f8 f84d 	bl	8000618 <__aeabi_dmul>
 800857e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008582:	e7c4      	b.n	800850e <_dtoa_r+0x546>
 8008584:	0800a930 	.word	0x0800a930
 8008588:	0800a908 	.word	0x0800a908
 800858c:	3ff00000 	.word	0x3ff00000
 8008590:	40240000 	.word	0x40240000
 8008594:	401c0000 	.word	0x401c0000
 8008598:	40140000 	.word	0x40140000
 800859c:	3fe00000 	.word	0x3fe00000
 80085a0:	4631      	mov	r1, r6
 80085a2:	4628      	mov	r0, r5
 80085a4:	f7f8 f838 	bl	8000618 <__aeabi_dmul>
 80085a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80085ae:	4656      	mov	r6, sl
 80085b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085b4:	f7f8 fae0 	bl	8000b78 <__aeabi_d2iz>
 80085b8:	4605      	mov	r5, r0
 80085ba:	f7f7 ffc3 	bl	8000544 <__aeabi_i2d>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c6:	f7f7 fe6f 	bl	80002a8 <__aeabi_dsub>
 80085ca:	3530      	adds	r5, #48	@ 0x30
 80085cc:	f806 5b01 	strb.w	r5, [r6], #1
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	42a6      	cmp	r6, r4
 80085d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085da:	f04f 0200 	mov.w	r2, #0
 80085de:	d124      	bne.n	800862a <_dtoa_r+0x662>
 80085e0:	4bac      	ldr	r3, [pc, #688]	@ (8008894 <_dtoa_r+0x8cc>)
 80085e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80085e6:	f7f7 fe61 	bl	80002ac <__adddf3>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085f2:	f7f8 faa1 	bl	8000b38 <__aeabi_dcmpgt>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d145      	bne.n	8008686 <_dtoa_r+0x6be>
 80085fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085fe:	49a5      	ldr	r1, [pc, #660]	@ (8008894 <_dtoa_r+0x8cc>)
 8008600:	2000      	movs	r0, #0
 8008602:	f7f7 fe51 	bl	80002a8 <__aeabi_dsub>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800860e:	f7f8 fa75 	bl	8000afc <__aeabi_dcmplt>
 8008612:	2800      	cmp	r0, #0
 8008614:	f43f aef5 	beq.w	8008402 <_dtoa_r+0x43a>
 8008618:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800861a:	1e73      	subs	r3, r6, #1
 800861c:	9315      	str	r3, [sp, #84]	@ 0x54
 800861e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008622:	2b30      	cmp	r3, #48	@ 0x30
 8008624:	d0f8      	beq.n	8008618 <_dtoa_r+0x650>
 8008626:	9f04      	ldr	r7, [sp, #16]
 8008628:	e73e      	b.n	80084a8 <_dtoa_r+0x4e0>
 800862a:	4b9b      	ldr	r3, [pc, #620]	@ (8008898 <_dtoa_r+0x8d0>)
 800862c:	f7f7 fff4 	bl	8000618 <__aeabi_dmul>
 8008630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008634:	e7bc      	b.n	80085b0 <_dtoa_r+0x5e8>
 8008636:	d10c      	bne.n	8008652 <_dtoa_r+0x68a>
 8008638:	4b98      	ldr	r3, [pc, #608]	@ (800889c <_dtoa_r+0x8d4>)
 800863a:	2200      	movs	r2, #0
 800863c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008640:	f7f7 ffea 	bl	8000618 <__aeabi_dmul>
 8008644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008648:	f7f8 fa6c 	bl	8000b24 <__aeabi_dcmpge>
 800864c:	2800      	cmp	r0, #0
 800864e:	f000 8157 	beq.w	8008900 <_dtoa_r+0x938>
 8008652:	2400      	movs	r4, #0
 8008654:	4625      	mov	r5, r4
 8008656:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008658:	43db      	mvns	r3, r3
 800865a:	9304      	str	r3, [sp, #16]
 800865c:	4656      	mov	r6, sl
 800865e:	2700      	movs	r7, #0
 8008660:	4621      	mov	r1, r4
 8008662:	4658      	mov	r0, fp
 8008664:	f000 ff00 	bl	8009468 <_Bfree>
 8008668:	2d00      	cmp	r5, #0
 800866a:	d0dc      	beq.n	8008626 <_dtoa_r+0x65e>
 800866c:	b12f      	cbz	r7, 800867a <_dtoa_r+0x6b2>
 800866e:	42af      	cmp	r7, r5
 8008670:	d003      	beq.n	800867a <_dtoa_r+0x6b2>
 8008672:	4639      	mov	r1, r7
 8008674:	4658      	mov	r0, fp
 8008676:	f000 fef7 	bl	8009468 <_Bfree>
 800867a:	4629      	mov	r1, r5
 800867c:	4658      	mov	r0, fp
 800867e:	f000 fef3 	bl	8009468 <_Bfree>
 8008682:	e7d0      	b.n	8008626 <_dtoa_r+0x65e>
 8008684:	9704      	str	r7, [sp, #16]
 8008686:	4633      	mov	r3, r6
 8008688:	461e      	mov	r6, r3
 800868a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800868e:	2a39      	cmp	r2, #57	@ 0x39
 8008690:	d107      	bne.n	80086a2 <_dtoa_r+0x6da>
 8008692:	459a      	cmp	sl, r3
 8008694:	d1f8      	bne.n	8008688 <_dtoa_r+0x6c0>
 8008696:	9a04      	ldr	r2, [sp, #16]
 8008698:	3201      	adds	r2, #1
 800869a:	9204      	str	r2, [sp, #16]
 800869c:	2230      	movs	r2, #48	@ 0x30
 800869e:	f88a 2000 	strb.w	r2, [sl]
 80086a2:	781a      	ldrb	r2, [r3, #0]
 80086a4:	3201      	adds	r2, #1
 80086a6:	701a      	strb	r2, [r3, #0]
 80086a8:	e7bd      	b.n	8008626 <_dtoa_r+0x65e>
 80086aa:	4b7b      	ldr	r3, [pc, #492]	@ (8008898 <_dtoa_r+0x8d0>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	f7f7 ffb3 	bl	8000618 <__aeabi_dmul>
 80086b2:	2200      	movs	r2, #0
 80086b4:	2300      	movs	r3, #0
 80086b6:	4604      	mov	r4, r0
 80086b8:	460d      	mov	r5, r1
 80086ba:	f7f8 fa15 	bl	8000ae8 <__aeabi_dcmpeq>
 80086be:	2800      	cmp	r0, #0
 80086c0:	f43f aebb 	beq.w	800843a <_dtoa_r+0x472>
 80086c4:	e6f0      	b.n	80084a8 <_dtoa_r+0x4e0>
 80086c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80086c8:	2a00      	cmp	r2, #0
 80086ca:	f000 80db 	beq.w	8008884 <_dtoa_r+0x8bc>
 80086ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086d0:	2a01      	cmp	r2, #1
 80086d2:	f300 80bf 	bgt.w	8008854 <_dtoa_r+0x88c>
 80086d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80086d8:	2a00      	cmp	r2, #0
 80086da:	f000 80b7 	beq.w	800884c <_dtoa_r+0x884>
 80086de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80086e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80086e4:	4646      	mov	r6, r8
 80086e6:	9a08      	ldr	r2, [sp, #32]
 80086e8:	2101      	movs	r1, #1
 80086ea:	441a      	add	r2, r3
 80086ec:	4658      	mov	r0, fp
 80086ee:	4498      	add	r8, r3
 80086f0:	9208      	str	r2, [sp, #32]
 80086f2:	f000 ffb7 	bl	8009664 <__i2b>
 80086f6:	4605      	mov	r5, r0
 80086f8:	b15e      	cbz	r6, 8008712 <_dtoa_r+0x74a>
 80086fa:	9b08      	ldr	r3, [sp, #32]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	dd08      	ble.n	8008712 <_dtoa_r+0x74a>
 8008700:	42b3      	cmp	r3, r6
 8008702:	9a08      	ldr	r2, [sp, #32]
 8008704:	bfa8      	it	ge
 8008706:	4633      	movge	r3, r6
 8008708:	eba8 0803 	sub.w	r8, r8, r3
 800870c:	1af6      	subs	r6, r6, r3
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	9308      	str	r3, [sp, #32]
 8008712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008714:	b1f3      	cbz	r3, 8008754 <_dtoa_r+0x78c>
 8008716:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 80b7 	beq.w	800888c <_dtoa_r+0x8c4>
 800871e:	b18c      	cbz	r4, 8008744 <_dtoa_r+0x77c>
 8008720:	4629      	mov	r1, r5
 8008722:	4622      	mov	r2, r4
 8008724:	4658      	mov	r0, fp
 8008726:	f001 f85d 	bl	80097e4 <__pow5mult>
 800872a:	464a      	mov	r2, r9
 800872c:	4601      	mov	r1, r0
 800872e:	4605      	mov	r5, r0
 8008730:	4658      	mov	r0, fp
 8008732:	f000 ffad 	bl	8009690 <__multiply>
 8008736:	4649      	mov	r1, r9
 8008738:	9004      	str	r0, [sp, #16]
 800873a:	4658      	mov	r0, fp
 800873c:	f000 fe94 	bl	8009468 <_Bfree>
 8008740:	9b04      	ldr	r3, [sp, #16]
 8008742:	4699      	mov	r9, r3
 8008744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008746:	1b1a      	subs	r2, r3, r4
 8008748:	d004      	beq.n	8008754 <_dtoa_r+0x78c>
 800874a:	4649      	mov	r1, r9
 800874c:	4658      	mov	r0, fp
 800874e:	f001 f849 	bl	80097e4 <__pow5mult>
 8008752:	4681      	mov	r9, r0
 8008754:	2101      	movs	r1, #1
 8008756:	4658      	mov	r0, fp
 8008758:	f000 ff84 	bl	8009664 <__i2b>
 800875c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800875e:	4604      	mov	r4, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 81cf 	beq.w	8008b04 <_dtoa_r+0xb3c>
 8008766:	461a      	mov	r2, r3
 8008768:	4601      	mov	r1, r0
 800876a:	4658      	mov	r0, fp
 800876c:	f001 f83a 	bl	80097e4 <__pow5mult>
 8008770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008772:	2b01      	cmp	r3, #1
 8008774:	4604      	mov	r4, r0
 8008776:	f300 8095 	bgt.w	80088a4 <_dtoa_r+0x8dc>
 800877a:	9b02      	ldr	r3, [sp, #8]
 800877c:	2b00      	cmp	r3, #0
 800877e:	f040 8087 	bne.w	8008890 <_dtoa_r+0x8c8>
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008788:	2b00      	cmp	r3, #0
 800878a:	f040 8089 	bne.w	80088a0 <_dtoa_r+0x8d8>
 800878e:	9b03      	ldr	r3, [sp, #12]
 8008790:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008794:	0d1b      	lsrs	r3, r3, #20
 8008796:	051b      	lsls	r3, r3, #20
 8008798:	b12b      	cbz	r3, 80087a6 <_dtoa_r+0x7de>
 800879a:	9b08      	ldr	r3, [sp, #32]
 800879c:	3301      	adds	r3, #1
 800879e:	9308      	str	r3, [sp, #32]
 80087a0:	f108 0801 	add.w	r8, r8, #1
 80087a4:	2301      	movs	r3, #1
 80087a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80087a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 81b0 	beq.w	8008b10 <_dtoa_r+0xb48>
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80087b6:	6918      	ldr	r0, [r3, #16]
 80087b8:	f000 ff08 	bl	80095cc <__hi0bits>
 80087bc:	f1c0 0020 	rsb	r0, r0, #32
 80087c0:	9b08      	ldr	r3, [sp, #32]
 80087c2:	4418      	add	r0, r3
 80087c4:	f010 001f 	ands.w	r0, r0, #31
 80087c8:	d077      	beq.n	80088ba <_dtoa_r+0x8f2>
 80087ca:	f1c0 0320 	rsb	r3, r0, #32
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	dd6b      	ble.n	80088aa <_dtoa_r+0x8e2>
 80087d2:	9b08      	ldr	r3, [sp, #32]
 80087d4:	f1c0 001c 	rsb	r0, r0, #28
 80087d8:	4403      	add	r3, r0
 80087da:	4480      	add	r8, r0
 80087dc:	4406      	add	r6, r0
 80087de:	9308      	str	r3, [sp, #32]
 80087e0:	f1b8 0f00 	cmp.w	r8, #0
 80087e4:	dd05      	ble.n	80087f2 <_dtoa_r+0x82a>
 80087e6:	4649      	mov	r1, r9
 80087e8:	4642      	mov	r2, r8
 80087ea:	4658      	mov	r0, fp
 80087ec:	f001 f854 	bl	8009898 <__lshift>
 80087f0:	4681      	mov	r9, r0
 80087f2:	9b08      	ldr	r3, [sp, #32]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	dd05      	ble.n	8008804 <_dtoa_r+0x83c>
 80087f8:	4621      	mov	r1, r4
 80087fa:	461a      	mov	r2, r3
 80087fc:	4658      	mov	r0, fp
 80087fe:	f001 f84b 	bl	8009898 <__lshift>
 8008802:	4604      	mov	r4, r0
 8008804:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008806:	2b00      	cmp	r3, #0
 8008808:	d059      	beq.n	80088be <_dtoa_r+0x8f6>
 800880a:	4621      	mov	r1, r4
 800880c:	4648      	mov	r0, r9
 800880e:	f001 f8af 	bl	8009970 <__mcmp>
 8008812:	2800      	cmp	r0, #0
 8008814:	da53      	bge.n	80088be <_dtoa_r+0x8f6>
 8008816:	1e7b      	subs	r3, r7, #1
 8008818:	9304      	str	r3, [sp, #16]
 800881a:	4649      	mov	r1, r9
 800881c:	2300      	movs	r3, #0
 800881e:	220a      	movs	r2, #10
 8008820:	4658      	mov	r0, fp
 8008822:	f000 fe43 	bl	80094ac <__multadd>
 8008826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008828:	4681      	mov	r9, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 8172 	beq.w	8008b14 <_dtoa_r+0xb4c>
 8008830:	2300      	movs	r3, #0
 8008832:	4629      	mov	r1, r5
 8008834:	220a      	movs	r2, #10
 8008836:	4658      	mov	r0, fp
 8008838:	f000 fe38 	bl	80094ac <__multadd>
 800883c:	9b00      	ldr	r3, [sp, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	4605      	mov	r5, r0
 8008842:	dc67      	bgt.n	8008914 <_dtoa_r+0x94c>
 8008844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008846:	2b02      	cmp	r3, #2
 8008848:	dc41      	bgt.n	80088ce <_dtoa_r+0x906>
 800884a:	e063      	b.n	8008914 <_dtoa_r+0x94c>
 800884c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800884e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008852:	e746      	b.n	80086e2 <_dtoa_r+0x71a>
 8008854:	9b07      	ldr	r3, [sp, #28]
 8008856:	1e5c      	subs	r4, r3, #1
 8008858:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800885a:	42a3      	cmp	r3, r4
 800885c:	bfbf      	itttt	lt
 800885e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008860:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008862:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008864:	1ae3      	sublt	r3, r4, r3
 8008866:	bfb4      	ite	lt
 8008868:	18d2      	addlt	r2, r2, r3
 800886a:	1b1c      	subge	r4, r3, r4
 800886c:	9b07      	ldr	r3, [sp, #28]
 800886e:	bfbc      	itt	lt
 8008870:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008872:	2400      	movlt	r4, #0
 8008874:	2b00      	cmp	r3, #0
 8008876:	bfb5      	itete	lt
 8008878:	eba8 0603 	sublt.w	r6, r8, r3
 800887c:	9b07      	ldrge	r3, [sp, #28]
 800887e:	2300      	movlt	r3, #0
 8008880:	4646      	movge	r6, r8
 8008882:	e730      	b.n	80086e6 <_dtoa_r+0x71e>
 8008884:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008886:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008888:	4646      	mov	r6, r8
 800888a:	e735      	b.n	80086f8 <_dtoa_r+0x730>
 800888c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800888e:	e75c      	b.n	800874a <_dtoa_r+0x782>
 8008890:	2300      	movs	r3, #0
 8008892:	e788      	b.n	80087a6 <_dtoa_r+0x7de>
 8008894:	3fe00000 	.word	0x3fe00000
 8008898:	40240000 	.word	0x40240000
 800889c:	40140000 	.word	0x40140000
 80088a0:	9b02      	ldr	r3, [sp, #8]
 80088a2:	e780      	b.n	80087a6 <_dtoa_r+0x7de>
 80088a4:	2300      	movs	r3, #0
 80088a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80088a8:	e782      	b.n	80087b0 <_dtoa_r+0x7e8>
 80088aa:	d099      	beq.n	80087e0 <_dtoa_r+0x818>
 80088ac:	9a08      	ldr	r2, [sp, #32]
 80088ae:	331c      	adds	r3, #28
 80088b0:	441a      	add	r2, r3
 80088b2:	4498      	add	r8, r3
 80088b4:	441e      	add	r6, r3
 80088b6:	9208      	str	r2, [sp, #32]
 80088b8:	e792      	b.n	80087e0 <_dtoa_r+0x818>
 80088ba:	4603      	mov	r3, r0
 80088bc:	e7f6      	b.n	80088ac <_dtoa_r+0x8e4>
 80088be:	9b07      	ldr	r3, [sp, #28]
 80088c0:	9704      	str	r7, [sp, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	dc20      	bgt.n	8008908 <_dtoa_r+0x940>
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	dd1e      	ble.n	800890c <_dtoa_r+0x944>
 80088ce:	9b00      	ldr	r3, [sp, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f47f aec0 	bne.w	8008656 <_dtoa_r+0x68e>
 80088d6:	4621      	mov	r1, r4
 80088d8:	2205      	movs	r2, #5
 80088da:	4658      	mov	r0, fp
 80088dc:	f000 fde6 	bl	80094ac <__multadd>
 80088e0:	4601      	mov	r1, r0
 80088e2:	4604      	mov	r4, r0
 80088e4:	4648      	mov	r0, r9
 80088e6:	f001 f843 	bl	8009970 <__mcmp>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	f77f aeb3 	ble.w	8008656 <_dtoa_r+0x68e>
 80088f0:	4656      	mov	r6, sl
 80088f2:	2331      	movs	r3, #49	@ 0x31
 80088f4:	f806 3b01 	strb.w	r3, [r6], #1
 80088f8:	9b04      	ldr	r3, [sp, #16]
 80088fa:	3301      	adds	r3, #1
 80088fc:	9304      	str	r3, [sp, #16]
 80088fe:	e6ae      	b.n	800865e <_dtoa_r+0x696>
 8008900:	9c07      	ldr	r4, [sp, #28]
 8008902:	9704      	str	r7, [sp, #16]
 8008904:	4625      	mov	r5, r4
 8008906:	e7f3      	b.n	80088f0 <_dtoa_r+0x928>
 8008908:	9b07      	ldr	r3, [sp, #28]
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 8104 	beq.w	8008b1c <_dtoa_r+0xb54>
 8008914:	2e00      	cmp	r6, #0
 8008916:	dd05      	ble.n	8008924 <_dtoa_r+0x95c>
 8008918:	4629      	mov	r1, r5
 800891a:	4632      	mov	r2, r6
 800891c:	4658      	mov	r0, fp
 800891e:	f000 ffbb 	bl	8009898 <__lshift>
 8008922:	4605      	mov	r5, r0
 8008924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008926:	2b00      	cmp	r3, #0
 8008928:	d05a      	beq.n	80089e0 <_dtoa_r+0xa18>
 800892a:	6869      	ldr	r1, [r5, #4]
 800892c:	4658      	mov	r0, fp
 800892e:	f000 fd5b 	bl	80093e8 <_Balloc>
 8008932:	4606      	mov	r6, r0
 8008934:	b928      	cbnz	r0, 8008942 <_dtoa_r+0x97a>
 8008936:	4b84      	ldr	r3, [pc, #528]	@ (8008b48 <_dtoa_r+0xb80>)
 8008938:	4602      	mov	r2, r0
 800893a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800893e:	f7ff bb5a 	b.w	8007ff6 <_dtoa_r+0x2e>
 8008942:	692a      	ldr	r2, [r5, #16]
 8008944:	3202      	adds	r2, #2
 8008946:	0092      	lsls	r2, r2, #2
 8008948:	f105 010c 	add.w	r1, r5, #12
 800894c:	300c      	adds	r0, #12
 800894e:	f7ff fa7a 	bl	8007e46 <memcpy>
 8008952:	2201      	movs	r2, #1
 8008954:	4631      	mov	r1, r6
 8008956:	4658      	mov	r0, fp
 8008958:	f000 ff9e 	bl	8009898 <__lshift>
 800895c:	f10a 0301 	add.w	r3, sl, #1
 8008960:	9307      	str	r3, [sp, #28]
 8008962:	9b00      	ldr	r3, [sp, #0]
 8008964:	4453      	add	r3, sl
 8008966:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008968:	9b02      	ldr	r3, [sp, #8]
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	462f      	mov	r7, r5
 8008970:	930a      	str	r3, [sp, #40]	@ 0x28
 8008972:	4605      	mov	r5, r0
 8008974:	9b07      	ldr	r3, [sp, #28]
 8008976:	4621      	mov	r1, r4
 8008978:	3b01      	subs	r3, #1
 800897a:	4648      	mov	r0, r9
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	f7ff fa99 	bl	8007eb4 <quorem>
 8008982:	4639      	mov	r1, r7
 8008984:	9002      	str	r0, [sp, #8]
 8008986:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800898a:	4648      	mov	r0, r9
 800898c:	f000 fff0 	bl	8009970 <__mcmp>
 8008990:	462a      	mov	r2, r5
 8008992:	9008      	str	r0, [sp, #32]
 8008994:	4621      	mov	r1, r4
 8008996:	4658      	mov	r0, fp
 8008998:	f001 f806 	bl	80099a8 <__mdiff>
 800899c:	68c2      	ldr	r2, [r0, #12]
 800899e:	4606      	mov	r6, r0
 80089a0:	bb02      	cbnz	r2, 80089e4 <_dtoa_r+0xa1c>
 80089a2:	4601      	mov	r1, r0
 80089a4:	4648      	mov	r0, r9
 80089a6:	f000 ffe3 	bl	8009970 <__mcmp>
 80089aa:	4602      	mov	r2, r0
 80089ac:	4631      	mov	r1, r6
 80089ae:	4658      	mov	r0, fp
 80089b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80089b2:	f000 fd59 	bl	8009468 <_Bfree>
 80089b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089ba:	9e07      	ldr	r6, [sp, #28]
 80089bc:	ea43 0102 	orr.w	r1, r3, r2
 80089c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089c2:	4319      	orrs	r1, r3
 80089c4:	d110      	bne.n	80089e8 <_dtoa_r+0xa20>
 80089c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80089ca:	d029      	beq.n	8008a20 <_dtoa_r+0xa58>
 80089cc:	9b08      	ldr	r3, [sp, #32]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	dd02      	ble.n	80089d8 <_dtoa_r+0xa10>
 80089d2:	9b02      	ldr	r3, [sp, #8]
 80089d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80089d8:	9b00      	ldr	r3, [sp, #0]
 80089da:	f883 8000 	strb.w	r8, [r3]
 80089de:	e63f      	b.n	8008660 <_dtoa_r+0x698>
 80089e0:	4628      	mov	r0, r5
 80089e2:	e7bb      	b.n	800895c <_dtoa_r+0x994>
 80089e4:	2201      	movs	r2, #1
 80089e6:	e7e1      	b.n	80089ac <_dtoa_r+0x9e4>
 80089e8:	9b08      	ldr	r3, [sp, #32]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	db04      	blt.n	80089f8 <_dtoa_r+0xa30>
 80089ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089f0:	430b      	orrs	r3, r1
 80089f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089f4:	430b      	orrs	r3, r1
 80089f6:	d120      	bne.n	8008a3a <_dtoa_r+0xa72>
 80089f8:	2a00      	cmp	r2, #0
 80089fa:	dded      	ble.n	80089d8 <_dtoa_r+0xa10>
 80089fc:	4649      	mov	r1, r9
 80089fe:	2201      	movs	r2, #1
 8008a00:	4658      	mov	r0, fp
 8008a02:	f000 ff49 	bl	8009898 <__lshift>
 8008a06:	4621      	mov	r1, r4
 8008a08:	4681      	mov	r9, r0
 8008a0a:	f000 ffb1 	bl	8009970 <__mcmp>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	dc03      	bgt.n	8008a1a <_dtoa_r+0xa52>
 8008a12:	d1e1      	bne.n	80089d8 <_dtoa_r+0xa10>
 8008a14:	f018 0f01 	tst.w	r8, #1
 8008a18:	d0de      	beq.n	80089d8 <_dtoa_r+0xa10>
 8008a1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a1e:	d1d8      	bne.n	80089d2 <_dtoa_r+0xa0a>
 8008a20:	9a00      	ldr	r2, [sp, #0]
 8008a22:	2339      	movs	r3, #57	@ 0x39
 8008a24:	7013      	strb	r3, [r2, #0]
 8008a26:	4633      	mov	r3, r6
 8008a28:	461e      	mov	r6, r3
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008a30:	2a39      	cmp	r2, #57	@ 0x39
 8008a32:	d052      	beq.n	8008ada <_dtoa_r+0xb12>
 8008a34:	3201      	adds	r2, #1
 8008a36:	701a      	strb	r2, [r3, #0]
 8008a38:	e612      	b.n	8008660 <_dtoa_r+0x698>
 8008a3a:	2a00      	cmp	r2, #0
 8008a3c:	dd07      	ble.n	8008a4e <_dtoa_r+0xa86>
 8008a3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a42:	d0ed      	beq.n	8008a20 <_dtoa_r+0xa58>
 8008a44:	9a00      	ldr	r2, [sp, #0]
 8008a46:	f108 0301 	add.w	r3, r8, #1
 8008a4a:	7013      	strb	r3, [r2, #0]
 8008a4c:	e608      	b.n	8008660 <_dtoa_r+0x698>
 8008a4e:	9b07      	ldr	r3, [sp, #28]
 8008a50:	9a07      	ldr	r2, [sp, #28]
 8008a52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008a56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d028      	beq.n	8008aae <_dtoa_r+0xae6>
 8008a5c:	4649      	mov	r1, r9
 8008a5e:	2300      	movs	r3, #0
 8008a60:	220a      	movs	r2, #10
 8008a62:	4658      	mov	r0, fp
 8008a64:	f000 fd22 	bl	80094ac <__multadd>
 8008a68:	42af      	cmp	r7, r5
 8008a6a:	4681      	mov	r9, r0
 8008a6c:	f04f 0300 	mov.w	r3, #0
 8008a70:	f04f 020a 	mov.w	r2, #10
 8008a74:	4639      	mov	r1, r7
 8008a76:	4658      	mov	r0, fp
 8008a78:	d107      	bne.n	8008a8a <_dtoa_r+0xac2>
 8008a7a:	f000 fd17 	bl	80094ac <__multadd>
 8008a7e:	4607      	mov	r7, r0
 8008a80:	4605      	mov	r5, r0
 8008a82:	9b07      	ldr	r3, [sp, #28]
 8008a84:	3301      	adds	r3, #1
 8008a86:	9307      	str	r3, [sp, #28]
 8008a88:	e774      	b.n	8008974 <_dtoa_r+0x9ac>
 8008a8a:	f000 fd0f 	bl	80094ac <__multadd>
 8008a8e:	4629      	mov	r1, r5
 8008a90:	4607      	mov	r7, r0
 8008a92:	2300      	movs	r3, #0
 8008a94:	220a      	movs	r2, #10
 8008a96:	4658      	mov	r0, fp
 8008a98:	f000 fd08 	bl	80094ac <__multadd>
 8008a9c:	4605      	mov	r5, r0
 8008a9e:	e7f0      	b.n	8008a82 <_dtoa_r+0xaba>
 8008aa0:	9b00      	ldr	r3, [sp, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	bfcc      	ite	gt
 8008aa6:	461e      	movgt	r6, r3
 8008aa8:	2601      	movle	r6, #1
 8008aaa:	4456      	add	r6, sl
 8008aac:	2700      	movs	r7, #0
 8008aae:	4649      	mov	r1, r9
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	4658      	mov	r0, fp
 8008ab4:	f000 fef0 	bl	8009898 <__lshift>
 8008ab8:	4621      	mov	r1, r4
 8008aba:	4681      	mov	r9, r0
 8008abc:	f000 ff58 	bl	8009970 <__mcmp>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	dcb0      	bgt.n	8008a26 <_dtoa_r+0xa5e>
 8008ac4:	d102      	bne.n	8008acc <_dtoa_r+0xb04>
 8008ac6:	f018 0f01 	tst.w	r8, #1
 8008aca:	d1ac      	bne.n	8008a26 <_dtoa_r+0xa5e>
 8008acc:	4633      	mov	r3, r6
 8008ace:	461e      	mov	r6, r3
 8008ad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ad4:	2a30      	cmp	r2, #48	@ 0x30
 8008ad6:	d0fa      	beq.n	8008ace <_dtoa_r+0xb06>
 8008ad8:	e5c2      	b.n	8008660 <_dtoa_r+0x698>
 8008ada:	459a      	cmp	sl, r3
 8008adc:	d1a4      	bne.n	8008a28 <_dtoa_r+0xa60>
 8008ade:	9b04      	ldr	r3, [sp, #16]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	9304      	str	r3, [sp, #16]
 8008ae4:	2331      	movs	r3, #49	@ 0x31
 8008ae6:	f88a 3000 	strb.w	r3, [sl]
 8008aea:	e5b9      	b.n	8008660 <_dtoa_r+0x698>
 8008aec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008aee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008b4c <_dtoa_r+0xb84>
 8008af2:	b11b      	cbz	r3, 8008afc <_dtoa_r+0xb34>
 8008af4:	f10a 0308 	add.w	r3, sl, #8
 8008af8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	4650      	mov	r0, sl
 8008afe:	b019      	add	sp, #100	@ 0x64
 8008b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	f77f ae37 	ble.w	800877a <_dtoa_r+0x7b2>
 8008b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b10:	2001      	movs	r0, #1
 8008b12:	e655      	b.n	80087c0 <_dtoa_r+0x7f8>
 8008b14:	9b00      	ldr	r3, [sp, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f77f aed6 	ble.w	80088c8 <_dtoa_r+0x900>
 8008b1c:	4656      	mov	r6, sl
 8008b1e:	4621      	mov	r1, r4
 8008b20:	4648      	mov	r0, r9
 8008b22:	f7ff f9c7 	bl	8007eb4 <quorem>
 8008b26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b2a:	f806 8b01 	strb.w	r8, [r6], #1
 8008b2e:	9b00      	ldr	r3, [sp, #0]
 8008b30:	eba6 020a 	sub.w	r2, r6, sl
 8008b34:	4293      	cmp	r3, r2
 8008b36:	ddb3      	ble.n	8008aa0 <_dtoa_r+0xad8>
 8008b38:	4649      	mov	r1, r9
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	220a      	movs	r2, #10
 8008b3e:	4658      	mov	r0, fp
 8008b40:	f000 fcb4 	bl	80094ac <__multadd>
 8008b44:	4681      	mov	r9, r0
 8008b46:	e7ea      	b.n	8008b1e <_dtoa_r+0xb56>
 8008b48:	0800a82f 	.word	0x0800a82f
 8008b4c:	0800a7ca 	.word	0x0800a7ca

08008b50 <_free_r>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4605      	mov	r5, r0
 8008b54:	2900      	cmp	r1, #0
 8008b56:	d041      	beq.n	8008bdc <_free_r+0x8c>
 8008b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b5c:	1f0c      	subs	r4, r1, #4
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	bfb8      	it	lt
 8008b62:	18e4      	addlt	r4, r4, r3
 8008b64:	f000 fc34 	bl	80093d0 <__malloc_lock>
 8008b68:	4a1d      	ldr	r2, [pc, #116]	@ (8008be0 <_free_r+0x90>)
 8008b6a:	6813      	ldr	r3, [r2, #0]
 8008b6c:	b933      	cbnz	r3, 8008b7c <_free_r+0x2c>
 8008b6e:	6063      	str	r3, [r4, #4]
 8008b70:	6014      	str	r4, [r2, #0]
 8008b72:	4628      	mov	r0, r5
 8008b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b78:	f000 bc30 	b.w	80093dc <__malloc_unlock>
 8008b7c:	42a3      	cmp	r3, r4
 8008b7e:	d908      	bls.n	8008b92 <_free_r+0x42>
 8008b80:	6820      	ldr	r0, [r4, #0]
 8008b82:	1821      	adds	r1, r4, r0
 8008b84:	428b      	cmp	r3, r1
 8008b86:	bf01      	itttt	eq
 8008b88:	6819      	ldreq	r1, [r3, #0]
 8008b8a:	685b      	ldreq	r3, [r3, #4]
 8008b8c:	1809      	addeq	r1, r1, r0
 8008b8e:	6021      	streq	r1, [r4, #0]
 8008b90:	e7ed      	b.n	8008b6e <_free_r+0x1e>
 8008b92:	461a      	mov	r2, r3
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	b10b      	cbz	r3, 8008b9c <_free_r+0x4c>
 8008b98:	42a3      	cmp	r3, r4
 8008b9a:	d9fa      	bls.n	8008b92 <_free_r+0x42>
 8008b9c:	6811      	ldr	r1, [r2, #0]
 8008b9e:	1850      	adds	r0, r2, r1
 8008ba0:	42a0      	cmp	r0, r4
 8008ba2:	d10b      	bne.n	8008bbc <_free_r+0x6c>
 8008ba4:	6820      	ldr	r0, [r4, #0]
 8008ba6:	4401      	add	r1, r0
 8008ba8:	1850      	adds	r0, r2, r1
 8008baa:	4283      	cmp	r3, r0
 8008bac:	6011      	str	r1, [r2, #0]
 8008bae:	d1e0      	bne.n	8008b72 <_free_r+0x22>
 8008bb0:	6818      	ldr	r0, [r3, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	6053      	str	r3, [r2, #4]
 8008bb6:	4408      	add	r0, r1
 8008bb8:	6010      	str	r0, [r2, #0]
 8008bba:	e7da      	b.n	8008b72 <_free_r+0x22>
 8008bbc:	d902      	bls.n	8008bc4 <_free_r+0x74>
 8008bbe:	230c      	movs	r3, #12
 8008bc0:	602b      	str	r3, [r5, #0]
 8008bc2:	e7d6      	b.n	8008b72 <_free_r+0x22>
 8008bc4:	6820      	ldr	r0, [r4, #0]
 8008bc6:	1821      	adds	r1, r4, r0
 8008bc8:	428b      	cmp	r3, r1
 8008bca:	bf04      	itt	eq
 8008bcc:	6819      	ldreq	r1, [r3, #0]
 8008bce:	685b      	ldreq	r3, [r3, #4]
 8008bd0:	6063      	str	r3, [r4, #4]
 8008bd2:	bf04      	itt	eq
 8008bd4:	1809      	addeq	r1, r1, r0
 8008bd6:	6021      	streq	r1, [r4, #0]
 8008bd8:	6054      	str	r4, [r2, #4]
 8008bda:	e7ca      	b.n	8008b72 <_free_r+0x22>
 8008bdc:	bd38      	pop	{r3, r4, r5, pc}
 8008bde:	bf00      	nop
 8008be0:	20000908 	.word	0x20000908

08008be4 <rshift>:
 8008be4:	6903      	ldr	r3, [r0, #16]
 8008be6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008bea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008bf2:	f100 0414 	add.w	r4, r0, #20
 8008bf6:	dd45      	ble.n	8008c84 <rshift+0xa0>
 8008bf8:	f011 011f 	ands.w	r1, r1, #31
 8008bfc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c04:	d10c      	bne.n	8008c20 <rshift+0x3c>
 8008c06:	f100 0710 	add.w	r7, r0, #16
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	42b1      	cmp	r1, r6
 8008c0e:	d334      	bcc.n	8008c7a <rshift+0x96>
 8008c10:	1a9b      	subs	r3, r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	1eea      	subs	r2, r5, #3
 8008c16:	4296      	cmp	r6, r2
 8008c18:	bf38      	it	cc
 8008c1a:	2300      	movcc	r3, #0
 8008c1c:	4423      	add	r3, r4
 8008c1e:	e015      	b.n	8008c4c <rshift+0x68>
 8008c20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c24:	f1c1 0820 	rsb	r8, r1, #32
 8008c28:	40cf      	lsrs	r7, r1
 8008c2a:	f105 0e04 	add.w	lr, r5, #4
 8008c2e:	46a1      	mov	r9, r4
 8008c30:	4576      	cmp	r6, lr
 8008c32:	46f4      	mov	ip, lr
 8008c34:	d815      	bhi.n	8008c62 <rshift+0x7e>
 8008c36:	1a9a      	subs	r2, r3, r2
 8008c38:	0092      	lsls	r2, r2, #2
 8008c3a:	3a04      	subs	r2, #4
 8008c3c:	3501      	adds	r5, #1
 8008c3e:	42ae      	cmp	r6, r5
 8008c40:	bf38      	it	cc
 8008c42:	2200      	movcc	r2, #0
 8008c44:	18a3      	adds	r3, r4, r2
 8008c46:	50a7      	str	r7, [r4, r2]
 8008c48:	b107      	cbz	r7, 8008c4c <rshift+0x68>
 8008c4a:	3304      	adds	r3, #4
 8008c4c:	1b1a      	subs	r2, r3, r4
 8008c4e:	42a3      	cmp	r3, r4
 8008c50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c54:	bf08      	it	eq
 8008c56:	2300      	moveq	r3, #0
 8008c58:	6102      	str	r2, [r0, #16]
 8008c5a:	bf08      	it	eq
 8008c5c:	6143      	streq	r3, [r0, #20]
 8008c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c62:	f8dc c000 	ldr.w	ip, [ip]
 8008c66:	fa0c fc08 	lsl.w	ip, ip, r8
 8008c6a:	ea4c 0707 	orr.w	r7, ip, r7
 8008c6e:	f849 7b04 	str.w	r7, [r9], #4
 8008c72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c76:	40cf      	lsrs	r7, r1
 8008c78:	e7da      	b.n	8008c30 <rshift+0x4c>
 8008c7a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008c7e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c82:	e7c3      	b.n	8008c0c <rshift+0x28>
 8008c84:	4623      	mov	r3, r4
 8008c86:	e7e1      	b.n	8008c4c <rshift+0x68>

08008c88 <__hexdig_fun>:
 8008c88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008c8c:	2b09      	cmp	r3, #9
 8008c8e:	d802      	bhi.n	8008c96 <__hexdig_fun+0xe>
 8008c90:	3820      	subs	r0, #32
 8008c92:	b2c0      	uxtb	r0, r0
 8008c94:	4770      	bx	lr
 8008c96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008c9a:	2b05      	cmp	r3, #5
 8008c9c:	d801      	bhi.n	8008ca2 <__hexdig_fun+0x1a>
 8008c9e:	3847      	subs	r0, #71	@ 0x47
 8008ca0:	e7f7      	b.n	8008c92 <__hexdig_fun+0xa>
 8008ca2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008ca6:	2b05      	cmp	r3, #5
 8008ca8:	d801      	bhi.n	8008cae <__hexdig_fun+0x26>
 8008caa:	3827      	subs	r0, #39	@ 0x27
 8008cac:	e7f1      	b.n	8008c92 <__hexdig_fun+0xa>
 8008cae:	2000      	movs	r0, #0
 8008cb0:	4770      	bx	lr
	...

08008cb4 <__gethex>:
 8008cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	b085      	sub	sp, #20
 8008cba:	468a      	mov	sl, r1
 8008cbc:	9302      	str	r3, [sp, #8]
 8008cbe:	680b      	ldr	r3, [r1, #0]
 8008cc0:	9001      	str	r0, [sp, #4]
 8008cc2:	4690      	mov	r8, r2
 8008cc4:	1c9c      	adds	r4, r3, #2
 8008cc6:	46a1      	mov	r9, r4
 8008cc8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008ccc:	2830      	cmp	r0, #48	@ 0x30
 8008cce:	d0fa      	beq.n	8008cc6 <__gethex+0x12>
 8008cd0:	eba9 0303 	sub.w	r3, r9, r3
 8008cd4:	f1a3 0b02 	sub.w	fp, r3, #2
 8008cd8:	f7ff ffd6 	bl	8008c88 <__hexdig_fun>
 8008cdc:	4605      	mov	r5, r0
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d168      	bne.n	8008db4 <__gethex+0x100>
 8008ce2:	49a0      	ldr	r1, [pc, #640]	@ (8008f64 <__gethex+0x2b0>)
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	4648      	mov	r0, r9
 8008ce8:	f7fe ffbf 	bl	8007c6a <strncmp>
 8008cec:	4607      	mov	r7, r0
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d167      	bne.n	8008dc2 <__gethex+0x10e>
 8008cf2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008cf6:	4626      	mov	r6, r4
 8008cf8:	f7ff ffc6 	bl	8008c88 <__hexdig_fun>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d062      	beq.n	8008dc6 <__gethex+0x112>
 8008d00:	4623      	mov	r3, r4
 8008d02:	7818      	ldrb	r0, [r3, #0]
 8008d04:	2830      	cmp	r0, #48	@ 0x30
 8008d06:	4699      	mov	r9, r3
 8008d08:	f103 0301 	add.w	r3, r3, #1
 8008d0c:	d0f9      	beq.n	8008d02 <__gethex+0x4e>
 8008d0e:	f7ff ffbb 	bl	8008c88 <__hexdig_fun>
 8008d12:	fab0 f580 	clz	r5, r0
 8008d16:	096d      	lsrs	r5, r5, #5
 8008d18:	f04f 0b01 	mov.w	fp, #1
 8008d1c:	464a      	mov	r2, r9
 8008d1e:	4616      	mov	r6, r2
 8008d20:	3201      	adds	r2, #1
 8008d22:	7830      	ldrb	r0, [r6, #0]
 8008d24:	f7ff ffb0 	bl	8008c88 <__hexdig_fun>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d1f8      	bne.n	8008d1e <__gethex+0x6a>
 8008d2c:	498d      	ldr	r1, [pc, #564]	@ (8008f64 <__gethex+0x2b0>)
 8008d2e:	2201      	movs	r2, #1
 8008d30:	4630      	mov	r0, r6
 8008d32:	f7fe ff9a 	bl	8007c6a <strncmp>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d13f      	bne.n	8008dba <__gethex+0x106>
 8008d3a:	b944      	cbnz	r4, 8008d4e <__gethex+0x9a>
 8008d3c:	1c74      	adds	r4, r6, #1
 8008d3e:	4622      	mov	r2, r4
 8008d40:	4616      	mov	r6, r2
 8008d42:	3201      	adds	r2, #1
 8008d44:	7830      	ldrb	r0, [r6, #0]
 8008d46:	f7ff ff9f 	bl	8008c88 <__hexdig_fun>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d1f8      	bne.n	8008d40 <__gethex+0x8c>
 8008d4e:	1ba4      	subs	r4, r4, r6
 8008d50:	00a7      	lsls	r7, r4, #2
 8008d52:	7833      	ldrb	r3, [r6, #0]
 8008d54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008d58:	2b50      	cmp	r3, #80	@ 0x50
 8008d5a:	d13e      	bne.n	8008dda <__gethex+0x126>
 8008d5c:	7873      	ldrb	r3, [r6, #1]
 8008d5e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008d60:	d033      	beq.n	8008dca <__gethex+0x116>
 8008d62:	2b2d      	cmp	r3, #45	@ 0x2d
 8008d64:	d034      	beq.n	8008dd0 <__gethex+0x11c>
 8008d66:	1c71      	adds	r1, r6, #1
 8008d68:	2400      	movs	r4, #0
 8008d6a:	7808      	ldrb	r0, [r1, #0]
 8008d6c:	f7ff ff8c 	bl	8008c88 <__hexdig_fun>
 8008d70:	1e43      	subs	r3, r0, #1
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b18      	cmp	r3, #24
 8008d76:	d830      	bhi.n	8008dda <__gethex+0x126>
 8008d78:	f1a0 0210 	sub.w	r2, r0, #16
 8008d7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d80:	f7ff ff82 	bl	8008c88 <__hexdig_fun>
 8008d84:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d88:	fa5f fc8c 	uxtb.w	ip, ip
 8008d8c:	f1bc 0f18 	cmp.w	ip, #24
 8008d90:	f04f 030a 	mov.w	r3, #10
 8008d94:	d91e      	bls.n	8008dd4 <__gethex+0x120>
 8008d96:	b104      	cbz	r4, 8008d9a <__gethex+0xe6>
 8008d98:	4252      	negs	r2, r2
 8008d9a:	4417      	add	r7, r2
 8008d9c:	f8ca 1000 	str.w	r1, [sl]
 8008da0:	b1ed      	cbz	r5, 8008dde <__gethex+0x12a>
 8008da2:	f1bb 0f00 	cmp.w	fp, #0
 8008da6:	bf0c      	ite	eq
 8008da8:	2506      	moveq	r5, #6
 8008daa:	2500      	movne	r5, #0
 8008dac:	4628      	mov	r0, r5
 8008dae:	b005      	add	sp, #20
 8008db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db4:	2500      	movs	r5, #0
 8008db6:	462c      	mov	r4, r5
 8008db8:	e7b0      	b.n	8008d1c <__gethex+0x68>
 8008dba:	2c00      	cmp	r4, #0
 8008dbc:	d1c7      	bne.n	8008d4e <__gethex+0x9a>
 8008dbe:	4627      	mov	r7, r4
 8008dc0:	e7c7      	b.n	8008d52 <__gethex+0x9e>
 8008dc2:	464e      	mov	r6, r9
 8008dc4:	462f      	mov	r7, r5
 8008dc6:	2501      	movs	r5, #1
 8008dc8:	e7c3      	b.n	8008d52 <__gethex+0x9e>
 8008dca:	2400      	movs	r4, #0
 8008dcc:	1cb1      	adds	r1, r6, #2
 8008dce:	e7cc      	b.n	8008d6a <__gethex+0xb6>
 8008dd0:	2401      	movs	r4, #1
 8008dd2:	e7fb      	b.n	8008dcc <__gethex+0x118>
 8008dd4:	fb03 0002 	mla	r0, r3, r2, r0
 8008dd8:	e7ce      	b.n	8008d78 <__gethex+0xc4>
 8008dda:	4631      	mov	r1, r6
 8008ddc:	e7de      	b.n	8008d9c <__gethex+0xe8>
 8008dde:	eba6 0309 	sub.w	r3, r6, r9
 8008de2:	3b01      	subs	r3, #1
 8008de4:	4629      	mov	r1, r5
 8008de6:	2b07      	cmp	r3, #7
 8008de8:	dc0a      	bgt.n	8008e00 <__gethex+0x14c>
 8008dea:	9801      	ldr	r0, [sp, #4]
 8008dec:	f000 fafc 	bl	80093e8 <_Balloc>
 8008df0:	4604      	mov	r4, r0
 8008df2:	b940      	cbnz	r0, 8008e06 <__gethex+0x152>
 8008df4:	4b5c      	ldr	r3, [pc, #368]	@ (8008f68 <__gethex+0x2b4>)
 8008df6:	4602      	mov	r2, r0
 8008df8:	21e4      	movs	r1, #228	@ 0xe4
 8008dfa:	485c      	ldr	r0, [pc, #368]	@ (8008f6c <__gethex+0x2b8>)
 8008dfc:	f7ff f83c 	bl	8007e78 <__assert_func>
 8008e00:	3101      	adds	r1, #1
 8008e02:	105b      	asrs	r3, r3, #1
 8008e04:	e7ef      	b.n	8008de6 <__gethex+0x132>
 8008e06:	f100 0a14 	add.w	sl, r0, #20
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	4655      	mov	r5, sl
 8008e0e:	469b      	mov	fp, r3
 8008e10:	45b1      	cmp	r9, r6
 8008e12:	d337      	bcc.n	8008e84 <__gethex+0x1d0>
 8008e14:	f845 bb04 	str.w	fp, [r5], #4
 8008e18:	eba5 050a 	sub.w	r5, r5, sl
 8008e1c:	10ad      	asrs	r5, r5, #2
 8008e1e:	6125      	str	r5, [r4, #16]
 8008e20:	4658      	mov	r0, fp
 8008e22:	f000 fbd3 	bl	80095cc <__hi0bits>
 8008e26:	016d      	lsls	r5, r5, #5
 8008e28:	f8d8 6000 	ldr.w	r6, [r8]
 8008e2c:	1a2d      	subs	r5, r5, r0
 8008e2e:	42b5      	cmp	r5, r6
 8008e30:	dd54      	ble.n	8008edc <__gethex+0x228>
 8008e32:	1bad      	subs	r5, r5, r6
 8008e34:	4629      	mov	r1, r5
 8008e36:	4620      	mov	r0, r4
 8008e38:	f000 ff67 	bl	8009d0a <__any_on>
 8008e3c:	4681      	mov	r9, r0
 8008e3e:	b178      	cbz	r0, 8008e60 <__gethex+0x1ac>
 8008e40:	1e6b      	subs	r3, r5, #1
 8008e42:	1159      	asrs	r1, r3, #5
 8008e44:	f003 021f 	and.w	r2, r3, #31
 8008e48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008e4c:	f04f 0901 	mov.w	r9, #1
 8008e50:	fa09 f202 	lsl.w	r2, r9, r2
 8008e54:	420a      	tst	r2, r1
 8008e56:	d003      	beq.n	8008e60 <__gethex+0x1ac>
 8008e58:	454b      	cmp	r3, r9
 8008e5a:	dc36      	bgt.n	8008eca <__gethex+0x216>
 8008e5c:	f04f 0902 	mov.w	r9, #2
 8008e60:	4629      	mov	r1, r5
 8008e62:	4620      	mov	r0, r4
 8008e64:	f7ff febe 	bl	8008be4 <rshift>
 8008e68:	442f      	add	r7, r5
 8008e6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e6e:	42bb      	cmp	r3, r7
 8008e70:	da42      	bge.n	8008ef8 <__gethex+0x244>
 8008e72:	9801      	ldr	r0, [sp, #4]
 8008e74:	4621      	mov	r1, r4
 8008e76:	f000 faf7 	bl	8009468 <_Bfree>
 8008e7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	25a3      	movs	r5, #163	@ 0xa3
 8008e82:	e793      	b.n	8008dac <__gethex+0xf8>
 8008e84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008e88:	2a2e      	cmp	r2, #46	@ 0x2e
 8008e8a:	d012      	beq.n	8008eb2 <__gethex+0x1fe>
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	d104      	bne.n	8008e9a <__gethex+0x1e6>
 8008e90:	f845 bb04 	str.w	fp, [r5], #4
 8008e94:	f04f 0b00 	mov.w	fp, #0
 8008e98:	465b      	mov	r3, fp
 8008e9a:	7830      	ldrb	r0, [r6, #0]
 8008e9c:	9303      	str	r3, [sp, #12]
 8008e9e:	f7ff fef3 	bl	8008c88 <__hexdig_fun>
 8008ea2:	9b03      	ldr	r3, [sp, #12]
 8008ea4:	f000 000f 	and.w	r0, r0, #15
 8008ea8:	4098      	lsls	r0, r3
 8008eaa:	ea4b 0b00 	orr.w	fp, fp, r0
 8008eae:	3304      	adds	r3, #4
 8008eb0:	e7ae      	b.n	8008e10 <__gethex+0x15c>
 8008eb2:	45b1      	cmp	r9, r6
 8008eb4:	d8ea      	bhi.n	8008e8c <__gethex+0x1d8>
 8008eb6:	492b      	ldr	r1, [pc, #172]	@ (8008f64 <__gethex+0x2b0>)
 8008eb8:	9303      	str	r3, [sp, #12]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	f7fe fed4 	bl	8007c6a <strncmp>
 8008ec2:	9b03      	ldr	r3, [sp, #12]
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d1e1      	bne.n	8008e8c <__gethex+0x1d8>
 8008ec8:	e7a2      	b.n	8008e10 <__gethex+0x15c>
 8008eca:	1ea9      	subs	r1, r5, #2
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f000 ff1c 	bl	8009d0a <__any_on>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	d0c2      	beq.n	8008e5c <__gethex+0x1a8>
 8008ed6:	f04f 0903 	mov.w	r9, #3
 8008eda:	e7c1      	b.n	8008e60 <__gethex+0x1ac>
 8008edc:	da09      	bge.n	8008ef2 <__gethex+0x23e>
 8008ede:	1b75      	subs	r5, r6, r5
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	9801      	ldr	r0, [sp, #4]
 8008ee4:	462a      	mov	r2, r5
 8008ee6:	f000 fcd7 	bl	8009898 <__lshift>
 8008eea:	1b7f      	subs	r7, r7, r5
 8008eec:	4604      	mov	r4, r0
 8008eee:	f100 0a14 	add.w	sl, r0, #20
 8008ef2:	f04f 0900 	mov.w	r9, #0
 8008ef6:	e7b8      	b.n	8008e6a <__gethex+0x1b6>
 8008ef8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008efc:	42bd      	cmp	r5, r7
 8008efe:	dd6f      	ble.n	8008fe0 <__gethex+0x32c>
 8008f00:	1bed      	subs	r5, r5, r7
 8008f02:	42ae      	cmp	r6, r5
 8008f04:	dc34      	bgt.n	8008f70 <__gethex+0x2bc>
 8008f06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d022      	beq.n	8008f54 <__gethex+0x2a0>
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d024      	beq.n	8008f5c <__gethex+0x2a8>
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d115      	bne.n	8008f42 <__gethex+0x28e>
 8008f16:	42ae      	cmp	r6, r5
 8008f18:	d113      	bne.n	8008f42 <__gethex+0x28e>
 8008f1a:	2e01      	cmp	r6, #1
 8008f1c:	d10b      	bne.n	8008f36 <__gethex+0x282>
 8008f1e:	9a02      	ldr	r2, [sp, #8]
 8008f20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	2301      	movs	r3, #1
 8008f28:	6123      	str	r3, [r4, #16]
 8008f2a:	f8ca 3000 	str.w	r3, [sl]
 8008f2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f30:	2562      	movs	r5, #98	@ 0x62
 8008f32:	601c      	str	r4, [r3, #0]
 8008f34:	e73a      	b.n	8008dac <__gethex+0xf8>
 8008f36:	1e71      	subs	r1, r6, #1
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 fee6 	bl	8009d0a <__any_on>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d1ed      	bne.n	8008f1e <__gethex+0x26a>
 8008f42:	9801      	ldr	r0, [sp, #4]
 8008f44:	4621      	mov	r1, r4
 8008f46:	f000 fa8f 	bl	8009468 <_Bfree>
 8008f4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	2550      	movs	r5, #80	@ 0x50
 8008f52:	e72b      	b.n	8008dac <__gethex+0xf8>
 8008f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1f3      	bne.n	8008f42 <__gethex+0x28e>
 8008f5a:	e7e0      	b.n	8008f1e <__gethex+0x26a>
 8008f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1dd      	bne.n	8008f1e <__gethex+0x26a>
 8008f62:	e7ee      	b.n	8008f42 <__gethex+0x28e>
 8008f64:	0800a58c 	.word	0x0800a58c
 8008f68:	0800a82f 	.word	0x0800a82f
 8008f6c:	0800a840 	.word	0x0800a840
 8008f70:	1e6f      	subs	r7, r5, #1
 8008f72:	f1b9 0f00 	cmp.w	r9, #0
 8008f76:	d130      	bne.n	8008fda <__gethex+0x326>
 8008f78:	b127      	cbz	r7, 8008f84 <__gethex+0x2d0>
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f000 fec4 	bl	8009d0a <__any_on>
 8008f82:	4681      	mov	r9, r0
 8008f84:	117a      	asrs	r2, r7, #5
 8008f86:	2301      	movs	r3, #1
 8008f88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008f8c:	f007 071f 	and.w	r7, r7, #31
 8008f90:	40bb      	lsls	r3, r7
 8008f92:	4213      	tst	r3, r2
 8008f94:	4629      	mov	r1, r5
 8008f96:	4620      	mov	r0, r4
 8008f98:	bf18      	it	ne
 8008f9a:	f049 0902 	orrne.w	r9, r9, #2
 8008f9e:	f7ff fe21 	bl	8008be4 <rshift>
 8008fa2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008fa6:	1b76      	subs	r6, r6, r5
 8008fa8:	2502      	movs	r5, #2
 8008faa:	f1b9 0f00 	cmp.w	r9, #0
 8008fae:	d047      	beq.n	8009040 <__gethex+0x38c>
 8008fb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d015      	beq.n	8008fe4 <__gethex+0x330>
 8008fb8:	2b03      	cmp	r3, #3
 8008fba:	d017      	beq.n	8008fec <__gethex+0x338>
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d109      	bne.n	8008fd4 <__gethex+0x320>
 8008fc0:	f019 0f02 	tst.w	r9, #2
 8008fc4:	d006      	beq.n	8008fd4 <__gethex+0x320>
 8008fc6:	f8da 3000 	ldr.w	r3, [sl]
 8008fca:	ea49 0903 	orr.w	r9, r9, r3
 8008fce:	f019 0f01 	tst.w	r9, #1
 8008fd2:	d10e      	bne.n	8008ff2 <__gethex+0x33e>
 8008fd4:	f045 0510 	orr.w	r5, r5, #16
 8008fd8:	e032      	b.n	8009040 <__gethex+0x38c>
 8008fda:	f04f 0901 	mov.w	r9, #1
 8008fde:	e7d1      	b.n	8008f84 <__gethex+0x2d0>
 8008fe0:	2501      	movs	r5, #1
 8008fe2:	e7e2      	b.n	8008faa <__gethex+0x2f6>
 8008fe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fe6:	f1c3 0301 	rsb	r3, r3, #1
 8008fea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0f0      	beq.n	8008fd4 <__gethex+0x320>
 8008ff2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ff6:	f104 0314 	add.w	r3, r4, #20
 8008ffa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008ffe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009002:	f04f 0c00 	mov.w	ip, #0
 8009006:	4618      	mov	r0, r3
 8009008:	f853 2b04 	ldr.w	r2, [r3], #4
 800900c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009010:	d01b      	beq.n	800904a <__gethex+0x396>
 8009012:	3201      	adds	r2, #1
 8009014:	6002      	str	r2, [r0, #0]
 8009016:	2d02      	cmp	r5, #2
 8009018:	f104 0314 	add.w	r3, r4, #20
 800901c:	d13c      	bne.n	8009098 <__gethex+0x3e4>
 800901e:	f8d8 2000 	ldr.w	r2, [r8]
 8009022:	3a01      	subs	r2, #1
 8009024:	42b2      	cmp	r2, r6
 8009026:	d109      	bne.n	800903c <__gethex+0x388>
 8009028:	1171      	asrs	r1, r6, #5
 800902a:	2201      	movs	r2, #1
 800902c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009030:	f006 061f 	and.w	r6, r6, #31
 8009034:	fa02 f606 	lsl.w	r6, r2, r6
 8009038:	421e      	tst	r6, r3
 800903a:	d13a      	bne.n	80090b2 <__gethex+0x3fe>
 800903c:	f045 0520 	orr.w	r5, r5, #32
 8009040:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009042:	601c      	str	r4, [r3, #0]
 8009044:	9b02      	ldr	r3, [sp, #8]
 8009046:	601f      	str	r7, [r3, #0]
 8009048:	e6b0      	b.n	8008dac <__gethex+0xf8>
 800904a:	4299      	cmp	r1, r3
 800904c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009050:	d8d9      	bhi.n	8009006 <__gethex+0x352>
 8009052:	68a3      	ldr	r3, [r4, #8]
 8009054:	459b      	cmp	fp, r3
 8009056:	db17      	blt.n	8009088 <__gethex+0x3d4>
 8009058:	6861      	ldr	r1, [r4, #4]
 800905a:	9801      	ldr	r0, [sp, #4]
 800905c:	3101      	adds	r1, #1
 800905e:	f000 f9c3 	bl	80093e8 <_Balloc>
 8009062:	4681      	mov	r9, r0
 8009064:	b918      	cbnz	r0, 800906e <__gethex+0x3ba>
 8009066:	4b1a      	ldr	r3, [pc, #104]	@ (80090d0 <__gethex+0x41c>)
 8009068:	4602      	mov	r2, r0
 800906a:	2184      	movs	r1, #132	@ 0x84
 800906c:	e6c5      	b.n	8008dfa <__gethex+0x146>
 800906e:	6922      	ldr	r2, [r4, #16]
 8009070:	3202      	adds	r2, #2
 8009072:	f104 010c 	add.w	r1, r4, #12
 8009076:	0092      	lsls	r2, r2, #2
 8009078:	300c      	adds	r0, #12
 800907a:	f7fe fee4 	bl	8007e46 <memcpy>
 800907e:	4621      	mov	r1, r4
 8009080:	9801      	ldr	r0, [sp, #4]
 8009082:	f000 f9f1 	bl	8009468 <_Bfree>
 8009086:	464c      	mov	r4, r9
 8009088:	6923      	ldr	r3, [r4, #16]
 800908a:	1c5a      	adds	r2, r3, #1
 800908c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009090:	6122      	str	r2, [r4, #16]
 8009092:	2201      	movs	r2, #1
 8009094:	615a      	str	r2, [r3, #20]
 8009096:	e7be      	b.n	8009016 <__gethex+0x362>
 8009098:	6922      	ldr	r2, [r4, #16]
 800909a:	455a      	cmp	r2, fp
 800909c:	dd0b      	ble.n	80090b6 <__gethex+0x402>
 800909e:	2101      	movs	r1, #1
 80090a0:	4620      	mov	r0, r4
 80090a2:	f7ff fd9f 	bl	8008be4 <rshift>
 80090a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090aa:	3701      	adds	r7, #1
 80090ac:	42bb      	cmp	r3, r7
 80090ae:	f6ff aee0 	blt.w	8008e72 <__gethex+0x1be>
 80090b2:	2501      	movs	r5, #1
 80090b4:	e7c2      	b.n	800903c <__gethex+0x388>
 80090b6:	f016 061f 	ands.w	r6, r6, #31
 80090ba:	d0fa      	beq.n	80090b2 <__gethex+0x3fe>
 80090bc:	4453      	add	r3, sl
 80090be:	f1c6 0620 	rsb	r6, r6, #32
 80090c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80090c6:	f000 fa81 	bl	80095cc <__hi0bits>
 80090ca:	42b0      	cmp	r0, r6
 80090cc:	dbe7      	blt.n	800909e <__gethex+0x3ea>
 80090ce:	e7f0      	b.n	80090b2 <__gethex+0x3fe>
 80090d0:	0800a82f 	.word	0x0800a82f

080090d4 <L_shift>:
 80090d4:	f1c2 0208 	rsb	r2, r2, #8
 80090d8:	0092      	lsls	r2, r2, #2
 80090da:	b570      	push	{r4, r5, r6, lr}
 80090dc:	f1c2 0620 	rsb	r6, r2, #32
 80090e0:	6843      	ldr	r3, [r0, #4]
 80090e2:	6804      	ldr	r4, [r0, #0]
 80090e4:	fa03 f506 	lsl.w	r5, r3, r6
 80090e8:	432c      	orrs	r4, r5
 80090ea:	40d3      	lsrs	r3, r2
 80090ec:	6004      	str	r4, [r0, #0]
 80090ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80090f2:	4288      	cmp	r0, r1
 80090f4:	d3f4      	bcc.n	80090e0 <L_shift+0xc>
 80090f6:	bd70      	pop	{r4, r5, r6, pc}

080090f8 <__match>:
 80090f8:	b530      	push	{r4, r5, lr}
 80090fa:	6803      	ldr	r3, [r0, #0]
 80090fc:	3301      	adds	r3, #1
 80090fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009102:	b914      	cbnz	r4, 800910a <__match+0x12>
 8009104:	6003      	str	r3, [r0, #0]
 8009106:	2001      	movs	r0, #1
 8009108:	bd30      	pop	{r4, r5, pc}
 800910a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800910e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009112:	2d19      	cmp	r5, #25
 8009114:	bf98      	it	ls
 8009116:	3220      	addls	r2, #32
 8009118:	42a2      	cmp	r2, r4
 800911a:	d0f0      	beq.n	80090fe <__match+0x6>
 800911c:	2000      	movs	r0, #0
 800911e:	e7f3      	b.n	8009108 <__match+0x10>

08009120 <__hexnan>:
 8009120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	680b      	ldr	r3, [r1, #0]
 8009126:	6801      	ldr	r1, [r0, #0]
 8009128:	115e      	asrs	r6, r3, #5
 800912a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800912e:	f013 031f 	ands.w	r3, r3, #31
 8009132:	b087      	sub	sp, #28
 8009134:	bf18      	it	ne
 8009136:	3604      	addne	r6, #4
 8009138:	2500      	movs	r5, #0
 800913a:	1f37      	subs	r7, r6, #4
 800913c:	4682      	mov	sl, r0
 800913e:	4690      	mov	r8, r2
 8009140:	9301      	str	r3, [sp, #4]
 8009142:	f846 5c04 	str.w	r5, [r6, #-4]
 8009146:	46b9      	mov	r9, r7
 8009148:	463c      	mov	r4, r7
 800914a:	9502      	str	r5, [sp, #8]
 800914c:	46ab      	mov	fp, r5
 800914e:	784a      	ldrb	r2, [r1, #1]
 8009150:	1c4b      	adds	r3, r1, #1
 8009152:	9303      	str	r3, [sp, #12]
 8009154:	b342      	cbz	r2, 80091a8 <__hexnan+0x88>
 8009156:	4610      	mov	r0, r2
 8009158:	9105      	str	r1, [sp, #20]
 800915a:	9204      	str	r2, [sp, #16]
 800915c:	f7ff fd94 	bl	8008c88 <__hexdig_fun>
 8009160:	2800      	cmp	r0, #0
 8009162:	d151      	bne.n	8009208 <__hexnan+0xe8>
 8009164:	9a04      	ldr	r2, [sp, #16]
 8009166:	9905      	ldr	r1, [sp, #20]
 8009168:	2a20      	cmp	r2, #32
 800916a:	d818      	bhi.n	800919e <__hexnan+0x7e>
 800916c:	9b02      	ldr	r3, [sp, #8]
 800916e:	459b      	cmp	fp, r3
 8009170:	dd13      	ble.n	800919a <__hexnan+0x7a>
 8009172:	454c      	cmp	r4, r9
 8009174:	d206      	bcs.n	8009184 <__hexnan+0x64>
 8009176:	2d07      	cmp	r5, #7
 8009178:	dc04      	bgt.n	8009184 <__hexnan+0x64>
 800917a:	462a      	mov	r2, r5
 800917c:	4649      	mov	r1, r9
 800917e:	4620      	mov	r0, r4
 8009180:	f7ff ffa8 	bl	80090d4 <L_shift>
 8009184:	4544      	cmp	r4, r8
 8009186:	d952      	bls.n	800922e <__hexnan+0x10e>
 8009188:	2300      	movs	r3, #0
 800918a:	f1a4 0904 	sub.w	r9, r4, #4
 800918e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009192:	f8cd b008 	str.w	fp, [sp, #8]
 8009196:	464c      	mov	r4, r9
 8009198:	461d      	mov	r5, r3
 800919a:	9903      	ldr	r1, [sp, #12]
 800919c:	e7d7      	b.n	800914e <__hexnan+0x2e>
 800919e:	2a29      	cmp	r2, #41	@ 0x29
 80091a0:	d157      	bne.n	8009252 <__hexnan+0x132>
 80091a2:	3102      	adds	r1, #2
 80091a4:	f8ca 1000 	str.w	r1, [sl]
 80091a8:	f1bb 0f00 	cmp.w	fp, #0
 80091ac:	d051      	beq.n	8009252 <__hexnan+0x132>
 80091ae:	454c      	cmp	r4, r9
 80091b0:	d206      	bcs.n	80091c0 <__hexnan+0xa0>
 80091b2:	2d07      	cmp	r5, #7
 80091b4:	dc04      	bgt.n	80091c0 <__hexnan+0xa0>
 80091b6:	462a      	mov	r2, r5
 80091b8:	4649      	mov	r1, r9
 80091ba:	4620      	mov	r0, r4
 80091bc:	f7ff ff8a 	bl	80090d4 <L_shift>
 80091c0:	4544      	cmp	r4, r8
 80091c2:	d936      	bls.n	8009232 <__hexnan+0x112>
 80091c4:	f1a8 0204 	sub.w	r2, r8, #4
 80091c8:	4623      	mov	r3, r4
 80091ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80091ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80091d2:	429f      	cmp	r7, r3
 80091d4:	d2f9      	bcs.n	80091ca <__hexnan+0xaa>
 80091d6:	1b3b      	subs	r3, r7, r4
 80091d8:	f023 0303 	bic.w	r3, r3, #3
 80091dc:	3304      	adds	r3, #4
 80091de:	3401      	adds	r4, #1
 80091e0:	3e03      	subs	r6, #3
 80091e2:	42b4      	cmp	r4, r6
 80091e4:	bf88      	it	hi
 80091e6:	2304      	movhi	r3, #4
 80091e8:	4443      	add	r3, r8
 80091ea:	2200      	movs	r2, #0
 80091ec:	f843 2b04 	str.w	r2, [r3], #4
 80091f0:	429f      	cmp	r7, r3
 80091f2:	d2fb      	bcs.n	80091ec <__hexnan+0xcc>
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	b91b      	cbnz	r3, 8009200 <__hexnan+0xe0>
 80091f8:	4547      	cmp	r7, r8
 80091fa:	d128      	bne.n	800924e <__hexnan+0x12e>
 80091fc:	2301      	movs	r3, #1
 80091fe:	603b      	str	r3, [r7, #0]
 8009200:	2005      	movs	r0, #5
 8009202:	b007      	add	sp, #28
 8009204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009208:	3501      	adds	r5, #1
 800920a:	2d08      	cmp	r5, #8
 800920c:	f10b 0b01 	add.w	fp, fp, #1
 8009210:	dd06      	ble.n	8009220 <__hexnan+0x100>
 8009212:	4544      	cmp	r4, r8
 8009214:	d9c1      	bls.n	800919a <__hexnan+0x7a>
 8009216:	2300      	movs	r3, #0
 8009218:	f844 3c04 	str.w	r3, [r4, #-4]
 800921c:	2501      	movs	r5, #1
 800921e:	3c04      	subs	r4, #4
 8009220:	6822      	ldr	r2, [r4, #0]
 8009222:	f000 000f 	and.w	r0, r0, #15
 8009226:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800922a:	6020      	str	r0, [r4, #0]
 800922c:	e7b5      	b.n	800919a <__hexnan+0x7a>
 800922e:	2508      	movs	r5, #8
 8009230:	e7b3      	b.n	800919a <__hexnan+0x7a>
 8009232:	9b01      	ldr	r3, [sp, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0dd      	beq.n	80091f4 <__hexnan+0xd4>
 8009238:	f1c3 0320 	rsb	r3, r3, #32
 800923c:	f04f 32ff 	mov.w	r2, #4294967295
 8009240:	40da      	lsrs	r2, r3
 8009242:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009246:	4013      	ands	r3, r2
 8009248:	f846 3c04 	str.w	r3, [r6, #-4]
 800924c:	e7d2      	b.n	80091f4 <__hexnan+0xd4>
 800924e:	3f04      	subs	r7, #4
 8009250:	e7d0      	b.n	80091f4 <__hexnan+0xd4>
 8009252:	2004      	movs	r0, #4
 8009254:	e7d5      	b.n	8009202 <__hexnan+0xe2>
	...

08009258 <malloc>:
 8009258:	4b02      	ldr	r3, [pc, #8]	@ (8009264 <malloc+0xc>)
 800925a:	4601      	mov	r1, r0
 800925c:	6818      	ldr	r0, [r3, #0]
 800925e:	f000 b825 	b.w	80092ac <_malloc_r>
 8009262:	bf00      	nop
 8009264:	20000184 	.word	0x20000184

08009268 <sbrk_aligned>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	4e0f      	ldr	r6, [pc, #60]	@ (80092a8 <sbrk_aligned+0x40>)
 800926c:	460c      	mov	r4, r1
 800926e:	6831      	ldr	r1, [r6, #0]
 8009270:	4605      	mov	r5, r0
 8009272:	b911      	cbnz	r1, 800927a <sbrk_aligned+0x12>
 8009274:	f000 feba 	bl	8009fec <_sbrk_r>
 8009278:	6030      	str	r0, [r6, #0]
 800927a:	4621      	mov	r1, r4
 800927c:	4628      	mov	r0, r5
 800927e:	f000 feb5 	bl	8009fec <_sbrk_r>
 8009282:	1c43      	adds	r3, r0, #1
 8009284:	d103      	bne.n	800928e <sbrk_aligned+0x26>
 8009286:	f04f 34ff 	mov.w	r4, #4294967295
 800928a:	4620      	mov	r0, r4
 800928c:	bd70      	pop	{r4, r5, r6, pc}
 800928e:	1cc4      	adds	r4, r0, #3
 8009290:	f024 0403 	bic.w	r4, r4, #3
 8009294:	42a0      	cmp	r0, r4
 8009296:	d0f8      	beq.n	800928a <sbrk_aligned+0x22>
 8009298:	1a21      	subs	r1, r4, r0
 800929a:	4628      	mov	r0, r5
 800929c:	f000 fea6 	bl	8009fec <_sbrk_r>
 80092a0:	3001      	adds	r0, #1
 80092a2:	d1f2      	bne.n	800928a <sbrk_aligned+0x22>
 80092a4:	e7ef      	b.n	8009286 <sbrk_aligned+0x1e>
 80092a6:	bf00      	nop
 80092a8:	20000904 	.word	0x20000904

080092ac <_malloc_r>:
 80092ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b0:	1ccd      	adds	r5, r1, #3
 80092b2:	f025 0503 	bic.w	r5, r5, #3
 80092b6:	3508      	adds	r5, #8
 80092b8:	2d0c      	cmp	r5, #12
 80092ba:	bf38      	it	cc
 80092bc:	250c      	movcc	r5, #12
 80092be:	2d00      	cmp	r5, #0
 80092c0:	4606      	mov	r6, r0
 80092c2:	db01      	blt.n	80092c8 <_malloc_r+0x1c>
 80092c4:	42a9      	cmp	r1, r5
 80092c6:	d904      	bls.n	80092d2 <_malloc_r+0x26>
 80092c8:	230c      	movs	r3, #12
 80092ca:	6033      	str	r3, [r6, #0]
 80092cc:	2000      	movs	r0, #0
 80092ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093a8 <_malloc_r+0xfc>
 80092d6:	f000 f87b 	bl	80093d0 <__malloc_lock>
 80092da:	f8d8 3000 	ldr.w	r3, [r8]
 80092de:	461c      	mov	r4, r3
 80092e0:	bb44      	cbnz	r4, 8009334 <_malloc_r+0x88>
 80092e2:	4629      	mov	r1, r5
 80092e4:	4630      	mov	r0, r6
 80092e6:	f7ff ffbf 	bl	8009268 <sbrk_aligned>
 80092ea:	1c43      	adds	r3, r0, #1
 80092ec:	4604      	mov	r4, r0
 80092ee:	d158      	bne.n	80093a2 <_malloc_r+0xf6>
 80092f0:	f8d8 4000 	ldr.w	r4, [r8]
 80092f4:	4627      	mov	r7, r4
 80092f6:	2f00      	cmp	r7, #0
 80092f8:	d143      	bne.n	8009382 <_malloc_r+0xd6>
 80092fa:	2c00      	cmp	r4, #0
 80092fc:	d04b      	beq.n	8009396 <_malloc_r+0xea>
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	4639      	mov	r1, r7
 8009302:	4630      	mov	r0, r6
 8009304:	eb04 0903 	add.w	r9, r4, r3
 8009308:	f000 fe70 	bl	8009fec <_sbrk_r>
 800930c:	4581      	cmp	r9, r0
 800930e:	d142      	bne.n	8009396 <_malloc_r+0xea>
 8009310:	6821      	ldr	r1, [r4, #0]
 8009312:	1a6d      	subs	r5, r5, r1
 8009314:	4629      	mov	r1, r5
 8009316:	4630      	mov	r0, r6
 8009318:	f7ff ffa6 	bl	8009268 <sbrk_aligned>
 800931c:	3001      	adds	r0, #1
 800931e:	d03a      	beq.n	8009396 <_malloc_r+0xea>
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	442b      	add	r3, r5
 8009324:	6023      	str	r3, [r4, #0]
 8009326:	f8d8 3000 	ldr.w	r3, [r8]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	bb62      	cbnz	r2, 8009388 <_malloc_r+0xdc>
 800932e:	f8c8 7000 	str.w	r7, [r8]
 8009332:	e00f      	b.n	8009354 <_malloc_r+0xa8>
 8009334:	6822      	ldr	r2, [r4, #0]
 8009336:	1b52      	subs	r2, r2, r5
 8009338:	d420      	bmi.n	800937c <_malloc_r+0xd0>
 800933a:	2a0b      	cmp	r2, #11
 800933c:	d917      	bls.n	800936e <_malloc_r+0xc2>
 800933e:	1961      	adds	r1, r4, r5
 8009340:	42a3      	cmp	r3, r4
 8009342:	6025      	str	r5, [r4, #0]
 8009344:	bf18      	it	ne
 8009346:	6059      	strne	r1, [r3, #4]
 8009348:	6863      	ldr	r3, [r4, #4]
 800934a:	bf08      	it	eq
 800934c:	f8c8 1000 	streq.w	r1, [r8]
 8009350:	5162      	str	r2, [r4, r5]
 8009352:	604b      	str	r3, [r1, #4]
 8009354:	4630      	mov	r0, r6
 8009356:	f000 f841 	bl	80093dc <__malloc_unlock>
 800935a:	f104 000b 	add.w	r0, r4, #11
 800935e:	1d23      	adds	r3, r4, #4
 8009360:	f020 0007 	bic.w	r0, r0, #7
 8009364:	1ac2      	subs	r2, r0, r3
 8009366:	bf1c      	itt	ne
 8009368:	1a1b      	subne	r3, r3, r0
 800936a:	50a3      	strne	r3, [r4, r2]
 800936c:	e7af      	b.n	80092ce <_malloc_r+0x22>
 800936e:	6862      	ldr	r2, [r4, #4]
 8009370:	42a3      	cmp	r3, r4
 8009372:	bf0c      	ite	eq
 8009374:	f8c8 2000 	streq.w	r2, [r8]
 8009378:	605a      	strne	r2, [r3, #4]
 800937a:	e7eb      	b.n	8009354 <_malloc_r+0xa8>
 800937c:	4623      	mov	r3, r4
 800937e:	6864      	ldr	r4, [r4, #4]
 8009380:	e7ae      	b.n	80092e0 <_malloc_r+0x34>
 8009382:	463c      	mov	r4, r7
 8009384:	687f      	ldr	r7, [r7, #4]
 8009386:	e7b6      	b.n	80092f6 <_malloc_r+0x4a>
 8009388:	461a      	mov	r2, r3
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	42a3      	cmp	r3, r4
 800938e:	d1fb      	bne.n	8009388 <_malloc_r+0xdc>
 8009390:	2300      	movs	r3, #0
 8009392:	6053      	str	r3, [r2, #4]
 8009394:	e7de      	b.n	8009354 <_malloc_r+0xa8>
 8009396:	230c      	movs	r3, #12
 8009398:	6033      	str	r3, [r6, #0]
 800939a:	4630      	mov	r0, r6
 800939c:	f000 f81e 	bl	80093dc <__malloc_unlock>
 80093a0:	e794      	b.n	80092cc <_malloc_r+0x20>
 80093a2:	6005      	str	r5, [r0, #0]
 80093a4:	e7d6      	b.n	8009354 <_malloc_r+0xa8>
 80093a6:	bf00      	nop
 80093a8:	20000908 	.word	0x20000908

080093ac <__ascii_mbtowc>:
 80093ac:	b082      	sub	sp, #8
 80093ae:	b901      	cbnz	r1, 80093b2 <__ascii_mbtowc+0x6>
 80093b0:	a901      	add	r1, sp, #4
 80093b2:	b142      	cbz	r2, 80093c6 <__ascii_mbtowc+0x1a>
 80093b4:	b14b      	cbz	r3, 80093ca <__ascii_mbtowc+0x1e>
 80093b6:	7813      	ldrb	r3, [r2, #0]
 80093b8:	600b      	str	r3, [r1, #0]
 80093ba:	7812      	ldrb	r2, [r2, #0]
 80093bc:	1e10      	subs	r0, r2, #0
 80093be:	bf18      	it	ne
 80093c0:	2001      	movne	r0, #1
 80093c2:	b002      	add	sp, #8
 80093c4:	4770      	bx	lr
 80093c6:	4610      	mov	r0, r2
 80093c8:	e7fb      	b.n	80093c2 <__ascii_mbtowc+0x16>
 80093ca:	f06f 0001 	mvn.w	r0, #1
 80093ce:	e7f8      	b.n	80093c2 <__ascii_mbtowc+0x16>

080093d0 <__malloc_lock>:
 80093d0:	4801      	ldr	r0, [pc, #4]	@ (80093d8 <__malloc_lock+0x8>)
 80093d2:	f7fe bd2e 	b.w	8007e32 <__retarget_lock_acquire_recursive>
 80093d6:	bf00      	nop
 80093d8:	20000900 	.word	0x20000900

080093dc <__malloc_unlock>:
 80093dc:	4801      	ldr	r0, [pc, #4]	@ (80093e4 <__malloc_unlock+0x8>)
 80093de:	f7fe bd29 	b.w	8007e34 <__retarget_lock_release_recursive>
 80093e2:	bf00      	nop
 80093e4:	20000900 	.word	0x20000900

080093e8 <_Balloc>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	69c6      	ldr	r6, [r0, #28]
 80093ec:	4604      	mov	r4, r0
 80093ee:	460d      	mov	r5, r1
 80093f0:	b976      	cbnz	r6, 8009410 <_Balloc+0x28>
 80093f2:	2010      	movs	r0, #16
 80093f4:	f7ff ff30 	bl	8009258 <malloc>
 80093f8:	4602      	mov	r2, r0
 80093fa:	61e0      	str	r0, [r4, #28]
 80093fc:	b920      	cbnz	r0, 8009408 <_Balloc+0x20>
 80093fe:	4b18      	ldr	r3, [pc, #96]	@ (8009460 <_Balloc+0x78>)
 8009400:	4818      	ldr	r0, [pc, #96]	@ (8009464 <_Balloc+0x7c>)
 8009402:	216b      	movs	r1, #107	@ 0x6b
 8009404:	f7fe fd38 	bl	8007e78 <__assert_func>
 8009408:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800940c:	6006      	str	r6, [r0, #0]
 800940e:	60c6      	str	r6, [r0, #12]
 8009410:	69e6      	ldr	r6, [r4, #28]
 8009412:	68f3      	ldr	r3, [r6, #12]
 8009414:	b183      	cbz	r3, 8009438 <_Balloc+0x50>
 8009416:	69e3      	ldr	r3, [r4, #28]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800941e:	b9b8      	cbnz	r0, 8009450 <_Balloc+0x68>
 8009420:	2101      	movs	r1, #1
 8009422:	fa01 f605 	lsl.w	r6, r1, r5
 8009426:	1d72      	adds	r2, r6, #5
 8009428:	0092      	lsls	r2, r2, #2
 800942a:	4620      	mov	r0, r4
 800942c:	f000 fdf5 	bl	800a01a <_calloc_r>
 8009430:	b160      	cbz	r0, 800944c <_Balloc+0x64>
 8009432:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009436:	e00e      	b.n	8009456 <_Balloc+0x6e>
 8009438:	2221      	movs	r2, #33	@ 0x21
 800943a:	2104      	movs	r1, #4
 800943c:	4620      	mov	r0, r4
 800943e:	f000 fdec 	bl	800a01a <_calloc_r>
 8009442:	69e3      	ldr	r3, [r4, #28]
 8009444:	60f0      	str	r0, [r6, #12]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e4      	bne.n	8009416 <_Balloc+0x2e>
 800944c:	2000      	movs	r0, #0
 800944e:	bd70      	pop	{r4, r5, r6, pc}
 8009450:	6802      	ldr	r2, [r0, #0]
 8009452:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009456:	2300      	movs	r3, #0
 8009458:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800945c:	e7f7      	b.n	800944e <_Balloc+0x66>
 800945e:	bf00      	nop
 8009460:	0800a715 	.word	0x0800a715
 8009464:	0800a8a0 	.word	0x0800a8a0

08009468 <_Bfree>:
 8009468:	b570      	push	{r4, r5, r6, lr}
 800946a:	69c6      	ldr	r6, [r0, #28]
 800946c:	4605      	mov	r5, r0
 800946e:	460c      	mov	r4, r1
 8009470:	b976      	cbnz	r6, 8009490 <_Bfree+0x28>
 8009472:	2010      	movs	r0, #16
 8009474:	f7ff fef0 	bl	8009258 <malloc>
 8009478:	4602      	mov	r2, r0
 800947a:	61e8      	str	r0, [r5, #28]
 800947c:	b920      	cbnz	r0, 8009488 <_Bfree+0x20>
 800947e:	4b09      	ldr	r3, [pc, #36]	@ (80094a4 <_Bfree+0x3c>)
 8009480:	4809      	ldr	r0, [pc, #36]	@ (80094a8 <_Bfree+0x40>)
 8009482:	218f      	movs	r1, #143	@ 0x8f
 8009484:	f7fe fcf8 	bl	8007e78 <__assert_func>
 8009488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800948c:	6006      	str	r6, [r0, #0]
 800948e:	60c6      	str	r6, [r0, #12]
 8009490:	b13c      	cbz	r4, 80094a2 <_Bfree+0x3a>
 8009492:	69eb      	ldr	r3, [r5, #28]
 8009494:	6862      	ldr	r2, [r4, #4]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800949c:	6021      	str	r1, [r4, #0]
 800949e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
 80094a4:	0800a715 	.word	0x0800a715
 80094a8:	0800a8a0 	.word	0x0800a8a0

080094ac <__multadd>:
 80094ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b0:	690d      	ldr	r5, [r1, #16]
 80094b2:	4607      	mov	r7, r0
 80094b4:	460c      	mov	r4, r1
 80094b6:	461e      	mov	r6, r3
 80094b8:	f101 0c14 	add.w	ip, r1, #20
 80094bc:	2000      	movs	r0, #0
 80094be:	f8dc 3000 	ldr.w	r3, [ip]
 80094c2:	b299      	uxth	r1, r3
 80094c4:	fb02 6101 	mla	r1, r2, r1, r6
 80094c8:	0c1e      	lsrs	r6, r3, #16
 80094ca:	0c0b      	lsrs	r3, r1, #16
 80094cc:	fb02 3306 	mla	r3, r2, r6, r3
 80094d0:	b289      	uxth	r1, r1
 80094d2:	3001      	adds	r0, #1
 80094d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094d8:	4285      	cmp	r5, r0
 80094da:	f84c 1b04 	str.w	r1, [ip], #4
 80094de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094e2:	dcec      	bgt.n	80094be <__multadd+0x12>
 80094e4:	b30e      	cbz	r6, 800952a <__multadd+0x7e>
 80094e6:	68a3      	ldr	r3, [r4, #8]
 80094e8:	42ab      	cmp	r3, r5
 80094ea:	dc19      	bgt.n	8009520 <__multadd+0x74>
 80094ec:	6861      	ldr	r1, [r4, #4]
 80094ee:	4638      	mov	r0, r7
 80094f0:	3101      	adds	r1, #1
 80094f2:	f7ff ff79 	bl	80093e8 <_Balloc>
 80094f6:	4680      	mov	r8, r0
 80094f8:	b928      	cbnz	r0, 8009506 <__multadd+0x5a>
 80094fa:	4602      	mov	r2, r0
 80094fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009530 <__multadd+0x84>)
 80094fe:	480d      	ldr	r0, [pc, #52]	@ (8009534 <__multadd+0x88>)
 8009500:	21ba      	movs	r1, #186	@ 0xba
 8009502:	f7fe fcb9 	bl	8007e78 <__assert_func>
 8009506:	6922      	ldr	r2, [r4, #16]
 8009508:	3202      	adds	r2, #2
 800950a:	f104 010c 	add.w	r1, r4, #12
 800950e:	0092      	lsls	r2, r2, #2
 8009510:	300c      	adds	r0, #12
 8009512:	f7fe fc98 	bl	8007e46 <memcpy>
 8009516:	4621      	mov	r1, r4
 8009518:	4638      	mov	r0, r7
 800951a:	f7ff ffa5 	bl	8009468 <_Bfree>
 800951e:	4644      	mov	r4, r8
 8009520:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009524:	3501      	adds	r5, #1
 8009526:	615e      	str	r6, [r3, #20]
 8009528:	6125      	str	r5, [r4, #16]
 800952a:	4620      	mov	r0, r4
 800952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009530:	0800a82f 	.word	0x0800a82f
 8009534:	0800a8a0 	.word	0x0800a8a0

08009538 <__s2b>:
 8009538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800953c:	460c      	mov	r4, r1
 800953e:	4615      	mov	r5, r2
 8009540:	461f      	mov	r7, r3
 8009542:	2209      	movs	r2, #9
 8009544:	3308      	adds	r3, #8
 8009546:	4606      	mov	r6, r0
 8009548:	fb93 f3f2 	sdiv	r3, r3, r2
 800954c:	2100      	movs	r1, #0
 800954e:	2201      	movs	r2, #1
 8009550:	429a      	cmp	r2, r3
 8009552:	db09      	blt.n	8009568 <__s2b+0x30>
 8009554:	4630      	mov	r0, r6
 8009556:	f7ff ff47 	bl	80093e8 <_Balloc>
 800955a:	b940      	cbnz	r0, 800956e <__s2b+0x36>
 800955c:	4602      	mov	r2, r0
 800955e:	4b19      	ldr	r3, [pc, #100]	@ (80095c4 <__s2b+0x8c>)
 8009560:	4819      	ldr	r0, [pc, #100]	@ (80095c8 <__s2b+0x90>)
 8009562:	21d3      	movs	r1, #211	@ 0xd3
 8009564:	f7fe fc88 	bl	8007e78 <__assert_func>
 8009568:	0052      	lsls	r2, r2, #1
 800956a:	3101      	adds	r1, #1
 800956c:	e7f0      	b.n	8009550 <__s2b+0x18>
 800956e:	9b08      	ldr	r3, [sp, #32]
 8009570:	6143      	str	r3, [r0, #20]
 8009572:	2d09      	cmp	r5, #9
 8009574:	f04f 0301 	mov.w	r3, #1
 8009578:	6103      	str	r3, [r0, #16]
 800957a:	dd16      	ble.n	80095aa <__s2b+0x72>
 800957c:	f104 0909 	add.w	r9, r4, #9
 8009580:	46c8      	mov	r8, r9
 8009582:	442c      	add	r4, r5
 8009584:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009588:	4601      	mov	r1, r0
 800958a:	3b30      	subs	r3, #48	@ 0x30
 800958c:	220a      	movs	r2, #10
 800958e:	4630      	mov	r0, r6
 8009590:	f7ff ff8c 	bl	80094ac <__multadd>
 8009594:	45a0      	cmp	r8, r4
 8009596:	d1f5      	bne.n	8009584 <__s2b+0x4c>
 8009598:	f1a5 0408 	sub.w	r4, r5, #8
 800959c:	444c      	add	r4, r9
 800959e:	1b2d      	subs	r5, r5, r4
 80095a0:	1963      	adds	r3, r4, r5
 80095a2:	42bb      	cmp	r3, r7
 80095a4:	db04      	blt.n	80095b0 <__s2b+0x78>
 80095a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095aa:	340a      	adds	r4, #10
 80095ac:	2509      	movs	r5, #9
 80095ae:	e7f6      	b.n	800959e <__s2b+0x66>
 80095b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095b4:	4601      	mov	r1, r0
 80095b6:	3b30      	subs	r3, #48	@ 0x30
 80095b8:	220a      	movs	r2, #10
 80095ba:	4630      	mov	r0, r6
 80095bc:	f7ff ff76 	bl	80094ac <__multadd>
 80095c0:	e7ee      	b.n	80095a0 <__s2b+0x68>
 80095c2:	bf00      	nop
 80095c4:	0800a82f 	.word	0x0800a82f
 80095c8:	0800a8a0 	.word	0x0800a8a0

080095cc <__hi0bits>:
 80095cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80095d0:	4603      	mov	r3, r0
 80095d2:	bf36      	itet	cc
 80095d4:	0403      	lslcc	r3, r0, #16
 80095d6:	2000      	movcs	r0, #0
 80095d8:	2010      	movcc	r0, #16
 80095da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095de:	bf3c      	itt	cc
 80095e0:	021b      	lslcc	r3, r3, #8
 80095e2:	3008      	addcc	r0, #8
 80095e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095e8:	bf3c      	itt	cc
 80095ea:	011b      	lslcc	r3, r3, #4
 80095ec:	3004      	addcc	r0, #4
 80095ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f2:	bf3c      	itt	cc
 80095f4:	009b      	lslcc	r3, r3, #2
 80095f6:	3002      	addcc	r0, #2
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	db05      	blt.n	8009608 <__hi0bits+0x3c>
 80095fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009600:	f100 0001 	add.w	r0, r0, #1
 8009604:	bf08      	it	eq
 8009606:	2020      	moveq	r0, #32
 8009608:	4770      	bx	lr

0800960a <__lo0bits>:
 800960a:	6803      	ldr	r3, [r0, #0]
 800960c:	4602      	mov	r2, r0
 800960e:	f013 0007 	ands.w	r0, r3, #7
 8009612:	d00b      	beq.n	800962c <__lo0bits+0x22>
 8009614:	07d9      	lsls	r1, r3, #31
 8009616:	d421      	bmi.n	800965c <__lo0bits+0x52>
 8009618:	0798      	lsls	r0, r3, #30
 800961a:	bf49      	itett	mi
 800961c:	085b      	lsrmi	r3, r3, #1
 800961e:	089b      	lsrpl	r3, r3, #2
 8009620:	2001      	movmi	r0, #1
 8009622:	6013      	strmi	r3, [r2, #0]
 8009624:	bf5c      	itt	pl
 8009626:	6013      	strpl	r3, [r2, #0]
 8009628:	2002      	movpl	r0, #2
 800962a:	4770      	bx	lr
 800962c:	b299      	uxth	r1, r3
 800962e:	b909      	cbnz	r1, 8009634 <__lo0bits+0x2a>
 8009630:	0c1b      	lsrs	r3, r3, #16
 8009632:	2010      	movs	r0, #16
 8009634:	b2d9      	uxtb	r1, r3
 8009636:	b909      	cbnz	r1, 800963c <__lo0bits+0x32>
 8009638:	3008      	adds	r0, #8
 800963a:	0a1b      	lsrs	r3, r3, #8
 800963c:	0719      	lsls	r1, r3, #28
 800963e:	bf04      	itt	eq
 8009640:	091b      	lsreq	r3, r3, #4
 8009642:	3004      	addeq	r0, #4
 8009644:	0799      	lsls	r1, r3, #30
 8009646:	bf04      	itt	eq
 8009648:	089b      	lsreq	r3, r3, #2
 800964a:	3002      	addeq	r0, #2
 800964c:	07d9      	lsls	r1, r3, #31
 800964e:	d403      	bmi.n	8009658 <__lo0bits+0x4e>
 8009650:	085b      	lsrs	r3, r3, #1
 8009652:	f100 0001 	add.w	r0, r0, #1
 8009656:	d003      	beq.n	8009660 <__lo0bits+0x56>
 8009658:	6013      	str	r3, [r2, #0]
 800965a:	4770      	bx	lr
 800965c:	2000      	movs	r0, #0
 800965e:	4770      	bx	lr
 8009660:	2020      	movs	r0, #32
 8009662:	4770      	bx	lr

08009664 <__i2b>:
 8009664:	b510      	push	{r4, lr}
 8009666:	460c      	mov	r4, r1
 8009668:	2101      	movs	r1, #1
 800966a:	f7ff febd 	bl	80093e8 <_Balloc>
 800966e:	4602      	mov	r2, r0
 8009670:	b928      	cbnz	r0, 800967e <__i2b+0x1a>
 8009672:	4b05      	ldr	r3, [pc, #20]	@ (8009688 <__i2b+0x24>)
 8009674:	4805      	ldr	r0, [pc, #20]	@ (800968c <__i2b+0x28>)
 8009676:	f240 1145 	movw	r1, #325	@ 0x145
 800967a:	f7fe fbfd 	bl	8007e78 <__assert_func>
 800967e:	2301      	movs	r3, #1
 8009680:	6144      	str	r4, [r0, #20]
 8009682:	6103      	str	r3, [r0, #16]
 8009684:	bd10      	pop	{r4, pc}
 8009686:	bf00      	nop
 8009688:	0800a82f 	.word	0x0800a82f
 800968c:	0800a8a0 	.word	0x0800a8a0

08009690 <__multiply>:
 8009690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009694:	4614      	mov	r4, r2
 8009696:	690a      	ldr	r2, [r1, #16]
 8009698:	6923      	ldr	r3, [r4, #16]
 800969a:	429a      	cmp	r2, r3
 800969c:	bfa8      	it	ge
 800969e:	4623      	movge	r3, r4
 80096a0:	460f      	mov	r7, r1
 80096a2:	bfa4      	itt	ge
 80096a4:	460c      	movge	r4, r1
 80096a6:	461f      	movge	r7, r3
 80096a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80096ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80096b0:	68a3      	ldr	r3, [r4, #8]
 80096b2:	6861      	ldr	r1, [r4, #4]
 80096b4:	eb0a 0609 	add.w	r6, sl, r9
 80096b8:	42b3      	cmp	r3, r6
 80096ba:	b085      	sub	sp, #20
 80096bc:	bfb8      	it	lt
 80096be:	3101      	addlt	r1, #1
 80096c0:	f7ff fe92 	bl	80093e8 <_Balloc>
 80096c4:	b930      	cbnz	r0, 80096d4 <__multiply+0x44>
 80096c6:	4602      	mov	r2, r0
 80096c8:	4b44      	ldr	r3, [pc, #272]	@ (80097dc <__multiply+0x14c>)
 80096ca:	4845      	ldr	r0, [pc, #276]	@ (80097e0 <__multiply+0x150>)
 80096cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80096d0:	f7fe fbd2 	bl	8007e78 <__assert_func>
 80096d4:	f100 0514 	add.w	r5, r0, #20
 80096d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80096dc:	462b      	mov	r3, r5
 80096de:	2200      	movs	r2, #0
 80096e0:	4543      	cmp	r3, r8
 80096e2:	d321      	bcc.n	8009728 <__multiply+0x98>
 80096e4:	f107 0114 	add.w	r1, r7, #20
 80096e8:	f104 0214 	add.w	r2, r4, #20
 80096ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80096f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80096f4:	9302      	str	r3, [sp, #8]
 80096f6:	1b13      	subs	r3, r2, r4
 80096f8:	3b15      	subs	r3, #21
 80096fa:	f023 0303 	bic.w	r3, r3, #3
 80096fe:	3304      	adds	r3, #4
 8009700:	f104 0715 	add.w	r7, r4, #21
 8009704:	42ba      	cmp	r2, r7
 8009706:	bf38      	it	cc
 8009708:	2304      	movcc	r3, #4
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	9b02      	ldr	r3, [sp, #8]
 800970e:	9103      	str	r1, [sp, #12]
 8009710:	428b      	cmp	r3, r1
 8009712:	d80c      	bhi.n	800972e <__multiply+0x9e>
 8009714:	2e00      	cmp	r6, #0
 8009716:	dd03      	ble.n	8009720 <__multiply+0x90>
 8009718:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800971c:	2b00      	cmp	r3, #0
 800971e:	d05b      	beq.n	80097d8 <__multiply+0x148>
 8009720:	6106      	str	r6, [r0, #16]
 8009722:	b005      	add	sp, #20
 8009724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009728:	f843 2b04 	str.w	r2, [r3], #4
 800972c:	e7d8      	b.n	80096e0 <__multiply+0x50>
 800972e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009732:	f1ba 0f00 	cmp.w	sl, #0
 8009736:	d024      	beq.n	8009782 <__multiply+0xf2>
 8009738:	f104 0e14 	add.w	lr, r4, #20
 800973c:	46a9      	mov	r9, r5
 800973e:	f04f 0c00 	mov.w	ip, #0
 8009742:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009746:	f8d9 3000 	ldr.w	r3, [r9]
 800974a:	fa1f fb87 	uxth.w	fp, r7
 800974e:	b29b      	uxth	r3, r3
 8009750:	fb0a 330b 	mla	r3, sl, fp, r3
 8009754:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009758:	f8d9 7000 	ldr.w	r7, [r9]
 800975c:	4463      	add	r3, ip
 800975e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009762:	fb0a c70b 	mla	r7, sl, fp, ip
 8009766:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800976a:	b29b      	uxth	r3, r3
 800976c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009770:	4572      	cmp	r2, lr
 8009772:	f849 3b04 	str.w	r3, [r9], #4
 8009776:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800977a:	d8e2      	bhi.n	8009742 <__multiply+0xb2>
 800977c:	9b01      	ldr	r3, [sp, #4]
 800977e:	f845 c003 	str.w	ip, [r5, r3]
 8009782:	9b03      	ldr	r3, [sp, #12]
 8009784:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009788:	3104      	adds	r1, #4
 800978a:	f1b9 0f00 	cmp.w	r9, #0
 800978e:	d021      	beq.n	80097d4 <__multiply+0x144>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	f104 0c14 	add.w	ip, r4, #20
 8009796:	46ae      	mov	lr, r5
 8009798:	f04f 0a00 	mov.w	sl, #0
 800979c:	f8bc b000 	ldrh.w	fp, [ip]
 80097a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80097a4:	fb09 770b 	mla	r7, r9, fp, r7
 80097a8:	4457      	add	r7, sl
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80097b0:	f84e 3b04 	str.w	r3, [lr], #4
 80097b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097bc:	f8be 3000 	ldrh.w	r3, [lr]
 80097c0:	fb09 330a 	mla	r3, r9, sl, r3
 80097c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80097c8:	4562      	cmp	r2, ip
 80097ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097ce:	d8e5      	bhi.n	800979c <__multiply+0x10c>
 80097d0:	9f01      	ldr	r7, [sp, #4]
 80097d2:	51eb      	str	r3, [r5, r7]
 80097d4:	3504      	adds	r5, #4
 80097d6:	e799      	b.n	800970c <__multiply+0x7c>
 80097d8:	3e01      	subs	r6, #1
 80097da:	e79b      	b.n	8009714 <__multiply+0x84>
 80097dc:	0800a82f 	.word	0x0800a82f
 80097e0:	0800a8a0 	.word	0x0800a8a0

080097e4 <__pow5mult>:
 80097e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097e8:	4615      	mov	r5, r2
 80097ea:	f012 0203 	ands.w	r2, r2, #3
 80097ee:	4607      	mov	r7, r0
 80097f0:	460e      	mov	r6, r1
 80097f2:	d007      	beq.n	8009804 <__pow5mult+0x20>
 80097f4:	4c25      	ldr	r4, [pc, #148]	@ (800988c <__pow5mult+0xa8>)
 80097f6:	3a01      	subs	r2, #1
 80097f8:	2300      	movs	r3, #0
 80097fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097fe:	f7ff fe55 	bl	80094ac <__multadd>
 8009802:	4606      	mov	r6, r0
 8009804:	10ad      	asrs	r5, r5, #2
 8009806:	d03d      	beq.n	8009884 <__pow5mult+0xa0>
 8009808:	69fc      	ldr	r4, [r7, #28]
 800980a:	b97c      	cbnz	r4, 800982c <__pow5mult+0x48>
 800980c:	2010      	movs	r0, #16
 800980e:	f7ff fd23 	bl	8009258 <malloc>
 8009812:	4602      	mov	r2, r0
 8009814:	61f8      	str	r0, [r7, #28]
 8009816:	b928      	cbnz	r0, 8009824 <__pow5mult+0x40>
 8009818:	4b1d      	ldr	r3, [pc, #116]	@ (8009890 <__pow5mult+0xac>)
 800981a:	481e      	ldr	r0, [pc, #120]	@ (8009894 <__pow5mult+0xb0>)
 800981c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009820:	f7fe fb2a 	bl	8007e78 <__assert_func>
 8009824:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009828:	6004      	str	r4, [r0, #0]
 800982a:	60c4      	str	r4, [r0, #12]
 800982c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009830:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009834:	b94c      	cbnz	r4, 800984a <__pow5mult+0x66>
 8009836:	f240 2171 	movw	r1, #625	@ 0x271
 800983a:	4638      	mov	r0, r7
 800983c:	f7ff ff12 	bl	8009664 <__i2b>
 8009840:	2300      	movs	r3, #0
 8009842:	f8c8 0008 	str.w	r0, [r8, #8]
 8009846:	4604      	mov	r4, r0
 8009848:	6003      	str	r3, [r0, #0]
 800984a:	f04f 0900 	mov.w	r9, #0
 800984e:	07eb      	lsls	r3, r5, #31
 8009850:	d50a      	bpl.n	8009868 <__pow5mult+0x84>
 8009852:	4631      	mov	r1, r6
 8009854:	4622      	mov	r2, r4
 8009856:	4638      	mov	r0, r7
 8009858:	f7ff ff1a 	bl	8009690 <__multiply>
 800985c:	4631      	mov	r1, r6
 800985e:	4680      	mov	r8, r0
 8009860:	4638      	mov	r0, r7
 8009862:	f7ff fe01 	bl	8009468 <_Bfree>
 8009866:	4646      	mov	r6, r8
 8009868:	106d      	asrs	r5, r5, #1
 800986a:	d00b      	beq.n	8009884 <__pow5mult+0xa0>
 800986c:	6820      	ldr	r0, [r4, #0]
 800986e:	b938      	cbnz	r0, 8009880 <__pow5mult+0x9c>
 8009870:	4622      	mov	r2, r4
 8009872:	4621      	mov	r1, r4
 8009874:	4638      	mov	r0, r7
 8009876:	f7ff ff0b 	bl	8009690 <__multiply>
 800987a:	6020      	str	r0, [r4, #0]
 800987c:	f8c0 9000 	str.w	r9, [r0]
 8009880:	4604      	mov	r4, r0
 8009882:	e7e4      	b.n	800984e <__pow5mult+0x6a>
 8009884:	4630      	mov	r0, r6
 8009886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800988a:	bf00      	nop
 800988c:	0800a8fc 	.word	0x0800a8fc
 8009890:	0800a715 	.word	0x0800a715
 8009894:	0800a8a0 	.word	0x0800a8a0

08009898 <__lshift>:
 8009898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	460c      	mov	r4, r1
 800989e:	6849      	ldr	r1, [r1, #4]
 80098a0:	6923      	ldr	r3, [r4, #16]
 80098a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098a6:	68a3      	ldr	r3, [r4, #8]
 80098a8:	4607      	mov	r7, r0
 80098aa:	4691      	mov	r9, r2
 80098ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098b0:	f108 0601 	add.w	r6, r8, #1
 80098b4:	42b3      	cmp	r3, r6
 80098b6:	db0b      	blt.n	80098d0 <__lshift+0x38>
 80098b8:	4638      	mov	r0, r7
 80098ba:	f7ff fd95 	bl	80093e8 <_Balloc>
 80098be:	4605      	mov	r5, r0
 80098c0:	b948      	cbnz	r0, 80098d6 <__lshift+0x3e>
 80098c2:	4602      	mov	r2, r0
 80098c4:	4b28      	ldr	r3, [pc, #160]	@ (8009968 <__lshift+0xd0>)
 80098c6:	4829      	ldr	r0, [pc, #164]	@ (800996c <__lshift+0xd4>)
 80098c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80098cc:	f7fe fad4 	bl	8007e78 <__assert_func>
 80098d0:	3101      	adds	r1, #1
 80098d2:	005b      	lsls	r3, r3, #1
 80098d4:	e7ee      	b.n	80098b4 <__lshift+0x1c>
 80098d6:	2300      	movs	r3, #0
 80098d8:	f100 0114 	add.w	r1, r0, #20
 80098dc:	f100 0210 	add.w	r2, r0, #16
 80098e0:	4618      	mov	r0, r3
 80098e2:	4553      	cmp	r3, sl
 80098e4:	db33      	blt.n	800994e <__lshift+0xb6>
 80098e6:	6920      	ldr	r0, [r4, #16]
 80098e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098ec:	f104 0314 	add.w	r3, r4, #20
 80098f0:	f019 091f 	ands.w	r9, r9, #31
 80098f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80098fc:	d02b      	beq.n	8009956 <__lshift+0xbe>
 80098fe:	f1c9 0e20 	rsb	lr, r9, #32
 8009902:	468a      	mov	sl, r1
 8009904:	2200      	movs	r2, #0
 8009906:	6818      	ldr	r0, [r3, #0]
 8009908:	fa00 f009 	lsl.w	r0, r0, r9
 800990c:	4310      	orrs	r0, r2
 800990e:	f84a 0b04 	str.w	r0, [sl], #4
 8009912:	f853 2b04 	ldr.w	r2, [r3], #4
 8009916:	459c      	cmp	ip, r3
 8009918:	fa22 f20e 	lsr.w	r2, r2, lr
 800991c:	d8f3      	bhi.n	8009906 <__lshift+0x6e>
 800991e:	ebac 0304 	sub.w	r3, ip, r4
 8009922:	3b15      	subs	r3, #21
 8009924:	f023 0303 	bic.w	r3, r3, #3
 8009928:	3304      	adds	r3, #4
 800992a:	f104 0015 	add.w	r0, r4, #21
 800992e:	4584      	cmp	ip, r0
 8009930:	bf38      	it	cc
 8009932:	2304      	movcc	r3, #4
 8009934:	50ca      	str	r2, [r1, r3]
 8009936:	b10a      	cbz	r2, 800993c <__lshift+0xa4>
 8009938:	f108 0602 	add.w	r6, r8, #2
 800993c:	3e01      	subs	r6, #1
 800993e:	4638      	mov	r0, r7
 8009940:	612e      	str	r6, [r5, #16]
 8009942:	4621      	mov	r1, r4
 8009944:	f7ff fd90 	bl	8009468 <_Bfree>
 8009948:	4628      	mov	r0, r5
 800994a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800994e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009952:	3301      	adds	r3, #1
 8009954:	e7c5      	b.n	80098e2 <__lshift+0x4a>
 8009956:	3904      	subs	r1, #4
 8009958:	f853 2b04 	ldr.w	r2, [r3], #4
 800995c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009960:	459c      	cmp	ip, r3
 8009962:	d8f9      	bhi.n	8009958 <__lshift+0xc0>
 8009964:	e7ea      	b.n	800993c <__lshift+0xa4>
 8009966:	bf00      	nop
 8009968:	0800a82f 	.word	0x0800a82f
 800996c:	0800a8a0 	.word	0x0800a8a0

08009970 <__mcmp>:
 8009970:	690a      	ldr	r2, [r1, #16]
 8009972:	4603      	mov	r3, r0
 8009974:	6900      	ldr	r0, [r0, #16]
 8009976:	1a80      	subs	r0, r0, r2
 8009978:	b530      	push	{r4, r5, lr}
 800997a:	d10e      	bne.n	800999a <__mcmp+0x2a>
 800997c:	3314      	adds	r3, #20
 800997e:	3114      	adds	r1, #20
 8009980:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009984:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009988:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800998c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009990:	4295      	cmp	r5, r2
 8009992:	d003      	beq.n	800999c <__mcmp+0x2c>
 8009994:	d205      	bcs.n	80099a2 <__mcmp+0x32>
 8009996:	f04f 30ff 	mov.w	r0, #4294967295
 800999a:	bd30      	pop	{r4, r5, pc}
 800999c:	42a3      	cmp	r3, r4
 800999e:	d3f3      	bcc.n	8009988 <__mcmp+0x18>
 80099a0:	e7fb      	b.n	800999a <__mcmp+0x2a>
 80099a2:	2001      	movs	r0, #1
 80099a4:	e7f9      	b.n	800999a <__mcmp+0x2a>
	...

080099a8 <__mdiff>:
 80099a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	4689      	mov	r9, r1
 80099ae:	4606      	mov	r6, r0
 80099b0:	4611      	mov	r1, r2
 80099b2:	4648      	mov	r0, r9
 80099b4:	4614      	mov	r4, r2
 80099b6:	f7ff ffdb 	bl	8009970 <__mcmp>
 80099ba:	1e05      	subs	r5, r0, #0
 80099bc:	d112      	bne.n	80099e4 <__mdiff+0x3c>
 80099be:	4629      	mov	r1, r5
 80099c0:	4630      	mov	r0, r6
 80099c2:	f7ff fd11 	bl	80093e8 <_Balloc>
 80099c6:	4602      	mov	r2, r0
 80099c8:	b928      	cbnz	r0, 80099d6 <__mdiff+0x2e>
 80099ca:	4b3f      	ldr	r3, [pc, #252]	@ (8009ac8 <__mdiff+0x120>)
 80099cc:	f240 2137 	movw	r1, #567	@ 0x237
 80099d0:	483e      	ldr	r0, [pc, #248]	@ (8009acc <__mdiff+0x124>)
 80099d2:	f7fe fa51 	bl	8007e78 <__assert_func>
 80099d6:	2301      	movs	r3, #1
 80099d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099dc:	4610      	mov	r0, r2
 80099de:	b003      	add	sp, #12
 80099e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e4:	bfbc      	itt	lt
 80099e6:	464b      	movlt	r3, r9
 80099e8:	46a1      	movlt	r9, r4
 80099ea:	4630      	mov	r0, r6
 80099ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80099f0:	bfba      	itte	lt
 80099f2:	461c      	movlt	r4, r3
 80099f4:	2501      	movlt	r5, #1
 80099f6:	2500      	movge	r5, #0
 80099f8:	f7ff fcf6 	bl	80093e8 <_Balloc>
 80099fc:	4602      	mov	r2, r0
 80099fe:	b918      	cbnz	r0, 8009a08 <__mdiff+0x60>
 8009a00:	4b31      	ldr	r3, [pc, #196]	@ (8009ac8 <__mdiff+0x120>)
 8009a02:	f240 2145 	movw	r1, #581	@ 0x245
 8009a06:	e7e3      	b.n	80099d0 <__mdiff+0x28>
 8009a08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009a0c:	6926      	ldr	r6, [r4, #16]
 8009a0e:	60c5      	str	r5, [r0, #12]
 8009a10:	f109 0310 	add.w	r3, r9, #16
 8009a14:	f109 0514 	add.w	r5, r9, #20
 8009a18:	f104 0e14 	add.w	lr, r4, #20
 8009a1c:	f100 0b14 	add.w	fp, r0, #20
 8009a20:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a24:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a28:	9301      	str	r3, [sp, #4]
 8009a2a:	46d9      	mov	r9, fp
 8009a2c:	f04f 0c00 	mov.w	ip, #0
 8009a30:	9b01      	ldr	r3, [sp, #4]
 8009a32:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009a36:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009a3a:	9301      	str	r3, [sp, #4]
 8009a3c:	fa1f f38a 	uxth.w	r3, sl
 8009a40:	4619      	mov	r1, r3
 8009a42:	b283      	uxth	r3, r0
 8009a44:	1acb      	subs	r3, r1, r3
 8009a46:	0c00      	lsrs	r0, r0, #16
 8009a48:	4463      	add	r3, ip
 8009a4a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009a4e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009a58:	4576      	cmp	r6, lr
 8009a5a:	f849 3b04 	str.w	r3, [r9], #4
 8009a5e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a62:	d8e5      	bhi.n	8009a30 <__mdiff+0x88>
 8009a64:	1b33      	subs	r3, r6, r4
 8009a66:	3b15      	subs	r3, #21
 8009a68:	f023 0303 	bic.w	r3, r3, #3
 8009a6c:	3415      	adds	r4, #21
 8009a6e:	3304      	adds	r3, #4
 8009a70:	42a6      	cmp	r6, r4
 8009a72:	bf38      	it	cc
 8009a74:	2304      	movcc	r3, #4
 8009a76:	441d      	add	r5, r3
 8009a78:	445b      	add	r3, fp
 8009a7a:	461e      	mov	r6, r3
 8009a7c:	462c      	mov	r4, r5
 8009a7e:	4544      	cmp	r4, r8
 8009a80:	d30e      	bcc.n	8009aa0 <__mdiff+0xf8>
 8009a82:	f108 0103 	add.w	r1, r8, #3
 8009a86:	1b49      	subs	r1, r1, r5
 8009a88:	f021 0103 	bic.w	r1, r1, #3
 8009a8c:	3d03      	subs	r5, #3
 8009a8e:	45a8      	cmp	r8, r5
 8009a90:	bf38      	it	cc
 8009a92:	2100      	movcc	r1, #0
 8009a94:	440b      	add	r3, r1
 8009a96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a9a:	b191      	cbz	r1, 8009ac2 <__mdiff+0x11a>
 8009a9c:	6117      	str	r7, [r2, #16]
 8009a9e:	e79d      	b.n	80099dc <__mdiff+0x34>
 8009aa0:	f854 1b04 	ldr.w	r1, [r4], #4
 8009aa4:	46e6      	mov	lr, ip
 8009aa6:	0c08      	lsrs	r0, r1, #16
 8009aa8:	fa1c fc81 	uxtah	ip, ip, r1
 8009aac:	4471      	add	r1, lr
 8009aae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ab2:	b289      	uxth	r1, r1
 8009ab4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ab8:	f846 1b04 	str.w	r1, [r6], #4
 8009abc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ac0:	e7dd      	b.n	8009a7e <__mdiff+0xd6>
 8009ac2:	3f01      	subs	r7, #1
 8009ac4:	e7e7      	b.n	8009a96 <__mdiff+0xee>
 8009ac6:	bf00      	nop
 8009ac8:	0800a82f 	.word	0x0800a82f
 8009acc:	0800a8a0 	.word	0x0800a8a0

08009ad0 <__ulp>:
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	ed8d 0b00 	vstr	d0, [sp]
 8009ad6:	9a01      	ldr	r2, [sp, #4]
 8009ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8009b18 <__ulp+0x48>)
 8009ada:	4013      	ands	r3, r2
 8009adc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	dc08      	bgt.n	8009af6 <__ulp+0x26>
 8009ae4:	425b      	negs	r3, r3
 8009ae6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009aea:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009aee:	da04      	bge.n	8009afa <__ulp+0x2a>
 8009af0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009af4:	4113      	asrs	r3, r2
 8009af6:	2200      	movs	r2, #0
 8009af8:	e008      	b.n	8009b0c <__ulp+0x3c>
 8009afa:	f1a2 0314 	sub.w	r3, r2, #20
 8009afe:	2b1e      	cmp	r3, #30
 8009b00:	bfda      	itte	le
 8009b02:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009b06:	40da      	lsrle	r2, r3
 8009b08:	2201      	movgt	r2, #1
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4610      	mov	r0, r2
 8009b10:	ec41 0b10 	vmov	d0, r0, r1
 8009b14:	b002      	add	sp, #8
 8009b16:	4770      	bx	lr
 8009b18:	7ff00000 	.word	0x7ff00000

08009b1c <__b2d>:
 8009b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b20:	6906      	ldr	r6, [r0, #16]
 8009b22:	f100 0814 	add.w	r8, r0, #20
 8009b26:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009b2a:	1f37      	subs	r7, r6, #4
 8009b2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b30:	4610      	mov	r0, r2
 8009b32:	f7ff fd4b 	bl	80095cc <__hi0bits>
 8009b36:	f1c0 0320 	rsb	r3, r0, #32
 8009b3a:	280a      	cmp	r0, #10
 8009b3c:	600b      	str	r3, [r1, #0]
 8009b3e:	491b      	ldr	r1, [pc, #108]	@ (8009bac <__b2d+0x90>)
 8009b40:	dc15      	bgt.n	8009b6e <__b2d+0x52>
 8009b42:	f1c0 0c0b 	rsb	ip, r0, #11
 8009b46:	fa22 f30c 	lsr.w	r3, r2, ip
 8009b4a:	45b8      	cmp	r8, r7
 8009b4c:	ea43 0501 	orr.w	r5, r3, r1
 8009b50:	bf34      	ite	cc
 8009b52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b56:	2300      	movcs	r3, #0
 8009b58:	3015      	adds	r0, #21
 8009b5a:	fa02 f000 	lsl.w	r0, r2, r0
 8009b5e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009b62:	4303      	orrs	r3, r0
 8009b64:	461c      	mov	r4, r3
 8009b66:	ec45 4b10 	vmov	d0, r4, r5
 8009b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b6e:	45b8      	cmp	r8, r7
 8009b70:	bf3a      	itte	cc
 8009b72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b76:	f1a6 0708 	subcc.w	r7, r6, #8
 8009b7a:	2300      	movcs	r3, #0
 8009b7c:	380b      	subs	r0, #11
 8009b7e:	d012      	beq.n	8009ba6 <__b2d+0x8a>
 8009b80:	f1c0 0120 	rsb	r1, r0, #32
 8009b84:	fa23 f401 	lsr.w	r4, r3, r1
 8009b88:	4082      	lsls	r2, r0
 8009b8a:	4322      	orrs	r2, r4
 8009b8c:	4547      	cmp	r7, r8
 8009b8e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009b92:	bf8c      	ite	hi
 8009b94:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009b98:	2200      	movls	r2, #0
 8009b9a:	4083      	lsls	r3, r0
 8009b9c:	40ca      	lsrs	r2, r1
 8009b9e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	e7de      	b.n	8009b64 <__b2d+0x48>
 8009ba6:	ea42 0501 	orr.w	r5, r2, r1
 8009baa:	e7db      	b.n	8009b64 <__b2d+0x48>
 8009bac:	3ff00000 	.word	0x3ff00000

08009bb0 <__d2b>:
 8009bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bb4:	460f      	mov	r7, r1
 8009bb6:	2101      	movs	r1, #1
 8009bb8:	ec59 8b10 	vmov	r8, r9, d0
 8009bbc:	4616      	mov	r6, r2
 8009bbe:	f7ff fc13 	bl	80093e8 <_Balloc>
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	b930      	cbnz	r0, 8009bd4 <__d2b+0x24>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	4b23      	ldr	r3, [pc, #140]	@ (8009c58 <__d2b+0xa8>)
 8009bca:	4824      	ldr	r0, [pc, #144]	@ (8009c5c <__d2b+0xac>)
 8009bcc:	f240 310f 	movw	r1, #783	@ 0x30f
 8009bd0:	f7fe f952 	bl	8007e78 <__assert_func>
 8009bd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bdc:	b10d      	cbz	r5, 8009be2 <__d2b+0x32>
 8009bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009be2:	9301      	str	r3, [sp, #4]
 8009be4:	f1b8 0300 	subs.w	r3, r8, #0
 8009be8:	d023      	beq.n	8009c32 <__d2b+0x82>
 8009bea:	4668      	mov	r0, sp
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	f7ff fd0c 	bl	800960a <__lo0bits>
 8009bf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009bf6:	b1d0      	cbz	r0, 8009c2e <__d2b+0x7e>
 8009bf8:	f1c0 0320 	rsb	r3, r0, #32
 8009bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8009c00:	430b      	orrs	r3, r1
 8009c02:	40c2      	lsrs	r2, r0
 8009c04:	6163      	str	r3, [r4, #20]
 8009c06:	9201      	str	r2, [sp, #4]
 8009c08:	9b01      	ldr	r3, [sp, #4]
 8009c0a:	61a3      	str	r3, [r4, #24]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	bf0c      	ite	eq
 8009c10:	2201      	moveq	r2, #1
 8009c12:	2202      	movne	r2, #2
 8009c14:	6122      	str	r2, [r4, #16]
 8009c16:	b1a5      	cbz	r5, 8009c42 <__d2b+0x92>
 8009c18:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c1c:	4405      	add	r5, r0
 8009c1e:	603d      	str	r5, [r7, #0]
 8009c20:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c24:	6030      	str	r0, [r6, #0]
 8009c26:	4620      	mov	r0, r4
 8009c28:	b003      	add	sp, #12
 8009c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c2e:	6161      	str	r1, [r4, #20]
 8009c30:	e7ea      	b.n	8009c08 <__d2b+0x58>
 8009c32:	a801      	add	r0, sp, #4
 8009c34:	f7ff fce9 	bl	800960a <__lo0bits>
 8009c38:	9b01      	ldr	r3, [sp, #4]
 8009c3a:	6163      	str	r3, [r4, #20]
 8009c3c:	3020      	adds	r0, #32
 8009c3e:	2201      	movs	r2, #1
 8009c40:	e7e8      	b.n	8009c14 <__d2b+0x64>
 8009c42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009c4a:	6038      	str	r0, [r7, #0]
 8009c4c:	6918      	ldr	r0, [r3, #16]
 8009c4e:	f7ff fcbd 	bl	80095cc <__hi0bits>
 8009c52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c56:	e7e5      	b.n	8009c24 <__d2b+0x74>
 8009c58:	0800a82f 	.word	0x0800a82f
 8009c5c:	0800a8a0 	.word	0x0800a8a0

08009c60 <__ratio>:
 8009c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c64:	b085      	sub	sp, #20
 8009c66:	e9cd 1000 	strd	r1, r0, [sp]
 8009c6a:	a902      	add	r1, sp, #8
 8009c6c:	f7ff ff56 	bl	8009b1c <__b2d>
 8009c70:	9800      	ldr	r0, [sp, #0]
 8009c72:	a903      	add	r1, sp, #12
 8009c74:	ec55 4b10 	vmov	r4, r5, d0
 8009c78:	f7ff ff50 	bl	8009b1c <__b2d>
 8009c7c:	9b01      	ldr	r3, [sp, #4]
 8009c7e:	6919      	ldr	r1, [r3, #16]
 8009c80:	9b00      	ldr	r3, [sp, #0]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	1ac9      	subs	r1, r1, r3
 8009c86:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009c8a:	1a9b      	subs	r3, r3, r2
 8009c8c:	ec5b ab10 	vmov	sl, fp, d0
 8009c90:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	bfce      	itee	gt
 8009c98:	462a      	movgt	r2, r5
 8009c9a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c9e:	465a      	movle	r2, fp
 8009ca0:	462f      	mov	r7, r5
 8009ca2:	46d9      	mov	r9, fp
 8009ca4:	bfcc      	ite	gt
 8009ca6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009caa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009cae:	464b      	mov	r3, r9
 8009cb0:	4652      	mov	r2, sl
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	4639      	mov	r1, r7
 8009cb6:	f7f6 fdd9 	bl	800086c <__aeabi_ddiv>
 8009cba:	ec41 0b10 	vmov	d0, r0, r1
 8009cbe:	b005      	add	sp, #20
 8009cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009cc4 <__copybits>:
 8009cc4:	3901      	subs	r1, #1
 8009cc6:	b570      	push	{r4, r5, r6, lr}
 8009cc8:	1149      	asrs	r1, r1, #5
 8009cca:	6914      	ldr	r4, [r2, #16]
 8009ccc:	3101      	adds	r1, #1
 8009cce:	f102 0314 	add.w	r3, r2, #20
 8009cd2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009cd6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009cda:	1f05      	subs	r5, r0, #4
 8009cdc:	42a3      	cmp	r3, r4
 8009cde:	d30c      	bcc.n	8009cfa <__copybits+0x36>
 8009ce0:	1aa3      	subs	r3, r4, r2
 8009ce2:	3b11      	subs	r3, #17
 8009ce4:	f023 0303 	bic.w	r3, r3, #3
 8009ce8:	3211      	adds	r2, #17
 8009cea:	42a2      	cmp	r2, r4
 8009cec:	bf88      	it	hi
 8009cee:	2300      	movhi	r3, #0
 8009cf0:	4418      	add	r0, r3
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	4288      	cmp	r0, r1
 8009cf6:	d305      	bcc.n	8009d04 <__copybits+0x40>
 8009cf8:	bd70      	pop	{r4, r5, r6, pc}
 8009cfa:	f853 6b04 	ldr.w	r6, [r3], #4
 8009cfe:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d02:	e7eb      	b.n	8009cdc <__copybits+0x18>
 8009d04:	f840 3b04 	str.w	r3, [r0], #4
 8009d08:	e7f4      	b.n	8009cf4 <__copybits+0x30>

08009d0a <__any_on>:
 8009d0a:	f100 0214 	add.w	r2, r0, #20
 8009d0e:	6900      	ldr	r0, [r0, #16]
 8009d10:	114b      	asrs	r3, r1, #5
 8009d12:	4298      	cmp	r0, r3
 8009d14:	b510      	push	{r4, lr}
 8009d16:	db11      	blt.n	8009d3c <__any_on+0x32>
 8009d18:	dd0a      	ble.n	8009d30 <__any_on+0x26>
 8009d1a:	f011 011f 	ands.w	r1, r1, #31
 8009d1e:	d007      	beq.n	8009d30 <__any_on+0x26>
 8009d20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d24:	fa24 f001 	lsr.w	r0, r4, r1
 8009d28:	fa00 f101 	lsl.w	r1, r0, r1
 8009d2c:	428c      	cmp	r4, r1
 8009d2e:	d10b      	bne.n	8009d48 <__any_on+0x3e>
 8009d30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d803      	bhi.n	8009d40 <__any_on+0x36>
 8009d38:	2000      	movs	r0, #0
 8009d3a:	bd10      	pop	{r4, pc}
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	e7f7      	b.n	8009d30 <__any_on+0x26>
 8009d40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d44:	2900      	cmp	r1, #0
 8009d46:	d0f5      	beq.n	8009d34 <__any_on+0x2a>
 8009d48:	2001      	movs	r0, #1
 8009d4a:	e7f6      	b.n	8009d3a <__any_on+0x30>

08009d4c <__ascii_wctomb>:
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	4608      	mov	r0, r1
 8009d50:	b141      	cbz	r1, 8009d64 <__ascii_wctomb+0x18>
 8009d52:	2aff      	cmp	r2, #255	@ 0xff
 8009d54:	d904      	bls.n	8009d60 <__ascii_wctomb+0x14>
 8009d56:	228a      	movs	r2, #138	@ 0x8a
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5e:	4770      	bx	lr
 8009d60:	700a      	strb	r2, [r1, #0]
 8009d62:	2001      	movs	r0, #1
 8009d64:	4770      	bx	lr
	...

08009d68 <__sflush_r>:
 8009d68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d70:	0716      	lsls	r6, r2, #28
 8009d72:	4605      	mov	r5, r0
 8009d74:	460c      	mov	r4, r1
 8009d76:	d454      	bmi.n	8009e22 <__sflush_r+0xba>
 8009d78:	684b      	ldr	r3, [r1, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	dc02      	bgt.n	8009d84 <__sflush_r+0x1c>
 8009d7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	dd48      	ble.n	8009e16 <__sflush_r+0xae>
 8009d84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d86:	2e00      	cmp	r6, #0
 8009d88:	d045      	beq.n	8009e16 <__sflush_r+0xae>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d90:	682f      	ldr	r7, [r5, #0]
 8009d92:	6a21      	ldr	r1, [r4, #32]
 8009d94:	602b      	str	r3, [r5, #0]
 8009d96:	d030      	beq.n	8009dfa <__sflush_r+0x92>
 8009d98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	0759      	lsls	r1, r3, #29
 8009d9e:	d505      	bpl.n	8009dac <__sflush_r+0x44>
 8009da0:	6863      	ldr	r3, [r4, #4]
 8009da2:	1ad2      	subs	r2, r2, r3
 8009da4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009da6:	b10b      	cbz	r3, 8009dac <__sflush_r+0x44>
 8009da8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009daa:	1ad2      	subs	r2, r2, r3
 8009dac:	2300      	movs	r3, #0
 8009dae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009db0:	6a21      	ldr	r1, [r4, #32]
 8009db2:	4628      	mov	r0, r5
 8009db4:	47b0      	blx	r6
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	d106      	bne.n	8009dca <__sflush_r+0x62>
 8009dbc:	6829      	ldr	r1, [r5, #0]
 8009dbe:	291d      	cmp	r1, #29
 8009dc0:	d82b      	bhi.n	8009e1a <__sflush_r+0xb2>
 8009dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8009e6c <__sflush_r+0x104>)
 8009dc4:	410a      	asrs	r2, r1
 8009dc6:	07d6      	lsls	r6, r2, #31
 8009dc8:	d427      	bmi.n	8009e1a <__sflush_r+0xb2>
 8009dca:	2200      	movs	r2, #0
 8009dcc:	6062      	str	r2, [r4, #4]
 8009dce:	04d9      	lsls	r1, r3, #19
 8009dd0:	6922      	ldr	r2, [r4, #16]
 8009dd2:	6022      	str	r2, [r4, #0]
 8009dd4:	d504      	bpl.n	8009de0 <__sflush_r+0x78>
 8009dd6:	1c42      	adds	r2, r0, #1
 8009dd8:	d101      	bne.n	8009dde <__sflush_r+0x76>
 8009dda:	682b      	ldr	r3, [r5, #0]
 8009ddc:	b903      	cbnz	r3, 8009de0 <__sflush_r+0x78>
 8009dde:	6560      	str	r0, [r4, #84]	@ 0x54
 8009de0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009de2:	602f      	str	r7, [r5, #0]
 8009de4:	b1b9      	cbz	r1, 8009e16 <__sflush_r+0xae>
 8009de6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dea:	4299      	cmp	r1, r3
 8009dec:	d002      	beq.n	8009df4 <__sflush_r+0x8c>
 8009dee:	4628      	mov	r0, r5
 8009df0:	f7fe feae 	bl	8008b50 <_free_r>
 8009df4:	2300      	movs	r3, #0
 8009df6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009df8:	e00d      	b.n	8009e16 <__sflush_r+0xae>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	47b0      	blx	r6
 8009e00:	4602      	mov	r2, r0
 8009e02:	1c50      	adds	r0, r2, #1
 8009e04:	d1c9      	bne.n	8009d9a <__sflush_r+0x32>
 8009e06:	682b      	ldr	r3, [r5, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d0c6      	beq.n	8009d9a <__sflush_r+0x32>
 8009e0c:	2b1d      	cmp	r3, #29
 8009e0e:	d001      	beq.n	8009e14 <__sflush_r+0xac>
 8009e10:	2b16      	cmp	r3, #22
 8009e12:	d11e      	bne.n	8009e52 <__sflush_r+0xea>
 8009e14:	602f      	str	r7, [r5, #0]
 8009e16:	2000      	movs	r0, #0
 8009e18:	e022      	b.n	8009e60 <__sflush_r+0xf8>
 8009e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e1e:	b21b      	sxth	r3, r3
 8009e20:	e01b      	b.n	8009e5a <__sflush_r+0xf2>
 8009e22:	690f      	ldr	r7, [r1, #16]
 8009e24:	2f00      	cmp	r7, #0
 8009e26:	d0f6      	beq.n	8009e16 <__sflush_r+0xae>
 8009e28:	0793      	lsls	r3, r2, #30
 8009e2a:	680e      	ldr	r6, [r1, #0]
 8009e2c:	bf08      	it	eq
 8009e2e:	694b      	ldreq	r3, [r1, #20]
 8009e30:	600f      	str	r7, [r1, #0]
 8009e32:	bf18      	it	ne
 8009e34:	2300      	movne	r3, #0
 8009e36:	eba6 0807 	sub.w	r8, r6, r7
 8009e3a:	608b      	str	r3, [r1, #8]
 8009e3c:	f1b8 0f00 	cmp.w	r8, #0
 8009e40:	dde9      	ble.n	8009e16 <__sflush_r+0xae>
 8009e42:	6a21      	ldr	r1, [r4, #32]
 8009e44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009e46:	4643      	mov	r3, r8
 8009e48:	463a      	mov	r2, r7
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	47b0      	blx	r6
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	dc08      	bgt.n	8009e64 <__sflush_r+0xfc>
 8009e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e5a:	81a3      	strh	r3, [r4, #12]
 8009e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e64:	4407      	add	r7, r0
 8009e66:	eba8 0800 	sub.w	r8, r8, r0
 8009e6a:	e7e7      	b.n	8009e3c <__sflush_r+0xd4>
 8009e6c:	dfbffffe 	.word	0xdfbffffe

08009e70 <_fflush_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	690b      	ldr	r3, [r1, #16]
 8009e74:	4605      	mov	r5, r0
 8009e76:	460c      	mov	r4, r1
 8009e78:	b913      	cbnz	r3, 8009e80 <_fflush_r+0x10>
 8009e7a:	2500      	movs	r5, #0
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	b118      	cbz	r0, 8009e8a <_fflush_r+0x1a>
 8009e82:	6a03      	ldr	r3, [r0, #32]
 8009e84:	b90b      	cbnz	r3, 8009e8a <_fflush_r+0x1a>
 8009e86:	f7fd fd6f 	bl	8007968 <__sinit>
 8009e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0f3      	beq.n	8009e7a <_fflush_r+0xa>
 8009e92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e94:	07d0      	lsls	r0, r2, #31
 8009e96:	d404      	bmi.n	8009ea2 <_fflush_r+0x32>
 8009e98:	0599      	lsls	r1, r3, #22
 8009e9a:	d402      	bmi.n	8009ea2 <_fflush_r+0x32>
 8009e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e9e:	f7fd ffc8 	bl	8007e32 <__retarget_lock_acquire_recursive>
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	f7ff ff5f 	bl	8009d68 <__sflush_r>
 8009eaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009eac:	07da      	lsls	r2, r3, #31
 8009eae:	4605      	mov	r5, r0
 8009eb0:	d4e4      	bmi.n	8009e7c <_fflush_r+0xc>
 8009eb2:	89a3      	ldrh	r3, [r4, #12]
 8009eb4:	059b      	lsls	r3, r3, #22
 8009eb6:	d4e1      	bmi.n	8009e7c <_fflush_r+0xc>
 8009eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009eba:	f7fd ffbb 	bl	8007e34 <__retarget_lock_release_recursive>
 8009ebe:	e7dd      	b.n	8009e7c <_fflush_r+0xc>

08009ec0 <fiprintf>:
 8009ec0:	b40e      	push	{r1, r2, r3}
 8009ec2:	b503      	push	{r0, r1, lr}
 8009ec4:	4601      	mov	r1, r0
 8009ec6:	ab03      	add	r3, sp, #12
 8009ec8:	4805      	ldr	r0, [pc, #20]	@ (8009ee0 <fiprintf+0x20>)
 8009eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ece:	6800      	ldr	r0, [r0, #0]
 8009ed0:	9301      	str	r3, [sp, #4]
 8009ed2:	f000 f8df 	bl	800a094 <_vfiprintf_r>
 8009ed6:	b002      	add	sp, #8
 8009ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009edc:	b003      	add	sp, #12
 8009ede:	4770      	bx	lr
 8009ee0:	20000184 	.word	0x20000184

08009ee4 <__swhatbuf_r>:
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eec:	2900      	cmp	r1, #0
 8009eee:	b096      	sub	sp, #88	@ 0x58
 8009ef0:	4615      	mov	r5, r2
 8009ef2:	461e      	mov	r6, r3
 8009ef4:	da0d      	bge.n	8009f12 <__swhatbuf_r+0x2e>
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009efc:	f04f 0100 	mov.w	r1, #0
 8009f00:	bf14      	ite	ne
 8009f02:	2340      	movne	r3, #64	@ 0x40
 8009f04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f08:	2000      	movs	r0, #0
 8009f0a:	6031      	str	r1, [r6, #0]
 8009f0c:	602b      	str	r3, [r5, #0]
 8009f0e:	b016      	add	sp, #88	@ 0x58
 8009f10:	bd70      	pop	{r4, r5, r6, pc}
 8009f12:	466a      	mov	r2, sp
 8009f14:	f000 f848 	bl	8009fa8 <_fstat_r>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	dbec      	blt.n	8009ef6 <__swhatbuf_r+0x12>
 8009f1c:	9901      	ldr	r1, [sp, #4]
 8009f1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f26:	4259      	negs	r1, r3
 8009f28:	4159      	adcs	r1, r3
 8009f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f2e:	e7eb      	b.n	8009f08 <__swhatbuf_r+0x24>

08009f30 <__smakebuf_r>:
 8009f30:	898b      	ldrh	r3, [r1, #12]
 8009f32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f34:	079d      	lsls	r5, r3, #30
 8009f36:	4606      	mov	r6, r0
 8009f38:	460c      	mov	r4, r1
 8009f3a:	d507      	bpl.n	8009f4c <__smakebuf_r+0x1c>
 8009f3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	6123      	str	r3, [r4, #16]
 8009f44:	2301      	movs	r3, #1
 8009f46:	6163      	str	r3, [r4, #20]
 8009f48:	b003      	add	sp, #12
 8009f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f4c:	ab01      	add	r3, sp, #4
 8009f4e:	466a      	mov	r2, sp
 8009f50:	f7ff ffc8 	bl	8009ee4 <__swhatbuf_r>
 8009f54:	9f00      	ldr	r7, [sp, #0]
 8009f56:	4605      	mov	r5, r0
 8009f58:	4639      	mov	r1, r7
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f7ff f9a6 	bl	80092ac <_malloc_r>
 8009f60:	b948      	cbnz	r0, 8009f76 <__smakebuf_r+0x46>
 8009f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f66:	059a      	lsls	r2, r3, #22
 8009f68:	d4ee      	bmi.n	8009f48 <__smakebuf_r+0x18>
 8009f6a:	f023 0303 	bic.w	r3, r3, #3
 8009f6e:	f043 0302 	orr.w	r3, r3, #2
 8009f72:	81a3      	strh	r3, [r4, #12]
 8009f74:	e7e2      	b.n	8009f3c <__smakebuf_r+0xc>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	6020      	str	r0, [r4, #0]
 8009f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f7e:	81a3      	strh	r3, [r4, #12]
 8009f80:	9b01      	ldr	r3, [sp, #4]
 8009f82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f86:	b15b      	cbz	r3, 8009fa0 <__smakebuf_r+0x70>
 8009f88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f000 f81d 	bl	8009fcc <_isatty_r>
 8009f92:	b128      	cbz	r0, 8009fa0 <__smakebuf_r+0x70>
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	f023 0303 	bic.w	r3, r3, #3
 8009f9a:	f043 0301 	orr.w	r3, r3, #1
 8009f9e:	81a3      	strh	r3, [r4, #12]
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	431d      	orrs	r5, r3
 8009fa4:	81a5      	strh	r5, [r4, #12]
 8009fa6:	e7cf      	b.n	8009f48 <__smakebuf_r+0x18>

08009fa8 <_fstat_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4d07      	ldr	r5, [pc, #28]	@ (8009fc8 <_fstat_r+0x20>)
 8009fac:	2300      	movs	r3, #0
 8009fae:	4604      	mov	r4, r0
 8009fb0:	4608      	mov	r0, r1
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	602b      	str	r3, [r5, #0]
 8009fb6:	f7f8 fe61 	bl	8002c7c <_fstat>
 8009fba:	1c43      	adds	r3, r0, #1
 8009fbc:	d102      	bne.n	8009fc4 <_fstat_r+0x1c>
 8009fbe:	682b      	ldr	r3, [r5, #0]
 8009fc0:	b103      	cbz	r3, 8009fc4 <_fstat_r+0x1c>
 8009fc2:	6023      	str	r3, [r4, #0]
 8009fc4:	bd38      	pop	{r3, r4, r5, pc}
 8009fc6:	bf00      	nop
 8009fc8:	200008fc 	.word	0x200008fc

08009fcc <_isatty_r>:
 8009fcc:	b538      	push	{r3, r4, r5, lr}
 8009fce:	4d06      	ldr	r5, [pc, #24]	@ (8009fe8 <_isatty_r+0x1c>)
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	4608      	mov	r0, r1
 8009fd6:	602b      	str	r3, [r5, #0]
 8009fd8:	f7f8 fe60 	bl	8002c9c <_isatty>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	d102      	bne.n	8009fe6 <_isatty_r+0x1a>
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	b103      	cbz	r3, 8009fe6 <_isatty_r+0x1a>
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	200008fc 	.word	0x200008fc

08009fec <_sbrk_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4d06      	ldr	r5, [pc, #24]	@ (800a008 <_sbrk_r+0x1c>)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	4608      	mov	r0, r1
 8009ff6:	602b      	str	r3, [r5, #0]
 8009ff8:	f7f8 fe68 	bl	8002ccc <_sbrk>
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	d102      	bne.n	800a006 <_sbrk_r+0x1a>
 800a000:	682b      	ldr	r3, [r5, #0]
 800a002:	b103      	cbz	r3, 800a006 <_sbrk_r+0x1a>
 800a004:	6023      	str	r3, [r4, #0]
 800a006:	bd38      	pop	{r3, r4, r5, pc}
 800a008:	200008fc 	.word	0x200008fc

0800a00c <abort>:
 800a00c:	b508      	push	{r3, lr}
 800a00e:	2006      	movs	r0, #6
 800a010:	f000 f980 	bl	800a314 <raise>
 800a014:	2001      	movs	r0, #1
 800a016:	f7f8 fde1 	bl	8002bdc <_exit>

0800a01a <_calloc_r>:
 800a01a:	b570      	push	{r4, r5, r6, lr}
 800a01c:	fba1 5402 	umull	r5, r4, r1, r2
 800a020:	b93c      	cbnz	r4, 800a032 <_calloc_r+0x18>
 800a022:	4629      	mov	r1, r5
 800a024:	f7ff f942 	bl	80092ac <_malloc_r>
 800a028:	4606      	mov	r6, r0
 800a02a:	b928      	cbnz	r0, 800a038 <_calloc_r+0x1e>
 800a02c:	2600      	movs	r6, #0
 800a02e:	4630      	mov	r0, r6
 800a030:	bd70      	pop	{r4, r5, r6, pc}
 800a032:	220c      	movs	r2, #12
 800a034:	6002      	str	r2, [r0, #0]
 800a036:	e7f9      	b.n	800a02c <_calloc_r+0x12>
 800a038:	462a      	mov	r2, r5
 800a03a:	4621      	mov	r1, r4
 800a03c:	f7fd fe00 	bl	8007c40 <memset>
 800a040:	e7f5      	b.n	800a02e <_calloc_r+0x14>

0800a042 <__sfputc_r>:
 800a042:	6893      	ldr	r3, [r2, #8]
 800a044:	3b01      	subs	r3, #1
 800a046:	2b00      	cmp	r3, #0
 800a048:	b410      	push	{r4}
 800a04a:	6093      	str	r3, [r2, #8]
 800a04c:	da08      	bge.n	800a060 <__sfputc_r+0x1e>
 800a04e:	6994      	ldr	r4, [r2, #24]
 800a050:	42a3      	cmp	r3, r4
 800a052:	db01      	blt.n	800a058 <__sfputc_r+0x16>
 800a054:	290a      	cmp	r1, #10
 800a056:	d103      	bne.n	800a060 <__sfputc_r+0x1e>
 800a058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a05c:	f7fd bd5b 	b.w	8007b16 <__swbuf_r>
 800a060:	6813      	ldr	r3, [r2, #0]
 800a062:	1c58      	adds	r0, r3, #1
 800a064:	6010      	str	r0, [r2, #0]
 800a066:	7019      	strb	r1, [r3, #0]
 800a068:	4608      	mov	r0, r1
 800a06a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <__sfputs_r>:
 800a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a072:	4606      	mov	r6, r0
 800a074:	460f      	mov	r7, r1
 800a076:	4614      	mov	r4, r2
 800a078:	18d5      	adds	r5, r2, r3
 800a07a:	42ac      	cmp	r4, r5
 800a07c:	d101      	bne.n	800a082 <__sfputs_r+0x12>
 800a07e:	2000      	movs	r0, #0
 800a080:	e007      	b.n	800a092 <__sfputs_r+0x22>
 800a082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a086:	463a      	mov	r2, r7
 800a088:	4630      	mov	r0, r6
 800a08a:	f7ff ffda 	bl	800a042 <__sfputc_r>
 800a08e:	1c43      	adds	r3, r0, #1
 800a090:	d1f3      	bne.n	800a07a <__sfputs_r+0xa>
 800a092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a094 <_vfiprintf_r>:
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	460d      	mov	r5, r1
 800a09a:	b09d      	sub	sp, #116	@ 0x74
 800a09c:	4614      	mov	r4, r2
 800a09e:	4698      	mov	r8, r3
 800a0a0:	4606      	mov	r6, r0
 800a0a2:	b118      	cbz	r0, 800a0ac <_vfiprintf_r+0x18>
 800a0a4:	6a03      	ldr	r3, [r0, #32]
 800a0a6:	b90b      	cbnz	r3, 800a0ac <_vfiprintf_r+0x18>
 800a0a8:	f7fd fc5e 	bl	8007968 <__sinit>
 800a0ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0ae:	07d9      	lsls	r1, r3, #31
 800a0b0:	d405      	bmi.n	800a0be <_vfiprintf_r+0x2a>
 800a0b2:	89ab      	ldrh	r3, [r5, #12]
 800a0b4:	059a      	lsls	r2, r3, #22
 800a0b6:	d402      	bmi.n	800a0be <_vfiprintf_r+0x2a>
 800a0b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0ba:	f7fd feba 	bl	8007e32 <__retarget_lock_acquire_recursive>
 800a0be:	89ab      	ldrh	r3, [r5, #12]
 800a0c0:	071b      	lsls	r3, r3, #28
 800a0c2:	d501      	bpl.n	800a0c8 <_vfiprintf_r+0x34>
 800a0c4:	692b      	ldr	r3, [r5, #16]
 800a0c6:	b99b      	cbnz	r3, 800a0f0 <_vfiprintf_r+0x5c>
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f7fd fd62 	bl	8007b94 <__swsetup_r>
 800a0d0:	b170      	cbz	r0, 800a0f0 <_vfiprintf_r+0x5c>
 800a0d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0d4:	07dc      	lsls	r4, r3, #31
 800a0d6:	d504      	bpl.n	800a0e2 <_vfiprintf_r+0x4e>
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0dc:	b01d      	add	sp, #116	@ 0x74
 800a0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e2:	89ab      	ldrh	r3, [r5, #12]
 800a0e4:	0598      	lsls	r0, r3, #22
 800a0e6:	d4f7      	bmi.n	800a0d8 <_vfiprintf_r+0x44>
 800a0e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0ea:	f7fd fea3 	bl	8007e34 <__retarget_lock_release_recursive>
 800a0ee:	e7f3      	b.n	800a0d8 <_vfiprintf_r+0x44>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0f4:	2320      	movs	r3, #32
 800a0f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0fe:	2330      	movs	r3, #48	@ 0x30
 800a100:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a2b0 <_vfiprintf_r+0x21c>
 800a104:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a108:	f04f 0901 	mov.w	r9, #1
 800a10c:	4623      	mov	r3, r4
 800a10e:	469a      	mov	sl, r3
 800a110:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a114:	b10a      	cbz	r2, 800a11a <_vfiprintf_r+0x86>
 800a116:	2a25      	cmp	r2, #37	@ 0x25
 800a118:	d1f9      	bne.n	800a10e <_vfiprintf_r+0x7a>
 800a11a:	ebba 0b04 	subs.w	fp, sl, r4
 800a11e:	d00b      	beq.n	800a138 <_vfiprintf_r+0xa4>
 800a120:	465b      	mov	r3, fp
 800a122:	4622      	mov	r2, r4
 800a124:	4629      	mov	r1, r5
 800a126:	4630      	mov	r0, r6
 800a128:	f7ff ffa2 	bl	800a070 <__sfputs_r>
 800a12c:	3001      	adds	r0, #1
 800a12e:	f000 80a7 	beq.w	800a280 <_vfiprintf_r+0x1ec>
 800a132:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a134:	445a      	add	r2, fp
 800a136:	9209      	str	r2, [sp, #36]	@ 0x24
 800a138:	f89a 3000 	ldrb.w	r3, [sl]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f000 809f 	beq.w	800a280 <_vfiprintf_r+0x1ec>
 800a142:	2300      	movs	r3, #0
 800a144:	f04f 32ff 	mov.w	r2, #4294967295
 800a148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a14c:	f10a 0a01 	add.w	sl, sl, #1
 800a150:	9304      	str	r3, [sp, #16]
 800a152:	9307      	str	r3, [sp, #28]
 800a154:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a158:	931a      	str	r3, [sp, #104]	@ 0x68
 800a15a:	4654      	mov	r4, sl
 800a15c:	2205      	movs	r2, #5
 800a15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a162:	4853      	ldr	r0, [pc, #332]	@ (800a2b0 <_vfiprintf_r+0x21c>)
 800a164:	f7f6 f844 	bl	80001f0 <memchr>
 800a168:	9a04      	ldr	r2, [sp, #16]
 800a16a:	b9d8      	cbnz	r0, 800a1a4 <_vfiprintf_r+0x110>
 800a16c:	06d1      	lsls	r1, r2, #27
 800a16e:	bf44      	itt	mi
 800a170:	2320      	movmi	r3, #32
 800a172:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a176:	0713      	lsls	r3, r2, #28
 800a178:	bf44      	itt	mi
 800a17a:	232b      	movmi	r3, #43	@ 0x2b
 800a17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a180:	f89a 3000 	ldrb.w	r3, [sl]
 800a184:	2b2a      	cmp	r3, #42	@ 0x2a
 800a186:	d015      	beq.n	800a1b4 <_vfiprintf_r+0x120>
 800a188:	9a07      	ldr	r2, [sp, #28]
 800a18a:	4654      	mov	r4, sl
 800a18c:	2000      	movs	r0, #0
 800a18e:	f04f 0c0a 	mov.w	ip, #10
 800a192:	4621      	mov	r1, r4
 800a194:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a198:	3b30      	subs	r3, #48	@ 0x30
 800a19a:	2b09      	cmp	r3, #9
 800a19c:	d94b      	bls.n	800a236 <_vfiprintf_r+0x1a2>
 800a19e:	b1b0      	cbz	r0, 800a1ce <_vfiprintf_r+0x13a>
 800a1a0:	9207      	str	r2, [sp, #28]
 800a1a2:	e014      	b.n	800a1ce <_vfiprintf_r+0x13a>
 800a1a4:	eba0 0308 	sub.w	r3, r0, r8
 800a1a8:	fa09 f303 	lsl.w	r3, r9, r3
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	9304      	str	r3, [sp, #16]
 800a1b0:	46a2      	mov	sl, r4
 800a1b2:	e7d2      	b.n	800a15a <_vfiprintf_r+0xc6>
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	1d19      	adds	r1, r3, #4
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	9103      	str	r1, [sp, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	bfbb      	ittet	lt
 800a1c0:	425b      	neglt	r3, r3
 800a1c2:	f042 0202 	orrlt.w	r2, r2, #2
 800a1c6:	9307      	strge	r3, [sp, #28]
 800a1c8:	9307      	strlt	r3, [sp, #28]
 800a1ca:	bfb8      	it	lt
 800a1cc:	9204      	strlt	r2, [sp, #16]
 800a1ce:	7823      	ldrb	r3, [r4, #0]
 800a1d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1d2:	d10a      	bne.n	800a1ea <_vfiprintf_r+0x156>
 800a1d4:	7863      	ldrb	r3, [r4, #1]
 800a1d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1d8:	d132      	bne.n	800a240 <_vfiprintf_r+0x1ac>
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	1d1a      	adds	r2, r3, #4
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	9203      	str	r2, [sp, #12]
 800a1e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1e6:	3402      	adds	r4, #2
 800a1e8:	9305      	str	r3, [sp, #20]
 800a1ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a2c0 <_vfiprintf_r+0x22c>
 800a1ee:	7821      	ldrb	r1, [r4, #0]
 800a1f0:	2203      	movs	r2, #3
 800a1f2:	4650      	mov	r0, sl
 800a1f4:	f7f5 fffc 	bl	80001f0 <memchr>
 800a1f8:	b138      	cbz	r0, 800a20a <_vfiprintf_r+0x176>
 800a1fa:	9b04      	ldr	r3, [sp, #16]
 800a1fc:	eba0 000a 	sub.w	r0, r0, sl
 800a200:	2240      	movs	r2, #64	@ 0x40
 800a202:	4082      	lsls	r2, r0
 800a204:	4313      	orrs	r3, r2
 800a206:	3401      	adds	r4, #1
 800a208:	9304      	str	r3, [sp, #16]
 800a20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a20e:	4829      	ldr	r0, [pc, #164]	@ (800a2b4 <_vfiprintf_r+0x220>)
 800a210:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a214:	2206      	movs	r2, #6
 800a216:	f7f5 ffeb 	bl	80001f0 <memchr>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d03f      	beq.n	800a29e <_vfiprintf_r+0x20a>
 800a21e:	4b26      	ldr	r3, [pc, #152]	@ (800a2b8 <_vfiprintf_r+0x224>)
 800a220:	bb1b      	cbnz	r3, 800a26a <_vfiprintf_r+0x1d6>
 800a222:	9b03      	ldr	r3, [sp, #12]
 800a224:	3307      	adds	r3, #7
 800a226:	f023 0307 	bic.w	r3, r3, #7
 800a22a:	3308      	adds	r3, #8
 800a22c:	9303      	str	r3, [sp, #12]
 800a22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a230:	443b      	add	r3, r7
 800a232:	9309      	str	r3, [sp, #36]	@ 0x24
 800a234:	e76a      	b.n	800a10c <_vfiprintf_r+0x78>
 800a236:	fb0c 3202 	mla	r2, ip, r2, r3
 800a23a:	460c      	mov	r4, r1
 800a23c:	2001      	movs	r0, #1
 800a23e:	e7a8      	b.n	800a192 <_vfiprintf_r+0xfe>
 800a240:	2300      	movs	r3, #0
 800a242:	3401      	adds	r4, #1
 800a244:	9305      	str	r3, [sp, #20]
 800a246:	4619      	mov	r1, r3
 800a248:	f04f 0c0a 	mov.w	ip, #10
 800a24c:	4620      	mov	r0, r4
 800a24e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a252:	3a30      	subs	r2, #48	@ 0x30
 800a254:	2a09      	cmp	r2, #9
 800a256:	d903      	bls.n	800a260 <_vfiprintf_r+0x1cc>
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d0c6      	beq.n	800a1ea <_vfiprintf_r+0x156>
 800a25c:	9105      	str	r1, [sp, #20]
 800a25e:	e7c4      	b.n	800a1ea <_vfiprintf_r+0x156>
 800a260:	fb0c 2101 	mla	r1, ip, r1, r2
 800a264:	4604      	mov	r4, r0
 800a266:	2301      	movs	r3, #1
 800a268:	e7f0      	b.n	800a24c <_vfiprintf_r+0x1b8>
 800a26a:	ab03      	add	r3, sp, #12
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	462a      	mov	r2, r5
 800a270:	4b12      	ldr	r3, [pc, #72]	@ (800a2bc <_vfiprintf_r+0x228>)
 800a272:	a904      	add	r1, sp, #16
 800a274:	4630      	mov	r0, r6
 800a276:	f7fc ff33 	bl	80070e0 <_printf_float>
 800a27a:	4607      	mov	r7, r0
 800a27c:	1c78      	adds	r0, r7, #1
 800a27e:	d1d6      	bne.n	800a22e <_vfiprintf_r+0x19a>
 800a280:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a282:	07d9      	lsls	r1, r3, #31
 800a284:	d405      	bmi.n	800a292 <_vfiprintf_r+0x1fe>
 800a286:	89ab      	ldrh	r3, [r5, #12]
 800a288:	059a      	lsls	r2, r3, #22
 800a28a:	d402      	bmi.n	800a292 <_vfiprintf_r+0x1fe>
 800a28c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a28e:	f7fd fdd1 	bl	8007e34 <__retarget_lock_release_recursive>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	065b      	lsls	r3, r3, #25
 800a296:	f53f af1f 	bmi.w	800a0d8 <_vfiprintf_r+0x44>
 800a29a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a29c:	e71e      	b.n	800a0dc <_vfiprintf_r+0x48>
 800a29e:	ab03      	add	r3, sp, #12
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	4b05      	ldr	r3, [pc, #20]	@ (800a2bc <_vfiprintf_r+0x228>)
 800a2a6:	a904      	add	r1, sp, #16
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f7fd f9b1 	bl	8007610 <_printf_i>
 800a2ae:	e7e4      	b.n	800a27a <_vfiprintf_r+0x1e6>
 800a2b0:	0800a9f8 	.word	0x0800a9f8
 800a2b4:	0800aa02 	.word	0x0800aa02
 800a2b8:	080070e1 	.word	0x080070e1
 800a2bc:	0800a071 	.word	0x0800a071
 800a2c0:	0800a9fe 	.word	0x0800a9fe

0800a2c4 <_raise_r>:
 800a2c4:	291f      	cmp	r1, #31
 800a2c6:	b538      	push	{r3, r4, r5, lr}
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	d904      	bls.n	800a2d8 <_raise_r+0x14>
 800a2ce:	2316      	movs	r3, #22
 800a2d0:	6003      	str	r3, [r0, #0]
 800a2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d6:	bd38      	pop	{r3, r4, r5, pc}
 800a2d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a2da:	b112      	cbz	r2, 800a2e2 <_raise_r+0x1e>
 800a2dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2e0:	b94b      	cbnz	r3, 800a2f6 <_raise_r+0x32>
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f000 f830 	bl	800a348 <_getpid_r>
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	4601      	mov	r1, r0
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2f2:	f000 b817 	b.w	800a324 <_kill_r>
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d00a      	beq.n	800a310 <_raise_r+0x4c>
 800a2fa:	1c59      	adds	r1, r3, #1
 800a2fc:	d103      	bne.n	800a306 <_raise_r+0x42>
 800a2fe:	2316      	movs	r3, #22
 800a300:	6003      	str	r3, [r0, #0]
 800a302:	2001      	movs	r0, #1
 800a304:	e7e7      	b.n	800a2d6 <_raise_r+0x12>
 800a306:	2100      	movs	r1, #0
 800a308:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a30c:	4620      	mov	r0, r4
 800a30e:	4798      	blx	r3
 800a310:	2000      	movs	r0, #0
 800a312:	e7e0      	b.n	800a2d6 <_raise_r+0x12>

0800a314 <raise>:
 800a314:	4b02      	ldr	r3, [pc, #8]	@ (800a320 <raise+0xc>)
 800a316:	4601      	mov	r1, r0
 800a318:	6818      	ldr	r0, [r3, #0]
 800a31a:	f7ff bfd3 	b.w	800a2c4 <_raise_r>
 800a31e:	bf00      	nop
 800a320:	20000184 	.word	0x20000184

0800a324 <_kill_r>:
 800a324:	b538      	push	{r3, r4, r5, lr}
 800a326:	4d07      	ldr	r5, [pc, #28]	@ (800a344 <_kill_r+0x20>)
 800a328:	2300      	movs	r3, #0
 800a32a:	4604      	mov	r4, r0
 800a32c:	4608      	mov	r0, r1
 800a32e:	4611      	mov	r1, r2
 800a330:	602b      	str	r3, [r5, #0]
 800a332:	f7f8 fc43 	bl	8002bbc <_kill>
 800a336:	1c43      	adds	r3, r0, #1
 800a338:	d102      	bne.n	800a340 <_kill_r+0x1c>
 800a33a:	682b      	ldr	r3, [r5, #0]
 800a33c:	b103      	cbz	r3, 800a340 <_kill_r+0x1c>
 800a33e:	6023      	str	r3, [r4, #0]
 800a340:	bd38      	pop	{r3, r4, r5, pc}
 800a342:	bf00      	nop
 800a344:	200008fc 	.word	0x200008fc

0800a348 <_getpid_r>:
 800a348:	f7f8 bc30 	b.w	8002bac <_getpid>

0800a34c <_init>:
 800a34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34e:	bf00      	nop
 800a350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a352:	bc08      	pop	{r3}
 800a354:	469e      	mov	lr, r3
 800a356:	4770      	bx	lr

0800a358 <_fini>:
 800a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35a:	bf00      	nop
 800a35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a35e:	bc08      	pop	{r3}
 800a360:	469e      	mov	lr, r3
 800a362:	4770      	bx	lr
